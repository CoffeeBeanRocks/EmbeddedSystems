
L432_Lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060c0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f4  08006250  08006250  00016250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006544  08006544  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  08006544  08006544  00016544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800654c  0800654c  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800654c  0800654c  0001654c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006550  08006550  00016550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08006554  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  200000a4  080065f8  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002f4  080065f8  000202f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011aba  00000000  00000000  00020117  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e0e  00000000  00000000  00031bd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e38  00000000  00000000  000349e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ac9  00000000  00000000  00035818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022fee  00000000  00000000  000362e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000127a1  00000000  00000000  000592cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c97e5  00000000  00000000  0006ba70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000044c8  00000000  00000000  00135258  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00139720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a4 	.word	0x200000a4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006238 	.word	0x08006238

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a8 	.word	0x200000a8
 80001cc:	08006238 	.word	0x08006238

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <parse_command>:
  {"ts",ts_command},
  {"ds",ds_command},
  {0,0}
};

int parse_command (uint8_t *line, uint8_t **command, uint8_t **args) {
 800058c:	b480      	push	{r7}
 800058e:	b087      	sub	sp, #28
 8000590:	af00      	add	r7, sp, #0
 8000592:	60f8      	str	r0, [r7, #12]
 8000594:	60b9      	str	r1, [r7, #8]
 8000596:	607a      	str	r2, [r7, #4]
	// looks for the first comma, places a NULL and captures the remainder as the arguments
	uint8_t *p;
	if((!line) || (!command) || (!args)) {
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d005      	beq.n	80005aa <parse_command+0x1e>
 800059e:	68bb      	ldr	r3, [r7, #8]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d002      	beq.n	80005aa <parse_command+0x1e>
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d102      	bne.n	80005b0 <parse_command+0x24>
		return (-1); // Passed a bad pointer
 80005aa:	f04f 33ff 	mov.w	r3, #4294967295
 80005ae:	e01e      	b.n	80005ee <parse_command+0x62>
	}

	*command = line;
 80005b0:	68bb      	ldr	r3, [r7, #8]
 80005b2:	68fa      	ldr	r2, [r7, #12]
 80005b4:	601a      	str	r2, [r3, #0]
	p = line;
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	617b      	str	r3, [r7, #20]
	while (*p!=','){
 80005ba:	e00b      	b.n	80005d4 <parse_command+0x48>
		if (!*p) {
 80005bc:	697b      	ldr	r3, [r7, #20]
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d104      	bne.n	80005ce <parse_command+0x42>
			*args = '\0';
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
			return(0);
 80005ca:	2300      	movs	r3, #0
 80005cc:	e00f      	b.n	80005ee <parse_command+0x62>
		}
		p++;
 80005ce:	697b      	ldr	r3, [r7, #20]
 80005d0:	3301      	adds	r3, #1
 80005d2:	617b      	str	r3, [r7, #20]
	while (*p!=','){
 80005d4:	697b      	ldr	r3, [r7, #20]
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b2c      	cmp	r3, #44	; 0x2c
 80005da:	d1ef      	bne.n	80005bc <parse_command+0x30>
	}

	*p++ = '\0'; // Replace first comma with a null
 80005dc:	697b      	ldr	r3, [r7, #20]
 80005de:	1c5a      	adds	r2, r3, #1
 80005e0:	617a      	str	r2, [r7, #20]
 80005e2:	2200      	movs	r2, #0
 80005e4:	701a      	strb	r2, [r3, #0]
	*args = p; // The arguments are right after the comma
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	697a      	ldr	r2, [r7, #20]
 80005ea:	601a      	str	r2, [r3, #0]
	return (0);
 80005ec:	2300      	movs	r3, #0
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	371c      	adds	r7, #28
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
	...

080005fc <execute_command>:

int execute_command(uint8_t *line)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b086      	sub	sp, #24
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	uint8_t *cmd;
	uint8_t *arg;
	command_t *p = commands;
 8000604:	4b23      	ldr	r3, [pc, #140]	; (8000694 <execute_command+0x98>)
 8000606:	617b      	str	r3, [r7, #20]
	int success = 0;
 8000608:	2300      	movs	r3, #0
 800060a:	613b      	str	r3, [r7, #16]
	if (!line) {
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d102      	bne.n	8000618 <execute_command+0x1c>
		return (-1); // Passed a bad pointer
 8000612:	f04f 33ff 	mov.w	r3, #4294967295
 8000616:	e038      	b.n	800068a <execute_command+0x8e>
	}

	if (parse_command(line,&cmd,&arg) == -1) {
 8000618:	f107 0208 	add.w	r2, r7, #8
 800061c:	f107 030c 	add.w	r3, r7, #12
 8000620:	4619      	mov	r1, r3
 8000622:	6878      	ldr	r0, [r7, #4]
 8000624:	f7ff ffb2 	bl	800058c <parse_command>
 8000628:	4603      	mov	r3, r0
 800062a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800062e:	d121      	bne.n	8000674 <execute_command+0x78>
		printf("Error with parse command\n\r");
 8000630:	4819      	ldr	r0, [pc, #100]	; (8000698 <execute_command+0x9c>)
 8000632:	f004 fcf9 	bl	8005028 <iprintf>
		return (-1);
 8000636:	f04f 33ff 	mov.w	r3, #4294967295
 800063a:	e026      	b.n	800068a <execute_command+0x8e>
	}

	while (p->cmd_string) {
		if (!strcmp(p->cmd_string, (char *)cmd)) {
 800063c:	697b      	ldr	r3, [r7, #20]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	68fa      	ldr	r2, [r7, #12]
 8000642:	4611      	mov	r1, r2
 8000644:	4618      	mov	r0, r3
 8000646:	f7ff fdc3 	bl	80001d0 <strcmp>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d10e      	bne.n	800066e <execute_command+0x72>
			if (!p->cmd_function) {
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	685b      	ldr	r3, [r3, #4]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d102      	bne.n	800065e <execute_command+0x62>
				return (-1);
 8000658:	f04f 33ff 	mov.w	r3, #4294967295
 800065c:	e015      	b.n	800068a <execute_command+0x8e>
			}
			(*p->cmd_function)((char *)arg);
 800065e:	697b      	ldr	r3, [r7, #20]
 8000660:	685b      	ldr	r3, [r3, #4]
 8000662:	68ba      	ldr	r2, [r7, #8]
 8000664:	4610      	mov	r0, r2
 8000666:	4798      	blx	r3
			success = 1;
 8000668:	2301      	movs	r3, #1
 800066a:	613b      	str	r3, [r7, #16]
			break;
 800066c:	e006      	b.n	800067c <execute_command+0x80>
		}
		p++;
 800066e:	697b      	ldr	r3, [r7, #20]
 8000670:	3308      	adds	r3, #8
 8000672:	617b      	str	r3, [r7, #20]
	while (p->cmd_string) {
 8000674:	697b      	ldr	r3, [r7, #20]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d1df      	bne.n	800063c <execute_command+0x40>
	}

	if (success) {
 800067c:	693b      	ldr	r3, [r7, #16]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <execute_command+0x8a>
		return (0);
 8000682:	2300      	movs	r3, #0
 8000684:	e001      	b.n	800068a <execute_command+0x8e>
	}
	else {
		return (-1);
 8000686:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 800068a:	4618      	mov	r0, r3
 800068c:	3718      	adds	r7, #24
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	20000000 	.word	0x20000000
 8000698:	08006270 	.word	0x08006270

0800069c <get_command>:

int get_command(uint8_t *command_buf) {
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
	static uint32_t counter=0;
	static uint32_t mode = COLLECT_CHARS;
	uint8_t ch = 0;;
 80006a4:	2300      	movs	r3, #0
 80006a6:	73fb      	strb	r3, [r7, #15]
	uint32_t mask;
	ch=dequeue(&queue);
 80006a8:	482e      	ldr	r0, [pc, #184]	; (8000764 <get_command+0xc8>)
 80006aa:	f000 fd65 	bl	8001178 <dequeue>
 80006ae:	4603      	mov	r3, r0
 80006b0:	73fb      	strb	r3, [r7, #15]
	while (ch!=0)
 80006b2:	e03a      	b.n	800072a <get_command+0x8e>
	{
		if ((ch!='\n')&&(ch!='\r'))
 80006b4:	7bfb      	ldrb	r3, [r7, #15]
 80006b6:	2b0a      	cmp	r3, #10
 80006b8:	d027      	beq.n	800070a <get_command+0x6e>
 80006ba:	7bfb      	ldrb	r3, [r7, #15]
 80006bc:	2b0d      	cmp	r3, #13
 80006be:	d024      	beq.n	800070a <get_command+0x6e>
		{
			if (ch==0x7f)
 80006c0:	7bfb      	ldrb	r3, [r7, #15]
 80006c2:	2b7f      	cmp	r3, #127	; 0x7f
 80006c4:	d10c      	bne.n	80006e0 <get_command+0x44>
			{ // backspace functionality
				if (counter > 0)
 80006c6:	4b28      	ldr	r3, [pc, #160]	; (8000768 <get_command+0xcc>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d021      	beq.n	8000712 <get_command+0x76>
				{
					printf("\b \b");
 80006ce:	4827      	ldr	r0, [pc, #156]	; (800076c <get_command+0xd0>)
 80006d0:	f004 fcaa 	bl	8005028 <iprintf>
					counter--;
 80006d4:	4b24      	ldr	r3, [pc, #144]	; (8000768 <get_command+0xcc>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	3b01      	subs	r3, #1
 80006da:	4a23      	ldr	r2, [pc, #140]	; (8000768 <get_command+0xcc>)
 80006dc:	6013      	str	r3, [r2, #0]
			if (ch==0x7f)
 80006de:	e018      	b.n	8000712 <get_command+0x76>
				}
			}
			else
			{
				putchar(ch); // send the character
 80006e0:	7bfb      	ldrb	r3, [r7, #15]
 80006e2:	4618      	mov	r0, r3
 80006e4:	f004 fcb2 	bl	800504c <putchar>
				command_buf[counter++]=ch;
 80006e8:	4b1f      	ldr	r3, [pc, #124]	; (8000768 <get_command+0xcc>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	1c5a      	adds	r2, r3, #1
 80006ee:	491e      	ldr	r1, [pc, #120]	; (8000768 <get_command+0xcc>)
 80006f0:	600a      	str	r2, [r1, #0]
 80006f2:	687a      	ldr	r2, [r7, #4]
 80006f4:	4413      	add	r3, r2
 80006f6:	7bfa      	ldrb	r2, [r7, #15]
 80006f8:	701a      	strb	r2, [r3, #0]
				if (counter>=(QUEUE_SIZE-2))
 80006fa:	4b1b      	ldr	r3, [pc, #108]	; (8000768 <get_command+0xcc>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	2b1d      	cmp	r3, #29
 8000700:	d907      	bls.n	8000712 <get_command+0x76>
				{
					mode=COMPLETE;
 8000702:	4b1b      	ldr	r3, [pc, #108]	; (8000770 <get_command+0xd4>)
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
					break;
 8000708:	e012      	b.n	8000730 <get_command+0x94>
				}
			}
		}
		else
		{
			mode = COMPLETE;
 800070a:	4b19      	ldr	r3, [pc, #100]	; (8000770 <get_command+0xd4>)
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
			break;
 8000710:	e00e      	b.n	8000730 <get_command+0x94>
			if (ch==0x7f)
 8000712:	bf00      	nop
		}
		mask = disable();
 8000714:	f000 fada 	bl	8000ccc <disable>
 8000718:	60b8      	str	r0, [r7, #8]
		ch=dequeue(&queue);
 800071a:	4812      	ldr	r0, [pc, #72]	; (8000764 <get_command+0xc8>)
 800071c:	f000 fd2c 	bl	8001178 <dequeue>
 8000720:	4603      	mov	r3, r0
 8000722:	73fb      	strb	r3, [r7, #15]
		restore(mask);
 8000724:	68b8      	ldr	r0, [r7, #8]
 8000726:	f000 fae4 	bl	8000cf2 <restore>
	while (ch!=0)
 800072a:	7bfb      	ldrb	r3, [r7, #15]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d1c1      	bne.n	80006b4 <get_command+0x18>
	}

	if (mode == COMPLETE)
 8000730:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <get_command+0xd4>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d110      	bne.n	800075a <get_command+0xbe>
	{
		command_buf[counter] = 0;
 8000738:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <get_command+0xcc>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	687a      	ldr	r2, [r7, #4]
 800073e:	4413      	add	r3, r2
 8000740:	2200      	movs	r2, #0
 8000742:	701a      	strb	r2, [r3, #0]
		printf("\n\r");
 8000744:	480b      	ldr	r0, [pc, #44]	; (8000774 <get_command+0xd8>)
 8000746:	f004 fc6f 	bl	8005028 <iprintf>
		counter = 0;
 800074a:	4b07      	ldr	r3, [pc, #28]	; (8000768 <get_command+0xcc>)
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
		mode = COLLECT_CHARS;
 8000750:	4b07      	ldr	r3, [pc, #28]	; (8000770 <get_command+0xd4>)
 8000752:	2201      	movs	r2, #1
 8000754:	601a      	str	r2, [r3, #0]
		return(1);
 8000756:	2301      	movs	r3, #1
 8000758:	e000      	b.n	800075c <get_command+0xc0>
	}
	else
	{
		return(0);
 800075a:	2300      	movs	r3, #0
	}
}
 800075c:	4618      	mov	r0, r3
 800075e:	3710      	adds	r7, #16
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	200000c4 	.word	0x200000c4
 8000768:	200000c0 	.word	0x200000c0
 800076c:	0800628c 	.word	0x0800628c
 8000770:	20000038 	.word	0x20000038
 8000774:	08006290 	.word	0x08006290

08000778 <prompt>:

void __attribute__((weak)) prompt(void) {
 8000778:	b580      	push	{r7, lr}
 800077a:	b086      	sub	sp, #24
 800077c:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef current_time;
	RTC_DateTypeDef current_date;
	HAL_RTC_GetTime(&hrtc, &current_time, RTC_FORMAT_BIN);
 800077e:	1d3b      	adds	r3, r7, #4
 8000780:	2200      	movs	r2, #0
 8000782:	4619      	mov	r1, r3
 8000784:	480f      	ldr	r0, [pc, #60]	; (80007c4 <prompt+0x4c>)
 8000786:	f002 fe26 	bl	80033d6 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &current_date, RTC_FORMAT_BIN);
 800078a:	463b      	mov	r3, r7
 800078c:	2200      	movs	r2, #0
 800078e:	4619      	mov	r1, r3
 8000790:	480c      	ldr	r0, [pc, #48]	; (80007c4 <prompt+0x4c>)
 8000792:	f002 ff03 	bl	800359c <HAL_RTC_GetDate>
	printf("%02d/%02d/20%02d ", current_date.Month, current_date.Date, current_date.Year);
 8000796:	787b      	ldrb	r3, [r7, #1]
 8000798:	4619      	mov	r1, r3
 800079a:	78bb      	ldrb	r3, [r7, #2]
 800079c:	461a      	mov	r2, r3
 800079e:	78fb      	ldrb	r3, [r7, #3]
 80007a0:	4809      	ldr	r0, [pc, #36]	; (80007c8 <prompt+0x50>)
 80007a2:	f004 fc41 	bl	8005028 <iprintf>
	printf("%02d:%02d:%02d", current_time.Hours, current_time.Minutes, current_time.Seconds);
 80007a6:	793b      	ldrb	r3, [r7, #4]
 80007a8:	4619      	mov	r1, r3
 80007aa:	797b      	ldrb	r3, [r7, #5]
 80007ac:	461a      	mov	r2, r3
 80007ae:	79bb      	ldrb	r3, [r7, #6]
 80007b0:	4806      	ldr	r0, [pc, #24]	; (80007cc <prompt+0x54>)
 80007b2:	f004 fc39 	bl	8005028 <iprintf>
	printf("> ");
 80007b6:	4806      	ldr	r0, [pc, #24]	; (80007d0 <prompt+0x58>)
 80007b8:	f004 fc36 	bl	8005028 <iprintf>
}
 80007bc:	bf00      	nop
 80007be:	3718      	adds	r7, #24
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	200000f0 	.word	0x200000f0
 80007c8:	08006294 	.word	0x08006294
 80007cc:	080062a8 	.word	0x080062a8
 80007d0:	080062b8 	.word	0x080062b8

080007d4 <help_command>:

void __attribute__((weak)) help_command(char *arguments) {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
	int i = 0;
 80007dc:	2300      	movs	r3, #0
 80007de:	60fb      	str	r3, [r7, #12]
	printf("Available Commands:\n\r");
 80007e0:	480d      	ldr	r0, [pc, #52]	; (8000818 <help_command+0x44>)
 80007e2:	f004 fc21 	bl	8005028 <iprintf>
	while(commands[i].cmd_string != 0)
 80007e6:	e00a      	b.n	80007fe <help_command+0x2a>
	{
		printf("%s\n\r", commands[i].cmd_string);
 80007e8:	4a0c      	ldr	r2, [pc, #48]	; (800081c <help_command+0x48>)
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80007f0:	4619      	mov	r1, r3
 80007f2:	480b      	ldr	r0, [pc, #44]	; (8000820 <help_command+0x4c>)
 80007f4:	f004 fc18 	bl	8005028 <iprintf>
		i++;
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	3301      	adds	r3, #1
 80007fc:	60fb      	str	r3, [r7, #12]
	while(commands[i].cmd_string != 0)
 80007fe:	4a07      	ldr	r2, [pc, #28]	; (800081c <help_command+0x48>)
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d1ee      	bne.n	80007e8 <help_command+0x14>
	}
	prompt();
 800080a:	f7ff ffb5 	bl	8000778 <prompt>
}
 800080e:	bf00      	nop
 8000810:	3710      	adds	r7, #16
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	080062bc 	.word	0x080062bc
 800081c:	20000000 	.word	0x20000000
 8000820:	080062d4 	.word	0x080062d4

08000824 <lof_command>:

void __attribute__((weak)) lof_command(char *arguments) {
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800082c:	2200      	movs	r2, #0
 800082e:	2108      	movs	r1, #8
 8000830:	4804      	ldr	r0, [pc, #16]	; (8000844 <lof_command+0x20>)
 8000832:	f001 fad5 	bl	8001de0 <HAL_GPIO_WritePin>
	prompt();
 8000836:	f7ff ff9f 	bl	8000778 <prompt>
}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	48000400 	.word	0x48000400

08000848 <lon_command>:

void __attribute__((weak)) lon_command(char *arguments) {
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000850:	2201      	movs	r2, #1
 8000852:	2108      	movs	r1, #8
 8000854:	4804      	ldr	r0, [pc, #16]	; (8000868 <lon_command+0x20>)
 8000856:	f001 fac3 	bl	8001de0 <HAL_GPIO_WritePin>
	prompt();
 800085a:	f7ff ff8d 	bl	8000778 <prompt>
}
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	48000400 	.word	0x48000400

0800086c <test_command>:

void __attribute__((weak)) test_command(char *arguments) {
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
	if (arguments != NULL) {
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d014      	beq.n	80008a4 <test_command+0x38>
	    char *token = strtok(arguments, ",");
 800087a:	490d      	ldr	r1, [pc, #52]	; (80008b0 <test_command+0x44>)
 800087c:	6878      	ldr	r0, [r7, #4]
 800087e:	f004 fce7 	bl	8005250 <strtok>
 8000882:	60f8      	str	r0, [r7, #12]
	    while (token != NULL) {
 8000884:	e008      	b.n	8000898 <test_command+0x2c>
	    	printf("%s\n\r", token);
 8000886:	68f9      	ldr	r1, [r7, #12]
 8000888:	480a      	ldr	r0, [pc, #40]	; (80008b4 <test_command+0x48>)
 800088a:	f004 fbcd 	bl	8005028 <iprintf>
	        token = strtok(NULL, ",");
 800088e:	4908      	ldr	r1, [pc, #32]	; (80008b0 <test_command+0x44>)
 8000890:	2000      	movs	r0, #0
 8000892:	f004 fcdd 	bl	8005250 <strtok>
 8000896:	60f8      	str	r0, [r7, #12]
	    while (token != NULL) {
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d1f3      	bne.n	8000886 <test_command+0x1a>
	    }
	    printf("OK\n\r");
 800089e:	4806      	ldr	r0, [pc, #24]	; (80008b8 <test_command+0x4c>)
 80008a0:	f004 fbc2 	bl	8005028 <iprintf>
	}
	prompt();
 80008a4:	f7ff ff68 	bl	8000778 <prompt>
}
 80008a8:	bf00      	nop
 80008aa:	3710      	adds	r7, #16
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	080062dc 	.word	0x080062dc
 80008b4:	080062d4 	.word	0x080062d4
 80008b8:	080062e0 	.word	0x080062e0

080008bc <ts_command>:

void __attribute__((weak)) ts_command(char *arguments) {
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08c      	sub	sp, #48	; 0x30
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]

	int count = 0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	char *str = arguments;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	62bb      	str	r3, [r7, #40]	; 0x28
	while (*str) {
 80008cc:	e009      	b.n	80008e2 <ts_command+0x26>
		if (*str == ',') {
 80008ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	2b2c      	cmp	r3, #44	; 0x2c
 80008d4:	d102      	bne.n	80008dc <ts_command+0x20>
			count++;
 80008d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008d8:	3301      	adds	r3, #1
 80008da:	62fb      	str	r3, [r7, #44]	; 0x2c
		}
		str++;
 80008dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008de:	3301      	adds	r3, #1
 80008e0:	62bb      	str	r3, [r7, #40]	; 0x28
	while (*str) {
 80008e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d1f1      	bne.n	80008ce <ts_command+0x12>
	}

	if(count != 2) {
 80008ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008ec:	2b02      	cmp	r3, #2
 80008ee:	d003      	beq.n	80008f8 <ts_command+0x3c>
		printf("NOK\n\r");
 80008f0:	4849      	ldr	r0, [pc, #292]	; (8000a18 <ts_command+0x15c>)
 80008f2:	f004 fb99 	bl	8005028 <iprintf>
		return;
 80008f6:	e08b      	b.n	8000a10 <ts_command+0x154>
	}

	RTC_TimeTypeDef newTime = {0};
 80008f8:	f107 030c 	add.w	r3, r7, #12
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
 8000906:	611a      	str	r2, [r3, #16]

	char *num = strtok(arguments, ",");
 8000908:	4944      	ldr	r1, [pc, #272]	; (8000a1c <ts_command+0x160>)
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f004 fca0 	bl	8005250 <strtok>
 8000910:	6278      	str	r0, [r7, #36]	; 0x24
	int result = atoi(num);
 8000912:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000914:	f004 fa2d 	bl	8004d72 <atoi>
 8000918:	6238      	str	r0, [r7, #32]
	if((!result && strcmp(num, "0")) || (result < 0 && result > 23))
 800091a:	6a3b      	ldr	r3, [r7, #32]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d106      	bne.n	800092e <ts_command+0x72>
 8000920:	493f      	ldr	r1, [pc, #252]	; (8000a20 <ts_command+0x164>)
 8000922:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000924:	f7ff fc54 	bl	80001d0 <strcmp>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d105      	bne.n	800093a <ts_command+0x7e>
 800092e:	6a3b      	ldr	r3, [r7, #32]
 8000930:	2b00      	cmp	r3, #0
 8000932:	da06      	bge.n	8000942 <ts_command+0x86>
 8000934:	6a3b      	ldr	r3, [r7, #32]
 8000936:	2b17      	cmp	r3, #23
 8000938:	dd03      	ble.n	8000942 <ts_command+0x86>
	{
		printf("NOK\n\r");
 800093a:	4837      	ldr	r0, [pc, #220]	; (8000a18 <ts_command+0x15c>)
 800093c:	f004 fb74 	bl	8005028 <iprintf>
		return;
 8000940:	e066      	b.n	8000a10 <ts_command+0x154>
	}

	newTime.Hours = strtol(num, NULL, 0);
 8000942:	2200      	movs	r2, #0
 8000944:	2100      	movs	r1, #0
 8000946:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000948:	f004 fa9a 	bl	8004e80 <strtol>
 800094c:	4603      	mov	r3, r0
 800094e:	b2db      	uxtb	r3, r3
 8000950:	733b      	strb	r3, [r7, #12]

	num = strtok(NULL, ",");
 8000952:	4932      	ldr	r1, [pc, #200]	; (8000a1c <ts_command+0x160>)
 8000954:	2000      	movs	r0, #0
 8000956:	f004 fc7b 	bl	8005250 <strtok>
 800095a:	6278      	str	r0, [r7, #36]	; 0x24
	result = atoi(num);
 800095c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800095e:	f004 fa08 	bl	8004d72 <atoi>
 8000962:	6238      	str	r0, [r7, #32]
	if((!result && strcmp(num, "0")) || (result < 0 && result > 59))
 8000964:	6a3b      	ldr	r3, [r7, #32]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d106      	bne.n	8000978 <ts_command+0xbc>
 800096a:	492d      	ldr	r1, [pc, #180]	; (8000a20 <ts_command+0x164>)
 800096c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800096e:	f7ff fc2f 	bl	80001d0 <strcmp>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d105      	bne.n	8000984 <ts_command+0xc8>
 8000978:	6a3b      	ldr	r3, [r7, #32]
 800097a:	2b00      	cmp	r3, #0
 800097c:	da06      	bge.n	800098c <ts_command+0xd0>
 800097e:	6a3b      	ldr	r3, [r7, #32]
 8000980:	2b3b      	cmp	r3, #59	; 0x3b
 8000982:	dd03      	ble.n	800098c <ts_command+0xd0>
	{
		printf("NOK\n\r");
 8000984:	4824      	ldr	r0, [pc, #144]	; (8000a18 <ts_command+0x15c>)
 8000986:	f004 fb4f 	bl	8005028 <iprintf>
		return;
 800098a:	e041      	b.n	8000a10 <ts_command+0x154>
	}
	newTime.Minutes = strtol(num, NULL, 0);
 800098c:	2200      	movs	r2, #0
 800098e:	2100      	movs	r1, #0
 8000990:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000992:	f004 fa75 	bl	8004e80 <strtol>
 8000996:	4603      	mov	r3, r0
 8000998:	b2db      	uxtb	r3, r3
 800099a:	737b      	strb	r3, [r7, #13]

	num = strtok(NULL, ",");
 800099c:	491f      	ldr	r1, [pc, #124]	; (8000a1c <ts_command+0x160>)
 800099e:	2000      	movs	r0, #0
 80009a0:	f004 fc56 	bl	8005250 <strtok>
 80009a4:	6278      	str	r0, [r7, #36]	; 0x24
	result = atoi(num);
 80009a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80009a8:	f004 f9e3 	bl	8004d72 <atoi>
 80009ac:	6238      	str	r0, [r7, #32]
	if((!result && strcmp(num, "0")) || (result < 0 && result > 59))
 80009ae:	6a3b      	ldr	r3, [r7, #32]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d106      	bne.n	80009c2 <ts_command+0x106>
 80009b4:	491a      	ldr	r1, [pc, #104]	; (8000a20 <ts_command+0x164>)
 80009b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80009b8:	f7ff fc0a 	bl	80001d0 <strcmp>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d105      	bne.n	80009ce <ts_command+0x112>
 80009c2:	6a3b      	ldr	r3, [r7, #32]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	da06      	bge.n	80009d6 <ts_command+0x11a>
 80009c8:	6a3b      	ldr	r3, [r7, #32]
 80009ca:	2b3b      	cmp	r3, #59	; 0x3b
 80009cc:	dd03      	ble.n	80009d6 <ts_command+0x11a>
	{
		printf("NOK\n\r");
 80009ce:	4812      	ldr	r0, [pc, #72]	; (8000a18 <ts_command+0x15c>)
 80009d0:	f004 fb2a 	bl	8005028 <iprintf>
		return;
 80009d4:	e01c      	b.n	8000a10 <ts_command+0x154>
	}
	newTime.Seconds = strtol(num, NULL, 0);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2100      	movs	r1, #0
 80009da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80009dc:	f004 fa50 	bl	8004e80 <strtol>
 80009e0:	4603      	mov	r3, r0
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	73bb      	strb	r3, [r7, #14]

	newTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80009e6:	2300      	movs	r3, #0
 80009e8:	61bb      	str	r3, [r7, #24]
	newTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80009ea:	2300      	movs	r3, #0
 80009ec:	61fb      	str	r3, [r7, #28]
	if (HAL_RTC_SetTime(&hrtc, &newTime, RTC_FORMAT_BCD) != HAL_OK)
 80009ee:	f107 030c 	add.w	r3, r7, #12
 80009f2:	2201      	movs	r2, #1
 80009f4:	4619      	mov	r1, r3
 80009f6:	480b      	ldr	r0, [pc, #44]	; (8000a24 <ts_command+0x168>)
 80009f8:	f002 fc50 	bl	800329c <HAL_RTC_SetTime>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <ts_command+0x14a>
	{
		Error_Handler();
 8000a02:	f000 fb67 	bl	80010d4 <Error_Handler>
	}

	printf("OK\n\r");
 8000a06:	4808      	ldr	r0, [pc, #32]	; (8000a28 <ts_command+0x16c>)
 8000a08:	f004 fb0e 	bl	8005028 <iprintf>
	prompt();
 8000a0c:	f7ff feb4 	bl	8000778 <prompt>
}
 8000a10:	3730      	adds	r7, #48	; 0x30
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	080062e8 	.word	0x080062e8
 8000a1c:	080062dc 	.word	0x080062dc
 8000a20:	080062f0 	.word	0x080062f0
 8000a24:	200000f0 	.word	0x200000f0
 8000a28:	080062e0 	.word	0x080062e0

08000a2c <isLeapYear>:

int isLeapYear(int year) {
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
    if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) {
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	f003 0303 	and.w	r3, r3, #3
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d10c      	bne.n	8000a58 <isLeapYear+0x2c>
 8000a3e:	687a      	ldr	r2, [r7, #4]
 8000a40:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <isLeapYear+0x5c>)
 8000a42:	fb83 1302 	smull	r1, r3, r3, r2
 8000a46:	1159      	asrs	r1, r3, #5
 8000a48:	17d3      	asrs	r3, r2, #31
 8000a4a:	1acb      	subs	r3, r1, r3
 8000a4c:	2164      	movs	r1, #100	; 0x64
 8000a4e:	fb01 f303 	mul.w	r3, r1, r3
 8000a52:	1ad3      	subs	r3, r2, r3
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d10d      	bne.n	8000a74 <isLeapYear+0x48>
 8000a58:	687a      	ldr	r2, [r7, #4]
 8000a5a:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <isLeapYear+0x5c>)
 8000a5c:	fb83 1302 	smull	r1, r3, r3, r2
 8000a60:	11d9      	asrs	r1, r3, #7
 8000a62:	17d3      	asrs	r3, r2, #31
 8000a64:	1acb      	subs	r3, r1, r3
 8000a66:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000a6a:	fb01 f303 	mul.w	r3, r1, r3
 8000a6e:	1ad3      	subs	r3, r2, r3
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d101      	bne.n	8000a78 <isLeapYear+0x4c>
        return 1;
 8000a74:	2301      	movs	r3, #1
 8000a76:	e000      	b.n	8000a7a <isLeapYear+0x4e>
    } else {
        return 0;
 8000a78:	2300      	movs	r3, #0
    }
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	370c      	adds	r7, #12
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	51eb851f 	.word	0x51eb851f

08000a8c <isValidDate>:

int isValidDate(int day, int month, int year) {
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b086      	sub	sp, #24
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	60f8      	str	r0, [r7, #12]
 8000a94:	60b9      	str	r1, [r7, #8]
 8000a96:	607a      	str	r2, [r7, #4]
    if (year < 1 || year > 9999) {
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	dd04      	ble.n	8000aa8 <isValidDate+0x1c>
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	f242 720f 	movw	r2, #9999	; 0x270f
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	dd01      	ble.n	8000aac <isValidDate+0x20>
        return 0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	e030      	b.n	8000b0e <isValidDate+0x82>
    }

    if (month < 1 || month > 12) {
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	dd02      	ble.n	8000ab8 <isValidDate+0x2c>
 8000ab2:	68bb      	ldr	r3, [r7, #8]
 8000ab4:	2b0c      	cmp	r3, #12
 8000ab6:	dd01      	ble.n	8000abc <isValidDate+0x30>
        return 0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	e028      	b.n	8000b0e <isValidDate+0x82>
    }

    int maxDays = 31;
 8000abc:	231f      	movs	r3, #31
 8000abe:	617b      	str	r3, [r7, #20]

    if (month == 4 || month == 6 || month == 9 || month == 11) {
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	2b04      	cmp	r3, #4
 8000ac4:	d008      	beq.n	8000ad8 <isValidDate+0x4c>
 8000ac6:	68bb      	ldr	r3, [r7, #8]
 8000ac8:	2b06      	cmp	r3, #6
 8000aca:	d005      	beq.n	8000ad8 <isValidDate+0x4c>
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	2b09      	cmp	r3, #9
 8000ad0:	d002      	beq.n	8000ad8 <isValidDate+0x4c>
 8000ad2:	68bb      	ldr	r3, [r7, #8]
 8000ad4:	2b0b      	cmp	r3, #11
 8000ad6:	d102      	bne.n	8000ade <isValidDate+0x52>
        maxDays = 30;
 8000ad8:	231e      	movs	r3, #30
 8000ada:	617b      	str	r3, [r7, #20]
 8000adc:	e00d      	b.n	8000afa <isValidDate+0x6e>
    } else if (month == 2) {
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	2b02      	cmp	r3, #2
 8000ae2:	d10a      	bne.n	8000afa <isValidDate+0x6e>
        if (isLeapYear(year)) {
 8000ae4:	6878      	ldr	r0, [r7, #4]
 8000ae6:	f7ff ffa1 	bl	8000a2c <isLeapYear>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d002      	beq.n	8000af6 <isValidDate+0x6a>
            maxDays = 29;
 8000af0:	231d      	movs	r3, #29
 8000af2:	617b      	str	r3, [r7, #20]
 8000af4:	e001      	b.n	8000afa <isValidDate+0x6e>
        } else {
            maxDays = 28;
 8000af6:	231c      	movs	r3, #28
 8000af8:	617b      	str	r3, [r7, #20]
        }
    }

    if (day < 1 || day > maxDays) {
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	dd03      	ble.n	8000b08 <isValidDate+0x7c>
 8000b00:	68fa      	ldr	r2, [r7, #12]
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	dd01      	ble.n	8000b0c <isValidDate+0x80>
        return 0;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	e000      	b.n	8000b0e <isValidDate+0x82>
    }

    return 1;
 8000b0c:	2301      	movs	r3, #1
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3718      	adds	r7, #24
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <getMonth>:

uint8_t getMonth(int month) {
 8000b16:	b480      	push	{r7}
 8000b18:	b083      	sub	sp, #12
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	6078      	str	r0, [r7, #4]
	if(month == 1) {
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2b01      	cmp	r3, #1
 8000b22:	d101      	bne.n	8000b28 <getMonth+0x12>
		return RTC_MONTH_JANUARY;
 8000b24:	2301      	movs	r3, #1
 8000b26:	e032      	b.n	8000b8e <getMonth+0x78>
	}
	else if(month == 2) {
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2b02      	cmp	r3, #2
 8000b2c:	d101      	bne.n	8000b32 <getMonth+0x1c>
		return RTC_MONTH_FEBRUARY;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	e02d      	b.n	8000b8e <getMonth+0x78>
	}
	else if(month == 3) {
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2b03      	cmp	r3, #3
 8000b36:	d101      	bne.n	8000b3c <getMonth+0x26>
		return RTC_MONTH_MARCH;
 8000b38:	2303      	movs	r3, #3
 8000b3a:	e028      	b.n	8000b8e <getMonth+0x78>
	}
	else if(month == 4) {
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2b04      	cmp	r3, #4
 8000b40:	d101      	bne.n	8000b46 <getMonth+0x30>
		return RTC_MONTH_APRIL;
 8000b42:	2304      	movs	r3, #4
 8000b44:	e023      	b.n	8000b8e <getMonth+0x78>
	}
	else if(month == 5) {
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2b05      	cmp	r3, #5
 8000b4a:	d101      	bne.n	8000b50 <getMonth+0x3a>
		return RTC_MONTH_MAY;
 8000b4c:	2305      	movs	r3, #5
 8000b4e:	e01e      	b.n	8000b8e <getMonth+0x78>
	}
	else if(month == 6) {
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2b06      	cmp	r3, #6
 8000b54:	d101      	bne.n	8000b5a <getMonth+0x44>
		return RTC_MONTH_JUNE;
 8000b56:	2306      	movs	r3, #6
 8000b58:	e019      	b.n	8000b8e <getMonth+0x78>
	}
	else if(month == 7) {
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2b07      	cmp	r3, #7
 8000b5e:	d101      	bne.n	8000b64 <getMonth+0x4e>
		return RTC_MONTH_JULY;
 8000b60:	2307      	movs	r3, #7
 8000b62:	e014      	b.n	8000b8e <getMonth+0x78>
	}
	else if(month == 8) {
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2b08      	cmp	r3, #8
 8000b68:	d101      	bne.n	8000b6e <getMonth+0x58>
		return RTC_MONTH_AUGUST;
 8000b6a:	2308      	movs	r3, #8
 8000b6c:	e00f      	b.n	8000b8e <getMonth+0x78>
	}
	else if(month == 9) {
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2b09      	cmp	r3, #9
 8000b72:	d101      	bne.n	8000b78 <getMonth+0x62>
		return RTC_MONTH_SEPTEMBER;
 8000b74:	2309      	movs	r3, #9
 8000b76:	e00a      	b.n	8000b8e <getMonth+0x78>
	}
	else if(month == 10) {
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2b0a      	cmp	r3, #10
 8000b7c:	d101      	bne.n	8000b82 <getMonth+0x6c>
		return RTC_MONTH_OCTOBER;
 8000b7e:	2310      	movs	r3, #16
 8000b80:	e005      	b.n	8000b8e <getMonth+0x78>
	}
	else if(month == 11) {
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2b0b      	cmp	r3, #11
 8000b86:	d101      	bne.n	8000b8c <getMonth+0x76>
		return RTC_MONTH_NOVEMBER;
 8000b88:	2311      	movs	r3, #17
 8000b8a:	e000      	b.n	8000b8e <getMonth+0x78>
	}
	else {
		return RTC_MONTH_DECEMBER;
 8000b8c:	2312      	movs	r3, #18
	}
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
	...

08000b9c <ds_command>:

void __attribute__((weak)) ds_command(char *arguments) {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08a      	sub	sp, #40	; 0x28
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]

	int count = 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	627b      	str	r3, [r7, #36]	; 0x24
	char *str = arguments;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	623b      	str	r3, [r7, #32]
	while (*str) {
 8000bac:	e009      	b.n	8000bc2 <ds_command+0x26>
		if (*str == ',') {
 8000bae:	6a3b      	ldr	r3, [r7, #32]
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	2b2c      	cmp	r3, #44	; 0x2c
 8000bb4:	d102      	bne.n	8000bbc <ds_command+0x20>
			count++;
 8000bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb8:	3301      	adds	r3, #1
 8000bba:	627b      	str	r3, [r7, #36]	; 0x24
		}
		str++;
 8000bbc:	6a3b      	ldr	r3, [r7, #32]
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	623b      	str	r3, [r7, #32]
	while (*str) {
 8000bc2:	6a3b      	ldr	r3, [r7, #32]
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d1f1      	bne.n	8000bae <ds_command+0x12>
	}

	if(count != 2) {
 8000bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bcc:	2b02      	cmp	r3, #2
 8000bce:	d003      	beq.n	8000bd8 <ds_command+0x3c>
		printf("NOK\n\r");
 8000bd0:	4839      	ldr	r0, [pc, #228]	; (8000cb8 <ds_command+0x11c>)
 8000bd2:	f004 fa29 	bl	8005028 <iprintf>
		return;
 8000bd6:	e06c      	b.n	8000cb2 <ds_command+0x116>
	}

	RTC_DateTypeDef newDate = {0};
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60fb      	str	r3, [r7, #12]
	newDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	733b      	strb	r3, [r7, #12]

	char *num = strtok(arguments, ",");
 8000be0:	4936      	ldr	r1, [pc, #216]	; (8000cbc <ds_command+0x120>)
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	f004 fb34 	bl	8005250 <strtok>
 8000be8:	61f8      	str	r0, [r7, #28]
	int month = atoi(num);
 8000bea:	69f8      	ldr	r0, [r7, #28]
 8000bec:	f004 f8c1 	bl	8004d72 <atoi>
 8000bf0:	61b8      	str	r0, [r7, #24]
	if(!month && strcmp(num, "0"))
 8000bf2:	69bb      	ldr	r3, [r7, #24]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d10a      	bne.n	8000c0e <ds_command+0x72>
 8000bf8:	4931      	ldr	r1, [pc, #196]	; (8000cc0 <ds_command+0x124>)
 8000bfa:	69f8      	ldr	r0, [r7, #28]
 8000bfc:	f7ff fae8 	bl	80001d0 <strcmp>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d003      	beq.n	8000c0e <ds_command+0x72>
	{
		printf("NOK\n\r");
 8000c06:	482c      	ldr	r0, [pc, #176]	; (8000cb8 <ds_command+0x11c>)
 8000c08:	f004 fa0e 	bl	8005028 <iprintf>
		return;
 8000c0c:	e051      	b.n	8000cb2 <ds_command+0x116>
	}

	int date = atoi(num);
 8000c0e:	69f8      	ldr	r0, [r7, #28]
 8000c10:	f004 f8af 	bl	8004d72 <atoi>
 8000c14:	6178      	str	r0, [r7, #20]
	if(!date && strcmp(num, "0"))
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d10a      	bne.n	8000c32 <ds_command+0x96>
 8000c1c:	4928      	ldr	r1, [pc, #160]	; (8000cc0 <ds_command+0x124>)
 8000c1e:	69f8      	ldr	r0, [r7, #28]
 8000c20:	f7ff fad6 	bl	80001d0 <strcmp>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d003      	beq.n	8000c32 <ds_command+0x96>
	{
		printf("NOK\n\r");
 8000c2a:	4823      	ldr	r0, [pc, #140]	; (8000cb8 <ds_command+0x11c>)
 8000c2c:	f004 f9fc 	bl	8005028 <iprintf>
		return;
 8000c30:	e03f      	b.n	8000cb2 <ds_command+0x116>
	}

	int year = atoi(num);
 8000c32:	69f8      	ldr	r0, [r7, #28]
 8000c34:	f004 f89d 	bl	8004d72 <atoi>
 8000c38:	6138      	str	r0, [r7, #16]
	if(!year && strcmp(num, "0"))
 8000c3a:	693b      	ldr	r3, [r7, #16]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d10a      	bne.n	8000c56 <ds_command+0xba>
 8000c40:	491f      	ldr	r1, [pc, #124]	; (8000cc0 <ds_command+0x124>)
 8000c42:	69f8      	ldr	r0, [r7, #28]
 8000c44:	f7ff fac4 	bl	80001d0 <strcmp>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d003      	beq.n	8000c56 <ds_command+0xba>
	{
		printf("NOK\n\r");
 8000c4e:	481a      	ldr	r0, [pc, #104]	; (8000cb8 <ds_command+0x11c>)
 8000c50:	f004 f9ea 	bl	8005028 <iprintf>
		return;
 8000c54:	e02d      	b.n	8000cb2 <ds_command+0x116>
	}

	if(!isValidDate(month, date, year))
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	6979      	ldr	r1, [r7, #20]
 8000c5a:	69b8      	ldr	r0, [r7, #24]
 8000c5c:	f7ff ff16 	bl	8000a8c <isValidDate>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d103      	bne.n	8000c6e <ds_command+0xd2>
	{
		{
			printf("NOK\n\r");
 8000c66:	4814      	ldr	r0, [pc, #80]	; (8000cb8 <ds_command+0x11c>)
 8000c68:	f004 f9de 	bl	8005028 <iprintf>
			return;
 8000c6c:	e021      	b.n	8000cb2 <ds_command+0x116>
		}
	}

	newDate.Month = getMonth(month);
 8000c6e:	69b8      	ldr	r0, [r7, #24]
 8000c70:	f7ff ff51 	bl	8000b16 <getMonth>
 8000c74:	4603      	mov	r3, r0
 8000c76:	737b      	strb	r3, [r7, #13]
	newDate.Date = date;
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	73bb      	strb	r3, [r7, #14]
	if(year == 0)
 8000c7e:	693b      	ldr	r3, [r7, #16]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d102      	bne.n	8000c8a <ds_command+0xee>
		newDate.Year = 0x0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	73fb      	strb	r3, [r7, #15]
 8000c88:	e002      	b.n	8000c90 <ds_command+0xf4>
	else
		newDate.Year = year;
 8000c8a:	693b      	ldr	r3, [r7, #16]
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	73fb      	strb	r3, [r7, #15]

	if (HAL_RTC_SetDate(&hrtc, &newDate, RTC_FORMAT_BCD) != HAL_OK)
 8000c90:	f107 030c 	add.w	r3, r7, #12
 8000c94:	2201      	movs	r2, #1
 8000c96:	4619      	mov	r1, r3
 8000c98:	480a      	ldr	r0, [pc, #40]	; (8000cc4 <ds_command+0x128>)
 8000c9a:	f002 fbf8 	bl	800348e <HAL_RTC_SetDate>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <ds_command+0x10c>
	{
		Error_Handler();
 8000ca4:	f000 fa16 	bl	80010d4 <Error_Handler>
	}

	printf("OK\n\r");
 8000ca8:	4807      	ldr	r0, [pc, #28]	; (8000cc8 <ds_command+0x12c>)
 8000caa:	f004 f9bd 	bl	8005028 <iprintf>
	prompt();
 8000cae:	f7ff fd63 	bl	8000778 <prompt>
}
 8000cb2:	3728      	adds	r7, #40	; 0x28
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	080062e8 	.word	0x080062e8
 8000cbc:	080062dc 	.word	0x080062dc
 8000cc0:	080062f0 	.word	0x080062f0
 8000cc4:	200000f0 	.word	0x200000f0
 8000cc8:	080062e0 	.word	0x080062e0

08000ccc <disable>:
#include <stdint.h>
#include <main.h>
#include "interrupt.h"


uint32_t disable(void) {
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
  int32_t priority_mask = 0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	607b      	str	r3, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000cd6:	f3ef 8310 	mrs	r3, PRIMASK
 8000cda:	603b      	str	r3, [r7, #0]
  return(result);
 8000cdc:	683b      	ldr	r3, [r7, #0]
  priority_mask = __get_PRIMASK(); // Read the current state of the interrupt mask
 8000cde:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce0:	b672      	cpsid	i
}
 8000ce2:	bf00      	nop
  __disable_irq();                // Globally mask the interrupts off
  return (priority_mask);
 8000ce4:	687b      	ldr	r3, [r7, #4]
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr

08000cf2 <restore>:

void restore(uint32_t priority_mask) {
 8000cf2:	b480      	push	{r7}
 8000cf4:	b085      	sub	sp, #20
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	f383 8810 	msr	PRIMASK, r3
}
 8000d04:	bf00      	nop
  __set_PRIMASK(priority_mask);
}
 8000d06:	bf00      	nop
 8000d08:	3714      	adds	r7, #20
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8000d12:	b480      	push	{r7}
 8000d14:	b089      	sub	sp, #36	; 0x24
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	e853 3f00 	ldrex	r3, [r3]
 8000d24:	60bb      	str	r3, [r7, #8]
   return(result);
 8000d26:	68bb      	ldr	r3, [r7, #8]
 8000d28:	f043 0320 	orr.w	r3, r3, #32
 8000d2c:	61fb      	str	r3, [r7, #28]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	69fa      	ldr	r2, [r7, #28]
 8000d32:	61ba      	str	r2, [r7, #24]
 8000d34:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000d36:	6979      	ldr	r1, [r7, #20]
 8000d38:	69ba      	ldr	r2, [r7, #24]
 8000d3a:	e841 2300 	strex	r3, r2, [r1]
 8000d3e:	613b      	str	r3, [r7, #16]
   return(result);
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d1e9      	bne.n	8000d1a <LL_USART_EnableIT_RXNE+0x8>
}
 8000d46:	bf00      	nop
 8000d48:	bf00      	nop
 8000d4a:	3724      	adds	r7, #36	; 0x24
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b088      	sub	sp, #32
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d5a:	f000 fcae 	bl	80016ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d5e:	f000 f849 	bl	8000df4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d62:	f000 f96d 	bl	8001040 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d66:	f000 f93b 	bl	8000fe0 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000d6a:	f000 f8a7 	bl	8000ebc <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart2);
 8000d6e:	481a      	ldr	r0, [pc, #104]	; (8000dd8 <main+0x84>)
 8000d70:	f000 fa2c 	bl	80011cc <RetargetInit>

  LL_USART_EnableIT_RXNE(USART2);
 8000d74:	4819      	ldr	r0, [pc, #100]	; (8000ddc <main+0x88>)
 8000d76:	f7ff ffcc 	bl	8000d12 <LL_USART_EnableIT_RXNE>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("System up and running!\n\r");
 8000d7a:	4819      	ldr	r0, [pc, #100]	; (8000de0 <main+0x8c>)
 8000d7c:	f004 f954 	bl	8005028 <iprintf>
  init_queue(&queue);
 8000d80:	4818      	ldr	r0, [pc, #96]	; (8000de4 <main+0x90>)
 8000d82:	f000 f9ac 	bl	80010de <init_queue>
  prompt();
 8000d86:	f7ff fcf7 	bl	8000778 <prompt>

  while (1)
  {
	  uint8_t command[MAX_COMMAND_LEN];
	  if (get_command(command))
 8000d8a:	463b      	mov	r3, r7
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff fc85 	bl	800069c <get_command>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d00b      	beq.n	8000db0 <main+0x5c>
	  {
		  if(execute_command(command))
 8000d98:	463b      	mov	r3, r7
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff fc2e 	bl	80005fc <execute_command>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d004      	beq.n	8000db0 <main+0x5c>
		  {
			  printf("NOK\n\r");
 8000da6:	4810      	ldr	r0, [pc, #64]	; (8000de8 <main+0x94>)
 8000da8:	f004 f93e 	bl	8005028 <iprintf>
			  prompt();
 8000dac:	f7ff fce4 	bl	8000778 <prompt>
		  }
	  }
	  if(alarm) {
 8000db0:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <main+0x98>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d0e8      	beq.n	8000d8a <main+0x36>
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000db8:	2108      	movs	r1, #8
 8000dba:	480d      	ldr	r0, [pc, #52]	; (8000df0 <main+0x9c>)
 8000dbc:	f001 f828 	bl	8001e10 <HAL_GPIO_TogglePin>
		  HAL_Delay(100);
 8000dc0:	2064      	movs	r0, #100	; 0x64
 8000dc2:	f000 fcef 	bl	80017a4 <HAL_Delay>
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000dc6:	2108      	movs	r1, #8
 8000dc8:	4809      	ldr	r0, [pc, #36]	; (8000df0 <main+0x9c>)
 8000dca:	f001 f821 	bl	8001e10 <HAL_GPIO_TogglePin>
		  alarm = 0;
 8000dce:	4b07      	ldr	r3, [pc, #28]	; (8000dec <main+0x98>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
  {
 8000dd4:	e7d9      	b.n	8000d8a <main+0x36>
 8000dd6:	bf00      	nop
 8000dd8:	20000114 	.word	0x20000114
 8000ddc:	40004400 	.word	0x40004400
 8000de0:	080062f4 	.word	0x080062f4
 8000de4:	200000c4 	.word	0x200000c4
 8000de8:	08006310 	.word	0x08006310
 8000dec:	200000ec 	.word	0x200000ec
 8000df0:	48000400 	.word	0x48000400

08000df4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b096      	sub	sp, #88	; 0x58
 8000df8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dfa:	f107 0314 	add.w	r3, r7, #20
 8000dfe:	2244      	movs	r2, #68	; 0x44
 8000e00:	2100      	movs	r1, #0
 8000e02:	4618      	mov	r0, r3
 8000e04:	f004 fa1b 	bl	800523e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e08:	463b      	mov	r3, r7
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]
 8000e12:	60da      	str	r2, [r3, #12]
 8000e14:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e16:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e1a:	f001 f831 	bl	8001e80 <HAL_PWREx_ControlVoltageScaling>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000e24:	f000 f956 	bl	80010d4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000e28:	f001 f80c 	bl	8001e44 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000e2c:	4b22      	ldr	r3, [pc, #136]	; (8000eb8 <SystemClock_Config+0xc4>)
 8000e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e32:	4a21      	ldr	r2, [pc, #132]	; (8000eb8 <SystemClock_Config+0xc4>)
 8000e34:	f023 0318 	bic.w	r3, r3, #24
 8000e38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8000e3c:	231c      	movs	r3, #28
 8000e3e:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000e40:	2301      	movs	r3, #1
 8000e42:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000e44:	2301      	movs	r3, #1
 8000e46:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000e50:	2360      	movs	r3, #96	; 0x60
 8000e52:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e54:	2302      	movs	r3, #2
 8000e56:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000e60:	2310      	movs	r3, #16
 8000e62:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000e64:	2307      	movs	r3, #7
 8000e66:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	4618      	mov	r0, r3
 8000e76:	f001 f859 	bl	8001f2c <HAL_RCC_OscConfig>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000e80:	f000 f928 	bl	80010d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e84:	230f      	movs	r3, #15
 8000e86:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e90:	2300      	movs	r3, #0
 8000e92:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e94:	2300      	movs	r3, #0
 8000e96:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e98:	463b      	mov	r3, r7
 8000e9a:	2101      	movs	r1, #1
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f001 fc59 	bl	8002754 <HAL_RCC_ClockConfig>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000ea8:	f000 f914 	bl	80010d4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000eac:	f002 f86c 	bl	8002f88 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000eb0:	bf00      	nop
 8000eb2:	3758      	adds	r7, #88	; 0x58
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40021000 	.word	0x40021000

08000ebc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b092      	sub	sp, #72	; 0x48
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000ec2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	609a      	str	r2, [r3, #8]
 8000ece:	60da      	str	r2, [r3, #12]
 8000ed0:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8000ed6:	1d3b      	adds	r3, r7, #4
 8000ed8:	222c      	movs	r2, #44	; 0x2c
 8000eda:	2100      	movs	r1, #0
 8000edc:	4618      	mov	r0, r3
 8000ede:	f004 f9ae 	bl	800523e <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ee2:	4b3c      	ldr	r3, [pc, #240]	; (8000fd4 <MX_RTC_Init+0x118>)
 8000ee4:	4a3c      	ldr	r2, [pc, #240]	; (8000fd8 <MX_RTC_Init+0x11c>)
 8000ee6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000ee8:	4b3a      	ldr	r3, [pc, #232]	; (8000fd4 <MX_RTC_Init+0x118>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000eee:	4b39      	ldr	r3, [pc, #228]	; (8000fd4 <MX_RTC_Init+0x118>)
 8000ef0:	227f      	movs	r2, #127	; 0x7f
 8000ef2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000ef4:	4b37      	ldr	r3, [pc, #220]	; (8000fd4 <MX_RTC_Init+0x118>)
 8000ef6:	22ff      	movs	r2, #255	; 0xff
 8000ef8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000efa:	4b36      	ldr	r3, [pc, #216]	; (8000fd4 <MX_RTC_Init+0x118>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000f00:	4b34      	ldr	r3, [pc, #208]	; (8000fd4 <MX_RTC_Init+0x118>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000f06:	4b33      	ldr	r3, [pc, #204]	; (8000fd4 <MX_RTC_Init+0x118>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000f0c:	4b31      	ldr	r3, [pc, #196]	; (8000fd4 <MX_RTC_Init+0x118>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f12:	4830      	ldr	r0, [pc, #192]	; (8000fd4 <MX_RTC_Init+0x118>)
 8000f14:	f002 f93a 	bl	800318c <HAL_RTC_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8000f1e:	f000 f8d9 	bl	80010d4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000f22:	2300      	movs	r3, #0
 8000f24:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x0;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000f34:	2300      	movs	r3, #0
 8000f36:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000f3c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f40:	2201      	movs	r2, #1
 8000f42:	4619      	mov	r1, r3
 8000f44:	4823      	ldr	r0, [pc, #140]	; (8000fd4 <MX_RTC_Init+0x118>)
 8000f46:	f002 f9a9 	bl	800329c <HAL_RTC_SetTime>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8000f50:	f000 f8c0 	bl	80010d4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000f54:	2301      	movs	r3, #1
 8000f56:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x1;
 8000f60:	2301      	movs	r3, #1
 8000f62:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000f6c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f70:	2201      	movs	r2, #1
 8000f72:	4619      	mov	r1, r3
 8000f74:	4817      	ldr	r0, [pc, #92]	; (8000fd4 <MX_RTC_Init+0x118>)
 8000f76:	f002 fa8a 	bl	800348e <HAL_RTC_SetDate>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8000f80:	f000 f8a8 	bl	80010d4 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x30;
 8000f8c:	2330      	movs	r3, #48	; 0x30
 8000f8e:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000f94:	2300      	movs	r3, #0
 8000f96:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8000f9c:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <MX_RTC_Init+0x120>)
 8000f9e:	61bb      	str	r3, [r7, #24]
                              |RTC_ALARMMASK_MINUTES;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8000fae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000fb4:	1d3b      	adds	r3, r7, #4
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4806      	ldr	r0, [pc, #24]	; (8000fd4 <MX_RTC_Init+0x118>)
 8000fbc:	f002 fb3c 	bl	8003638 <HAL_RTC_SetAlarm_IT>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 8000fc6:	f000 f885 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000fca:	bf00      	nop
 8000fcc:	3748      	adds	r7, #72	; 0x48
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	200000f0 	.word	0x200000f0
 8000fd8:	40002800 	.word	0x40002800
 8000fdc:	80808000 	.word	0x80808000

08000fe0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fe4:	4b14      	ldr	r3, [pc, #80]	; (8001038 <MX_USART2_UART_Init+0x58>)
 8000fe6:	4a15      	ldr	r2, [pc, #84]	; (800103c <MX_USART2_UART_Init+0x5c>)
 8000fe8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fea:	4b13      	ldr	r3, [pc, #76]	; (8001038 <MX_USART2_UART_Init+0x58>)
 8000fec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ff0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ff2:	4b11      	ldr	r3, [pc, #68]	; (8001038 <MX_USART2_UART_Init+0x58>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ff8:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <MX_USART2_UART_Init+0x58>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <MX_USART2_UART_Init+0x58>)
 8001000:	2200      	movs	r2, #0
 8001002:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001004:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <MX_USART2_UART_Init+0x58>)
 8001006:	220c      	movs	r2, #12
 8001008:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800100a:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <MX_USART2_UART_Init+0x58>)
 800100c:	2200      	movs	r2, #0
 800100e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001010:	4b09      	ldr	r3, [pc, #36]	; (8001038 <MX_USART2_UART_Init+0x58>)
 8001012:	2200      	movs	r2, #0
 8001014:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001016:	4b08      	ldr	r3, [pc, #32]	; (8001038 <MX_USART2_UART_Init+0x58>)
 8001018:	2200      	movs	r2, #0
 800101a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800101c:	4b06      	ldr	r3, [pc, #24]	; (8001038 <MX_USART2_UART_Init+0x58>)
 800101e:	2200      	movs	r2, #0
 8001020:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001022:	4805      	ldr	r0, [pc, #20]	; (8001038 <MX_USART2_UART_Init+0x58>)
 8001024:	f002 fd6e 	bl	8003b04 <HAL_UART_Init>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800102e:	f000 f851 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20000114 	.word	0x20000114
 800103c:	40004400 	.word	0x40004400

08001040 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b088      	sub	sp, #32
 8001044:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001046:	f107 030c 	add.w	r3, r7, #12
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
 8001052:	60da      	str	r2, [r3, #12]
 8001054:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001056:	4b1d      	ldr	r3, [pc, #116]	; (80010cc <MX_GPIO_Init+0x8c>)
 8001058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105a:	4a1c      	ldr	r2, [pc, #112]	; (80010cc <MX_GPIO_Init+0x8c>)
 800105c:	f043 0304 	orr.w	r3, r3, #4
 8001060:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001062:	4b1a      	ldr	r3, [pc, #104]	; (80010cc <MX_GPIO_Init+0x8c>)
 8001064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001066:	f003 0304 	and.w	r3, r3, #4
 800106a:	60bb      	str	r3, [r7, #8]
 800106c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800106e:	4b17      	ldr	r3, [pc, #92]	; (80010cc <MX_GPIO_Init+0x8c>)
 8001070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001072:	4a16      	ldr	r2, [pc, #88]	; (80010cc <MX_GPIO_Init+0x8c>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	64d3      	str	r3, [r2, #76]	; 0x4c
 800107a:	4b14      	ldr	r3, [pc, #80]	; (80010cc <MX_GPIO_Init+0x8c>)
 800107c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	607b      	str	r3, [r7, #4]
 8001084:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001086:	4b11      	ldr	r3, [pc, #68]	; (80010cc <MX_GPIO_Init+0x8c>)
 8001088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108a:	4a10      	ldr	r2, [pc, #64]	; (80010cc <MX_GPIO_Init+0x8c>)
 800108c:	f043 0302 	orr.w	r3, r3, #2
 8001090:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001092:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <MX_GPIO_Init+0x8c>)
 8001094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	603b      	str	r3, [r7, #0]
 800109c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800109e:	2200      	movs	r2, #0
 80010a0:	2108      	movs	r1, #8
 80010a2:	480b      	ldr	r0, [pc, #44]	; (80010d0 <MX_GPIO_Init+0x90>)
 80010a4:	f000 fe9c 	bl	8001de0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80010a8:	2308      	movs	r3, #8
 80010aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ac:	2301      	movs	r3, #1
 80010ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80010b8:	f107 030c 	add.w	r3, r7, #12
 80010bc:	4619      	mov	r1, r3
 80010be:	4804      	ldr	r0, [pc, #16]	; (80010d0 <MX_GPIO_Init+0x90>)
 80010c0:	f000 fd24 	bl	8001b0c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010c4:	bf00      	nop
 80010c6:	3720      	adds	r7, #32
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40021000 	.word	0x40021000
 80010d0:	48000400 	.word	0x48000400

080010d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80010d8:	b672      	cpsid	i
}
 80010da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010dc:	e7fe      	b.n	80010dc <Error_Handler+0x8>

080010de <init_queue>:
/* Code: */

#include "queue.h"
#include "interrupt.h"

void init_queue(queue_t *buf) {
 80010de:	b580      	push	{r7, lr}
 80010e0:	b084      	sub	sp, #16
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
  uint32_t mask;
  mask = disable();
 80010e6:	f7ff fdf1 	bl	8000ccc <disable>
 80010ea:	60f8      	str	r0, [r7, #12]
  buf->head=0;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
  buf->tail=0;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2200      	movs	r2, #0
 80010f6:	605a      	str	r2, [r3, #4]
  restore(mask);
 80010f8:	68f8      	ldr	r0, [r7, #12]
 80010fa:	f7ff fdfa 	bl	8000cf2 <restore>
}
 80010fe:	bf00      	nop
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <enqueue>:

int enqueue (queue_t *buf, uint8_t data) {
 8001106:	b580      	push	{r7, lr}
 8001108:	b084      	sub	sp, #16
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
 800110e:	460b      	mov	r3, r1
 8001110:	70fb      	strb	r3, [r7, #3]
  int return_val=0;
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
  uint32_t mask;
  mask = disable();
 8001116:	f7ff fdd9 	bl	8000ccc <disable>
 800111a:	60b8      	str	r0, [r7, #8]
  if ((((buf->head)+1)%QUEUE_SIZE)!=buf->tail) {
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	3301      	adds	r3, #1
 8001122:	425a      	negs	r2, r3
 8001124:	f003 031f 	and.w	r3, r3, #31
 8001128:	f002 021f 	and.w	r2, r2, #31
 800112c:	bf58      	it	pl
 800112e:	4253      	negpl	r3, r2
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	6852      	ldr	r2, [r2, #4]
 8001134:	4293      	cmp	r3, r2
 8001136:	d014      	beq.n	8001162 <enqueue+0x5c>
    buf->buffer[buf->head]=data;   
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	687a      	ldr	r2, [r7, #4]
 800113e:	4413      	add	r3, r2
 8001140:	78fa      	ldrb	r2, [r7, #3]
 8001142:	721a      	strb	r2, [r3, #8]
    buf->head=((buf->head)+1)%QUEUE_SIZE;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	3301      	adds	r3, #1
 800114a:	425a      	negs	r2, r3
 800114c:	f003 031f 	and.w	r3, r3, #31
 8001150:	f002 021f 	and.w	r2, r2, #31
 8001154:	bf58      	it	pl
 8001156:	4253      	negpl	r3, r2
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	6013      	str	r3, [r2, #0]
    return_val=0;
 800115c:	2300      	movs	r3, #0
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	e002      	b.n	8001168 <enqueue+0x62>
  }
  else {
    return_val=-1;
 8001162:	f04f 33ff 	mov.w	r3, #4294967295
 8001166:	60fb      	str	r3, [r7, #12]
  }
  restore(mask);
 8001168:	68b8      	ldr	r0, [r7, #8]
 800116a:	f7ff fdc2 	bl	8000cf2 <restore>
  return (return_val);
 800116e:	68fb      	ldr	r3, [r7, #12]
}
 8001170:	4618      	mov	r0, r3
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <dequeue>:

uint8_t dequeue (queue_t *buf) {
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  int return_val=0;
 8001180:	2300      	movs	r3, #0
 8001182:	60fb      	str	r3, [r7, #12]
  uint32_t mask;
  mask = disable();
 8001184:	f7ff fda2 	bl	8000ccc <disable>
 8001188:	60b8      	str	r0, [r7, #8]
  if (buf->tail!=buf->head) {
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	685a      	ldr	r2, [r3, #4]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	429a      	cmp	r2, r3
 8001194:	d011      	beq.n	80011ba <dequeue+0x42>
    return_val=buf->buffer[buf->tail];
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	4413      	add	r3, r2
 800119e:	7a1b      	ldrb	r3, [r3, #8]
 80011a0:	60fb      	str	r3, [r7, #12]
    buf->tail=((buf->tail)+1)%QUEUE_SIZE;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	3301      	adds	r3, #1
 80011a8:	425a      	negs	r2, r3
 80011aa:	f003 031f 	and.w	r3, r3, #31
 80011ae:	f002 021f 	and.w	r2, r2, #31
 80011b2:	bf58      	it	pl
 80011b4:	4253      	negpl	r3, r2
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	6053      	str	r3, [r2, #4]
  }
  restore(mask);
 80011ba:	68b8      	ldr	r0, [r7, #8]
 80011bc:	f7ff fd99 	bl	8000cf2 <restore>
  return(return_val);
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	b2db      	uxtb	r3, r3
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3710      	adds	r7, #16
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80011d4:	4a07      	ldr	r2, [pc, #28]	; (80011f4 <RetargetInit+0x28>)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80011da:	4b07      	ldr	r3, [pc, #28]	; (80011f8 <RetargetInit+0x2c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	6898      	ldr	r0, [r3, #8]
 80011e0:	2300      	movs	r3, #0
 80011e2:	2202      	movs	r2, #2
 80011e4:	2100      	movs	r1, #0
 80011e6:	f003 ff39 	bl	800505c <setvbuf>
}
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	2000019c 	.word	0x2000019c
 80011f8:	200000a0 	.word	0x200000a0

080011fc <_isatty>:

int _isatty(int fd) {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2b00      	cmp	r3, #0
 8001208:	db04      	blt.n	8001214 <_isatty+0x18>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2b02      	cmp	r3, #2
 800120e:	dc01      	bgt.n	8001214 <_isatty+0x18>
    return 1;
 8001210:	2301      	movs	r3, #1
 8001212:	e005      	b.n	8001220 <_isatty+0x24>

  errno = EBADF;
 8001214:	f004 f8be 	bl	8005394 <__errno>
 8001218:	4603      	mov	r3, r0
 800121a:	2209      	movs	r2, #9
 800121c:	601a      	str	r2, [r3, #0]
  return 0;
 800121e:	2300      	movs	r3, #0
}
 8001220:	4618      	mov	r0, r3
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <_write>:

int _write(int fd, char* ptr, int len) {
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	2b01      	cmp	r3, #1
 8001238:	d002      	beq.n	8001240 <_write+0x18>
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	2b02      	cmp	r3, #2
 800123e:	d111      	bne.n	8001264 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001240:	4b0e      	ldr	r3, [pc, #56]	; (800127c <_write+0x54>)
 8001242:	6818      	ldr	r0, [r3, #0]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	b29a      	uxth	r2, r3
 8001248:	f04f 33ff 	mov.w	r3, #4294967295
 800124c:	68b9      	ldr	r1, [r7, #8]
 800124e:	f002 fca7 	bl	8003ba0 <HAL_UART_Transmit>
 8001252:	4603      	mov	r3, r0
 8001254:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001256:	7dfb      	ldrb	r3, [r7, #23]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d101      	bne.n	8001260 <_write+0x38>
      return len;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	e008      	b.n	8001272 <_write+0x4a>
    else
      return EIO;
 8001260:	2305      	movs	r3, #5
 8001262:	e006      	b.n	8001272 <_write+0x4a>
  }
  errno = EBADF;
 8001264:	f004 f896 	bl	8005394 <__errno>
 8001268:	4603      	mov	r3, r0
 800126a:	2209      	movs	r2, #9
 800126c:	601a      	str	r2, [r3, #0]
  return -1;
 800126e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001272:	4618      	mov	r0, r3
 8001274:	3718      	adds	r7, #24
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	2000019c 	.word	0x2000019c

08001280 <_close>:

int _close(int fd) {
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2b00      	cmp	r3, #0
 800128c:	db04      	blt.n	8001298 <_close+0x18>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2b02      	cmp	r3, #2
 8001292:	dc01      	bgt.n	8001298 <_close+0x18>
    return 0;
 8001294:	2300      	movs	r3, #0
 8001296:	e006      	b.n	80012a6 <_close+0x26>

  errno = EBADF;
 8001298:	f004 f87c 	bl	8005394 <__errno>
 800129c:	4603      	mov	r3, r0
 800129e:	2209      	movs	r2, #9
 80012a0:	601a      	str	r2, [r3, #0]
  return -1;
 80012a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b084      	sub	sp, #16
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	60f8      	str	r0, [r7, #12]
 80012b6:	60b9      	str	r1, [r7, #8]
 80012b8:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80012ba:	f004 f86b 	bl	8005394 <__errno>
 80012be:	4603      	mov	r3, r0
 80012c0:	2209      	movs	r2, #9
 80012c2:	601a      	str	r2, [r3, #0]
  return -1;
 80012c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3710      	adds	r7, #16
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <_read>:

int _read(int fd, char* ptr, int len) {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	60b9      	str	r1, [r7, #8]
 80012da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d110      	bne.n	8001304 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80012e2:	4b0e      	ldr	r3, [pc, #56]	; (800131c <_read+0x4c>)
 80012e4:	6818      	ldr	r0, [r3, #0]
 80012e6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ea:	2201      	movs	r2, #1
 80012ec:	68b9      	ldr	r1, [r7, #8]
 80012ee:	f002 fce1 	bl	8003cb4 <HAL_UART_Receive>
 80012f2:	4603      	mov	r3, r0
 80012f4:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80012f6:	7dfb      	ldrb	r3, [r7, #23]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d101      	bne.n	8001300 <_read+0x30>
      return 1;
 80012fc:	2301      	movs	r3, #1
 80012fe:	e008      	b.n	8001312 <_read+0x42>
    else
      return EIO;
 8001300:	2305      	movs	r3, #5
 8001302:	e006      	b.n	8001312 <_read+0x42>
  }
  errno = EBADF;
 8001304:	f004 f846 	bl	8005394 <__errno>
 8001308:	4603      	mov	r3, r0
 800130a:	2209      	movs	r2, #9
 800130c:	601a      	str	r2, [r3, #0]
  return -1;
 800130e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001312:	4618      	mov	r0, r3
 8001314:	3718      	adds	r7, #24
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	2000019c 	.word	0x2000019c

08001320 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2b00      	cmp	r3, #0
 800132e:	db08      	blt.n	8001342 <_fstat+0x22>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2b02      	cmp	r3, #2
 8001334:	dc05      	bgt.n	8001342 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800133c:	605a      	str	r2, [r3, #4]
    return 0;
 800133e:	2300      	movs	r3, #0
 8001340:	e005      	b.n	800134e <_fstat+0x2e>
  }

  errno = EBADF;
 8001342:	f004 f827 	bl	8005394 <__errno>
 8001346:	4603      	mov	r3, r0
 8001348:	2209      	movs	r2, #9
 800134a:	601a      	str	r2, [r3, #0]
  return 0;
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
	...

08001358 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135e:	4b0f      	ldr	r3, [pc, #60]	; (800139c <HAL_MspInit+0x44>)
 8001360:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001362:	4a0e      	ldr	r2, [pc, #56]	; (800139c <HAL_MspInit+0x44>)
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	6613      	str	r3, [r2, #96]	; 0x60
 800136a:	4b0c      	ldr	r3, [pc, #48]	; (800139c <HAL_MspInit+0x44>)
 800136c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	607b      	str	r3, [r7, #4]
 8001374:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001376:	4b09      	ldr	r3, [pc, #36]	; (800139c <HAL_MspInit+0x44>)
 8001378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800137a:	4a08      	ldr	r2, [pc, #32]	; (800139c <HAL_MspInit+0x44>)
 800137c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001380:	6593      	str	r3, [r2, #88]	; 0x58
 8001382:	4b06      	ldr	r3, [pc, #24]	; (800139c <HAL_MspInit+0x44>)
 8001384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138a:	603b      	str	r3, [r7, #0]
 800138c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800138e:	bf00      	nop
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	40021000 	.word	0x40021000

080013a0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b098      	sub	sp, #96	; 0x60
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013a8:	f107 030c 	add.w	r3, r7, #12
 80013ac:	2254      	movs	r2, #84	; 0x54
 80013ae:	2100      	movs	r1, #0
 80013b0:	4618      	mov	r0, r3
 80013b2:	f003 ff44 	bl	800523e <memset>
  if(hrtc->Instance==RTC)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a13      	ldr	r2, [pc, #76]	; (8001408 <HAL_RTC_MspInit+0x68>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d11f      	bne.n	8001400 <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80013c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013c4:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80013c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013ca:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013cc:	f107 030c 	add.w	r3, r7, #12
 80013d0:	4618      	mov	r0, r3
 80013d2:	f001 fbe3 	bl	8002b9c <HAL_RCCEx_PeriphCLKConfig>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80013dc:	f7ff fe7a 	bl	80010d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80013e0:	4b0a      	ldr	r3, [pc, #40]	; (800140c <HAL_RTC_MspInit+0x6c>)
 80013e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013e6:	4a09      	ldr	r2, [pc, #36]	; (800140c <HAL_RTC_MspInit+0x6c>)
 80013e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80013f0:	2200      	movs	r2, #0
 80013f2:	2100      	movs	r1, #0
 80013f4:	2029      	movs	r0, #41	; 0x29
 80013f6:	f000 fad4 	bl	80019a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80013fa:	2029      	movs	r0, #41	; 0x29
 80013fc:	f000 faed 	bl	80019da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001400:	bf00      	nop
 8001402:	3760      	adds	r7, #96	; 0x60
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40002800 	.word	0x40002800
 800140c:	40021000 	.word	0x40021000

08001410 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b09e      	sub	sp, #120	; 0x78
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001418:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001428:	f107 0310 	add.w	r3, r7, #16
 800142c:	2254      	movs	r2, #84	; 0x54
 800142e:	2100      	movs	r1, #0
 8001430:	4618      	mov	r0, r3
 8001432:	f003 ff04 	bl	800523e <memset>
  if(huart->Instance==USART2)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a2c      	ldr	r2, [pc, #176]	; (80014ec <HAL_UART_MspInit+0xdc>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d150      	bne.n	80014e2 <HAL_UART_MspInit+0xd2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001440:	2302      	movs	r3, #2
 8001442:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001444:	2300      	movs	r3, #0
 8001446:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001448:	f107 0310 	add.w	r3, r7, #16
 800144c:	4618      	mov	r0, r3
 800144e:	f001 fba5 	bl	8002b9c <HAL_RCCEx_PeriphCLKConfig>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001458:	f7ff fe3c 	bl	80010d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800145c:	4b24      	ldr	r3, [pc, #144]	; (80014f0 <HAL_UART_MspInit+0xe0>)
 800145e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001460:	4a23      	ldr	r2, [pc, #140]	; (80014f0 <HAL_UART_MspInit+0xe0>)
 8001462:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001466:	6593      	str	r3, [r2, #88]	; 0x58
 8001468:	4b21      	ldr	r3, [pc, #132]	; (80014f0 <HAL_UART_MspInit+0xe0>)
 800146a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800146c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001470:	60fb      	str	r3, [r7, #12]
 8001472:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001474:	4b1e      	ldr	r3, [pc, #120]	; (80014f0 <HAL_UART_MspInit+0xe0>)
 8001476:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001478:	4a1d      	ldr	r2, [pc, #116]	; (80014f0 <HAL_UART_MspInit+0xe0>)
 800147a:	f043 0301 	orr.w	r3, r3, #1
 800147e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001480:	4b1b      	ldr	r3, [pc, #108]	; (80014f0 <HAL_UART_MspInit+0xe0>)
 8001482:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001484:	f003 0301 	and.w	r3, r3, #1
 8001488:	60bb      	str	r3, [r7, #8]
 800148a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800148c:	2304      	movs	r3, #4
 800148e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001490:	2302      	movs	r3, #2
 8001492:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001498:	2303      	movs	r3, #3
 800149a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800149c:	2307      	movs	r3, #7
 800149e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80014a0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80014a4:	4619      	mov	r1, r3
 80014a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014aa:	f000 fb2f 	bl	8001b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80014ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014b2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b4:	2302      	movs	r3, #2
 80014b6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014bc:	2303      	movs	r3, #3
 80014be:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80014c0:	2303      	movs	r3, #3
 80014c2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80014c4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80014c8:	4619      	mov	r1, r3
 80014ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ce:	f000 fb1d 	bl	8001b0c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80014d2:	2200      	movs	r2, #0
 80014d4:	2100      	movs	r1, #0
 80014d6:	2026      	movs	r0, #38	; 0x26
 80014d8:	f000 fa63 	bl	80019a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014dc:	2026      	movs	r0, #38	; 0x26
 80014de:	f000 fa7c 	bl	80019da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014e2:	bf00      	nop
 80014e4:	3778      	adds	r7, #120	; 0x78
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40004400 	.word	0x40004400
 80014f0:	40021000 	.word	0x40021000

080014f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014f8:	e7fe      	b.n	80014f8 <NMI_Handler+0x4>

080014fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014fa:	b480      	push	{r7}
 80014fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014fe:	e7fe      	b.n	80014fe <HardFault_Handler+0x4>

08001500 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001504:	e7fe      	b.n	8001504 <MemManage_Handler+0x4>

08001506 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001506:	b480      	push	{r7}
 8001508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800150a:	e7fe      	b.n	800150a <BusFault_Handler+0x4>

0800150c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001510:	e7fe      	b.n	8001510 <UsageFault_Handler+0x4>

08001512 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001524:	bf00      	nop
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr

0800152e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800152e:	b480      	push	{r7}
 8001530:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001540:	f000 f910 	bl	8001764 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001544:	bf00      	nop
 8001546:	bd80      	pop	{r7, pc}

08001548 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800154e:	4808      	ldr	r0, [pc, #32]	; (8001570 <USART2_IRQHandler+0x28>)
 8001550:	f002 fc7a 	bl	8003e48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  uint8_t ch;
  ch = getchar();
 8001554:	f003 fd60 	bl	8005018 <getchar>
 8001558:	4603      	mov	r3, r0
 800155a:	71fb      	strb	r3, [r7, #7]
  enqueue(&queue, ch);
 800155c:	79fb      	ldrb	r3, [r7, #7]
 800155e:	4619      	mov	r1, r3
 8001560:	4804      	ldr	r0, [pc, #16]	; (8001574 <USART2_IRQHandler+0x2c>)
 8001562:	f7ff fdd0 	bl	8001106 <enqueue>

  /* USER CODE END USART2_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20000114 	.word	0x20000114
 8001574:	200000c4 	.word	0x200000c4

08001578 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */
  alarm = 1;
 800157c:	4b03      	ldr	r3, [pc, #12]	; (800158c <RTC_Alarm_IRQHandler+0x14>)
 800157e:	2201      	movs	r2, #1
 8001580:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001582:	4803      	ldr	r0, [pc, #12]	; (8001590 <RTC_Alarm_IRQHandler+0x18>)
 8001584:	f002 f994 	bl	80038b0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001588:	bf00      	nop
 800158a:	bd80      	pop	{r7, pc}
 800158c:	200000ec 	.word	0x200000ec
 8001590:	200000f0 	.word	0x200000f0

08001594 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  return 1;
 8001598:	2301      	movs	r3, #1
}
 800159a:	4618      	mov	r0, r3
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <_kill>:

int _kill(int pid, int sig)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015ae:	f003 fef1 	bl	8005394 <__errno>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2216      	movs	r2, #22
 80015b6:	601a      	str	r2, [r3, #0]
  return -1;
 80015b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <_exit>:

void _exit (int status)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015cc:	f04f 31ff 	mov.w	r1, #4294967295
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f7ff ffe7 	bl	80015a4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80015d6:	e7fe      	b.n	80015d6 <_exit+0x12>

080015d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015e0:	4a14      	ldr	r2, [pc, #80]	; (8001634 <_sbrk+0x5c>)
 80015e2:	4b15      	ldr	r3, [pc, #84]	; (8001638 <_sbrk+0x60>)
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015ec:	4b13      	ldr	r3, [pc, #76]	; (800163c <_sbrk+0x64>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d102      	bne.n	80015fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015f4:	4b11      	ldr	r3, [pc, #68]	; (800163c <_sbrk+0x64>)
 80015f6:	4a12      	ldr	r2, [pc, #72]	; (8001640 <_sbrk+0x68>)
 80015f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015fa:	4b10      	ldr	r3, [pc, #64]	; (800163c <_sbrk+0x64>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4413      	add	r3, r2
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	429a      	cmp	r2, r3
 8001606:	d207      	bcs.n	8001618 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001608:	f003 fec4 	bl	8005394 <__errno>
 800160c:	4603      	mov	r3, r0
 800160e:	220c      	movs	r2, #12
 8001610:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001612:	f04f 33ff 	mov.w	r3, #4294967295
 8001616:	e009      	b.n	800162c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001618:	4b08      	ldr	r3, [pc, #32]	; (800163c <_sbrk+0x64>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800161e:	4b07      	ldr	r3, [pc, #28]	; (800163c <_sbrk+0x64>)
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4413      	add	r3, r2
 8001626:	4a05      	ldr	r2, [pc, #20]	; (800163c <_sbrk+0x64>)
 8001628:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800162a:	68fb      	ldr	r3, [r7, #12]
}
 800162c:	4618      	mov	r0, r3
 800162e:	3718      	adds	r7, #24
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	20010000 	.word	0x20010000
 8001638:	00000400 	.word	0x00000400
 800163c:	200001a0 	.word	0x200001a0
 8001640:	200002f8 	.word	0x200002f8

08001644 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001648:	4b06      	ldr	r3, [pc, #24]	; (8001664 <SystemInit+0x20>)
 800164a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800164e:	4a05      	ldr	r2, [pc, #20]	; (8001664 <SystemInit+0x20>)
 8001650:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001654:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001668:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016a0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800166c:	f7ff ffea 	bl	8001644 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001670:	480c      	ldr	r0, [pc, #48]	; (80016a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001672:	490d      	ldr	r1, [pc, #52]	; (80016a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001674:	4a0d      	ldr	r2, [pc, #52]	; (80016ac <LoopForever+0xe>)
  movs r3, #0
 8001676:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001678:	e002      	b.n	8001680 <LoopCopyDataInit>

0800167a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800167a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800167c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800167e:	3304      	adds	r3, #4

08001680 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001680:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001682:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001684:	d3f9      	bcc.n	800167a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001686:	4a0a      	ldr	r2, [pc, #40]	; (80016b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001688:	4c0a      	ldr	r4, [pc, #40]	; (80016b4 <LoopForever+0x16>)
  movs r3, #0
 800168a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800168c:	e001      	b.n	8001692 <LoopFillZerobss>

0800168e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800168e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001690:	3204      	adds	r2, #4

08001692 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001692:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001694:	d3fb      	bcc.n	800168e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001696:	f003 fe83 	bl	80053a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800169a:	f7ff fb5b 	bl	8000d54 <main>

0800169e <LoopForever>:

LoopForever:
    b LoopForever
 800169e:	e7fe      	b.n	800169e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80016a0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80016a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016a8:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 80016ac:	08006554 	.word	0x08006554
  ldr r2, =_sbss
 80016b0:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 80016b4:	200002f4 	.word	0x200002f4

080016b8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016b8:	e7fe      	b.n	80016b8 <ADC1_IRQHandler>

080016ba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b082      	sub	sp, #8
 80016be:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016c0:	2300      	movs	r3, #0
 80016c2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016c4:	2003      	movs	r0, #3
 80016c6:	f000 f961 	bl	800198c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016ca:	2000      	movs	r0, #0
 80016cc:	f000 f80e 	bl	80016ec <HAL_InitTick>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d002      	beq.n	80016dc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	71fb      	strb	r3, [r7, #7]
 80016da:	e001      	b.n	80016e0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016dc:	f7ff fe3c 	bl	8001358 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016e0:	79fb      	ldrb	r3, [r7, #7]
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
	...

080016ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80016f4:	2300      	movs	r3, #0
 80016f6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80016f8:	4b17      	ldr	r3, [pc, #92]	; (8001758 <HAL_InitTick+0x6c>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d023      	beq.n	8001748 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001700:	4b16      	ldr	r3, [pc, #88]	; (800175c <HAL_InitTick+0x70>)
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	4b14      	ldr	r3, [pc, #80]	; (8001758 <HAL_InitTick+0x6c>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	4619      	mov	r1, r3
 800170a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800170e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001712:	fbb2 f3f3 	udiv	r3, r2, r3
 8001716:	4618      	mov	r0, r3
 8001718:	f000 f96d 	bl	80019f6 <HAL_SYSTICK_Config>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d10f      	bne.n	8001742 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2b0f      	cmp	r3, #15
 8001726:	d809      	bhi.n	800173c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001728:	2200      	movs	r2, #0
 800172a:	6879      	ldr	r1, [r7, #4]
 800172c:	f04f 30ff 	mov.w	r0, #4294967295
 8001730:	f000 f937 	bl	80019a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001734:	4a0a      	ldr	r2, [pc, #40]	; (8001760 <HAL_InitTick+0x74>)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6013      	str	r3, [r2, #0]
 800173a:	e007      	b.n	800174c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	73fb      	strb	r3, [r7, #15]
 8001740:	e004      	b.n	800174c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	73fb      	strb	r3, [r7, #15]
 8001746:	e001      	b.n	800174c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800174c:	7bfb      	ldrb	r3, [r7, #15]
}
 800174e:	4618      	mov	r0, r3
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	20000044 	.word	0x20000044
 800175c:	2000003c 	.word	0x2000003c
 8001760:	20000040 	.word	0x20000040

08001764 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001768:	4b06      	ldr	r3, [pc, #24]	; (8001784 <HAL_IncTick+0x20>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	461a      	mov	r2, r3
 800176e:	4b06      	ldr	r3, [pc, #24]	; (8001788 <HAL_IncTick+0x24>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4413      	add	r3, r2
 8001774:	4a04      	ldr	r2, [pc, #16]	; (8001788 <HAL_IncTick+0x24>)
 8001776:	6013      	str	r3, [r2, #0]
}
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	20000044 	.word	0x20000044
 8001788:	200001a4 	.word	0x200001a4

0800178c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  return uwTick;
 8001790:	4b03      	ldr	r3, [pc, #12]	; (80017a0 <HAL_GetTick+0x14>)
 8001792:	681b      	ldr	r3, [r3, #0]
}
 8001794:	4618      	mov	r0, r3
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	200001a4 	.word	0x200001a4

080017a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017ac:	f7ff ffee 	bl	800178c <HAL_GetTick>
 80017b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017bc:	d005      	beq.n	80017ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80017be:	4b0a      	ldr	r3, [pc, #40]	; (80017e8 <HAL_Delay+0x44>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	461a      	mov	r2, r3
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	4413      	add	r3, r2
 80017c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017ca:	bf00      	nop
 80017cc:	f7ff ffde 	bl	800178c <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	68fa      	ldr	r2, [r7, #12]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d8f7      	bhi.n	80017cc <HAL_Delay+0x28>
  {
  }
}
 80017dc:	bf00      	nop
 80017de:	bf00      	nop
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	20000044 	.word	0x20000044

080017ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017fc:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <__NVIC_SetPriorityGrouping+0x44>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001802:	68ba      	ldr	r2, [r7, #8]
 8001804:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001808:	4013      	ands	r3, r2
 800180a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001814:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800181c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800181e:	4a04      	ldr	r2, [pc, #16]	; (8001830 <__NVIC_SetPriorityGrouping+0x44>)
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	60d3      	str	r3, [r2, #12]
}
 8001824:	bf00      	nop
 8001826:	3714      	adds	r7, #20
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	e000ed00 	.word	0xe000ed00

08001834 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001838:	4b04      	ldr	r3, [pc, #16]	; (800184c <__NVIC_GetPriorityGrouping+0x18>)
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	0a1b      	lsrs	r3, r3, #8
 800183e:	f003 0307 	and.w	r3, r3, #7
}
 8001842:	4618      	mov	r0, r3
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800185a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185e:	2b00      	cmp	r3, #0
 8001860:	db0b      	blt.n	800187a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001862:	79fb      	ldrb	r3, [r7, #7]
 8001864:	f003 021f 	and.w	r2, r3, #31
 8001868:	4907      	ldr	r1, [pc, #28]	; (8001888 <__NVIC_EnableIRQ+0x38>)
 800186a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186e:	095b      	lsrs	r3, r3, #5
 8001870:	2001      	movs	r0, #1
 8001872:	fa00 f202 	lsl.w	r2, r0, r2
 8001876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800187a:	bf00      	nop
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	e000e100 	.word	0xe000e100

0800188c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	6039      	str	r1, [r7, #0]
 8001896:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189c:	2b00      	cmp	r3, #0
 800189e:	db0a      	blt.n	80018b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	490c      	ldr	r1, [pc, #48]	; (80018d8 <__NVIC_SetPriority+0x4c>)
 80018a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018aa:	0112      	lsls	r2, r2, #4
 80018ac:	b2d2      	uxtb	r2, r2
 80018ae:	440b      	add	r3, r1
 80018b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018b4:	e00a      	b.n	80018cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	b2da      	uxtb	r2, r3
 80018ba:	4908      	ldr	r1, [pc, #32]	; (80018dc <__NVIC_SetPriority+0x50>)
 80018bc:	79fb      	ldrb	r3, [r7, #7]
 80018be:	f003 030f 	and.w	r3, r3, #15
 80018c2:	3b04      	subs	r3, #4
 80018c4:	0112      	lsls	r2, r2, #4
 80018c6:	b2d2      	uxtb	r2, r2
 80018c8:	440b      	add	r3, r1
 80018ca:	761a      	strb	r2, [r3, #24]
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	e000e100 	.word	0xe000e100
 80018dc:	e000ed00 	.word	0xe000ed00

080018e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b089      	sub	sp, #36	; 0x24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	f1c3 0307 	rsb	r3, r3, #7
 80018fa:	2b04      	cmp	r3, #4
 80018fc:	bf28      	it	cs
 80018fe:	2304      	movcs	r3, #4
 8001900:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	3304      	adds	r3, #4
 8001906:	2b06      	cmp	r3, #6
 8001908:	d902      	bls.n	8001910 <NVIC_EncodePriority+0x30>
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	3b03      	subs	r3, #3
 800190e:	e000      	b.n	8001912 <NVIC_EncodePriority+0x32>
 8001910:	2300      	movs	r3, #0
 8001912:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001914:	f04f 32ff 	mov.w	r2, #4294967295
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	43da      	mvns	r2, r3
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	401a      	ands	r2, r3
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001928:	f04f 31ff 	mov.w	r1, #4294967295
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	fa01 f303 	lsl.w	r3, r1, r3
 8001932:	43d9      	mvns	r1, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001938:	4313      	orrs	r3, r2
         );
}
 800193a:	4618      	mov	r0, r3
 800193c:	3724      	adds	r7, #36	; 0x24
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
	...

08001948 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	3b01      	subs	r3, #1
 8001954:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001958:	d301      	bcc.n	800195e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800195a:	2301      	movs	r3, #1
 800195c:	e00f      	b.n	800197e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800195e:	4a0a      	ldr	r2, [pc, #40]	; (8001988 <SysTick_Config+0x40>)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3b01      	subs	r3, #1
 8001964:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001966:	210f      	movs	r1, #15
 8001968:	f04f 30ff 	mov.w	r0, #4294967295
 800196c:	f7ff ff8e 	bl	800188c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001970:	4b05      	ldr	r3, [pc, #20]	; (8001988 <SysTick_Config+0x40>)
 8001972:	2200      	movs	r2, #0
 8001974:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001976:	4b04      	ldr	r3, [pc, #16]	; (8001988 <SysTick_Config+0x40>)
 8001978:	2207      	movs	r2, #7
 800197a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	e000e010 	.word	0xe000e010

0800198c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f7ff ff29 	bl	80017ec <__NVIC_SetPriorityGrouping>
}
 800199a:	bf00      	nop
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b086      	sub	sp, #24
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	4603      	mov	r3, r0
 80019aa:	60b9      	str	r1, [r7, #8]
 80019ac:	607a      	str	r2, [r7, #4]
 80019ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019b0:	2300      	movs	r3, #0
 80019b2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019b4:	f7ff ff3e 	bl	8001834 <__NVIC_GetPriorityGrouping>
 80019b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	68b9      	ldr	r1, [r7, #8]
 80019be:	6978      	ldr	r0, [r7, #20]
 80019c0:	f7ff ff8e 	bl	80018e0 <NVIC_EncodePriority>
 80019c4:	4602      	mov	r2, r0
 80019c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ca:	4611      	mov	r1, r2
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff ff5d 	bl	800188c <__NVIC_SetPriority>
}
 80019d2:	bf00      	nop
 80019d4:	3718      	adds	r7, #24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b082      	sub	sp, #8
 80019de:	af00      	add	r7, sp, #0
 80019e0:	4603      	mov	r3, r0
 80019e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff ff31 	bl	8001850 <__NVIC_EnableIRQ>
}
 80019ee:	bf00      	nop
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b082      	sub	sp, #8
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f7ff ffa2 	bl	8001948 <SysTick_Config>
 8001a04:	4603      	mov	r3, r0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b085      	sub	sp, #20
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a16:	2300      	movs	r3, #0
 8001a18:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d008      	beq.n	8001a38 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2204      	movs	r2, #4
 8001a2a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e022      	b.n	8001a7e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f022 020e 	bic.w	r2, r2, #14
 8001a46:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f022 0201 	bic.w	r2, r2, #1
 8001a56:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5c:	f003 021c 	and.w	r2, r3, #28
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a64:	2101      	movs	r1, #1
 8001a66:	fa01 f202 	lsl.w	r2, r1, r2
 8001a6a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001a7c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3714      	adds	r7, #20
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b084      	sub	sp, #16
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a92:	2300      	movs	r3, #0
 8001a94:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d005      	beq.n	8001aae <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2204      	movs	r2, #4
 8001aa6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	73fb      	strb	r3, [r7, #15]
 8001aac:	e029      	b.n	8001b02 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f022 020e 	bic.w	r2, r2, #14
 8001abc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f022 0201 	bic.w	r2, r2, #1
 8001acc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad2:	f003 021c 	and.w	r2, r3, #28
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	2101      	movs	r1, #1
 8001adc:	fa01 f202 	lsl.w	r2, r1, r2
 8001ae0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d003      	beq.n	8001b02 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	4798      	blx	r3
    }
  }
  return status;
 8001b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3710      	adds	r7, #16
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b087      	sub	sp, #28
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b16:	2300      	movs	r3, #0
 8001b18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b1a:	e148      	b.n	8001dae <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	2101      	movs	r1, #1
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	fa01 f303 	lsl.w	r3, r1, r3
 8001b28:	4013      	ands	r3, r2
 8001b2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f000 813a 	beq.w	8001da8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f003 0303 	and.w	r3, r3, #3
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d005      	beq.n	8001b4c <HAL_GPIO_Init+0x40>
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f003 0303 	and.w	r3, r3, #3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d130      	bne.n	8001bae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	2203      	movs	r2, #3
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	4013      	ands	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	68da      	ldr	r2, [r3, #12]
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b82:	2201      	movs	r2, #1
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	091b      	lsrs	r3, r3, #4
 8001b98:	f003 0201 	and.w	r2, r3, #1
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f003 0303 	and.w	r3, r3, #3
 8001bb6:	2b03      	cmp	r3, #3
 8001bb8:	d017      	beq.n	8001bea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	2203      	movs	r2, #3
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	689a      	ldr	r2, [r3, #8]
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f003 0303 	and.w	r3, r3, #3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d123      	bne.n	8001c3e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	08da      	lsrs	r2, r3, #3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	3208      	adds	r2, #8
 8001bfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	f003 0307 	and.w	r3, r3, #7
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	220f      	movs	r2, #15
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	43db      	mvns	r3, r3
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	4013      	ands	r3, r2
 8001c18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	691a      	ldr	r2, [r3, #16]
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	f003 0307 	and.w	r3, r3, #7
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	693a      	ldr	r2, [r7, #16]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	08da      	lsrs	r2, r3, #3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3208      	adds	r2, #8
 8001c38:	6939      	ldr	r1, [r7, #16]
 8001c3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	2203      	movs	r2, #3
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	693a      	ldr	r2, [r7, #16]
 8001c52:	4013      	ands	r3, r2
 8001c54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f003 0203 	and.w	r2, r3, #3
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f000 8094 	beq.w	8001da8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c80:	4b52      	ldr	r3, [pc, #328]	; (8001dcc <HAL_GPIO_Init+0x2c0>)
 8001c82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c84:	4a51      	ldr	r2, [pc, #324]	; (8001dcc <HAL_GPIO_Init+0x2c0>)
 8001c86:	f043 0301 	orr.w	r3, r3, #1
 8001c8a:	6613      	str	r3, [r2, #96]	; 0x60
 8001c8c:	4b4f      	ldr	r3, [pc, #316]	; (8001dcc <HAL_GPIO_Init+0x2c0>)
 8001c8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	60bb      	str	r3, [r7, #8]
 8001c96:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c98:	4a4d      	ldr	r2, [pc, #308]	; (8001dd0 <HAL_GPIO_Init+0x2c4>)
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	089b      	lsrs	r3, r3, #2
 8001c9e:	3302      	adds	r3, #2
 8001ca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	f003 0303 	and.w	r3, r3, #3
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	220f      	movs	r2, #15
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001cc2:	d00d      	beq.n	8001ce0 <HAL_GPIO_Init+0x1d4>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4a43      	ldr	r2, [pc, #268]	; (8001dd4 <HAL_GPIO_Init+0x2c8>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d007      	beq.n	8001cdc <HAL_GPIO_Init+0x1d0>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4a42      	ldr	r2, [pc, #264]	; (8001dd8 <HAL_GPIO_Init+0x2cc>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d101      	bne.n	8001cd8 <HAL_GPIO_Init+0x1cc>
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	e004      	b.n	8001ce2 <HAL_GPIO_Init+0x1d6>
 8001cd8:	2307      	movs	r3, #7
 8001cda:	e002      	b.n	8001ce2 <HAL_GPIO_Init+0x1d6>
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e000      	b.n	8001ce2 <HAL_GPIO_Init+0x1d6>
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	f002 0203 	and.w	r2, r2, #3
 8001ce8:	0092      	lsls	r2, r2, #2
 8001cea:	4093      	lsls	r3, r2
 8001cec:	693a      	ldr	r2, [r7, #16]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001cf2:	4937      	ldr	r1, [pc, #220]	; (8001dd0 <HAL_GPIO_Init+0x2c4>)
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	089b      	lsrs	r3, r3, #2
 8001cf8:	3302      	adds	r3, #2
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d00:	4b36      	ldr	r3, [pc, #216]	; (8001ddc <HAL_GPIO_Init+0x2d0>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d003      	beq.n	8001d24 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d24:	4a2d      	ldr	r2, [pc, #180]	; (8001ddc <HAL_GPIO_Init+0x2d0>)
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d2a:	4b2c      	ldr	r3, [pc, #176]	; (8001ddc <HAL_GPIO_Init+0x2d0>)
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	43db      	mvns	r3, r3
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	4013      	ands	r3, r2
 8001d38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d4e:	4a23      	ldr	r2, [pc, #140]	; (8001ddc <HAL_GPIO_Init+0x2d0>)
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001d54:	4b21      	ldr	r3, [pc, #132]	; (8001ddc <HAL_GPIO_Init+0x2d0>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	4013      	ands	r3, r2
 8001d62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d003      	beq.n	8001d78 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d78:	4a18      	ldr	r2, [pc, #96]	; (8001ddc <HAL_GPIO_Init+0x2d0>)
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001d7e:	4b17      	ldr	r3, [pc, #92]	; (8001ddc <HAL_GPIO_Init+0x2d0>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	43db      	mvns	r3, r3
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001da2:	4a0e      	ldr	r2, [pc, #56]	; (8001ddc <HAL_GPIO_Init+0x2d0>)
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	3301      	adds	r3, #1
 8001dac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	fa22 f303 	lsr.w	r3, r2, r3
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	f47f aeaf 	bne.w	8001b1c <HAL_GPIO_Init+0x10>
  }
}
 8001dbe:	bf00      	nop
 8001dc0:	bf00      	nop
 8001dc2:	371c      	adds	r7, #28
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	40010000 	.word	0x40010000
 8001dd4:	48000400 	.word	0x48000400
 8001dd8:	48000800 	.word	0x48000800
 8001ddc:	40010400 	.word	0x40010400

08001de0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	460b      	mov	r3, r1
 8001dea:	807b      	strh	r3, [r7, #2]
 8001dec:	4613      	mov	r3, r2
 8001dee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001df0:	787b      	ldrb	r3, [r7, #1]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d003      	beq.n	8001dfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001df6:	887a      	ldrh	r2, [r7, #2]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001dfc:	e002      	b.n	8001e04 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001dfe:	887a      	ldrh	r2, [r7, #2]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	460b      	mov	r3, r1
 8001e1a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	695b      	ldr	r3, [r3, #20]
 8001e20:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e22:	887a      	ldrh	r2, [r7, #2]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	4013      	ands	r3, r2
 8001e28:	041a      	lsls	r2, r3, #16
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	43d9      	mvns	r1, r3
 8001e2e:	887b      	ldrh	r3, [r7, #2]
 8001e30:	400b      	ands	r3, r1
 8001e32:	431a      	orrs	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	619a      	str	r2, [r3, #24]
}
 8001e38:	bf00      	nop
 8001e3a:	3714      	adds	r7, #20
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e48:	4b05      	ldr	r3, [pc, #20]	; (8001e60 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a04      	ldr	r2, [pc, #16]	; (8001e60 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e52:	6013      	str	r3, [r2, #0]
}
 8001e54:	bf00      	nop
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	40007000 	.word	0x40007000

08001e64 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001e68:	4b04      	ldr	r3, [pc, #16]	; (8001e7c <HAL_PWREx_GetVoltageRange+0x18>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	40007000 	.word	0x40007000

08001e80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e8e:	d130      	bne.n	8001ef2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e90:	4b23      	ldr	r3, [pc, #140]	; (8001f20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e9c:	d038      	beq.n	8001f10 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e9e:	4b20      	ldr	r3, [pc, #128]	; (8001f20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ea6:	4a1e      	ldr	r2, [pc, #120]	; (8001f20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ea8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001eae:	4b1d      	ldr	r3, [pc, #116]	; (8001f24 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2232      	movs	r2, #50	; 0x32
 8001eb4:	fb02 f303 	mul.w	r3, r2, r3
 8001eb8:	4a1b      	ldr	r2, [pc, #108]	; (8001f28 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001eba:	fba2 2303 	umull	r2, r3, r2, r3
 8001ebe:	0c9b      	lsrs	r3, r3, #18
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ec4:	e002      	b.n	8001ecc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ecc:	4b14      	ldr	r3, [pc, #80]	; (8001f20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ece:	695b      	ldr	r3, [r3, #20]
 8001ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ed4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ed8:	d102      	bne.n	8001ee0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d1f2      	bne.n	8001ec6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ee0:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ee8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eec:	d110      	bne.n	8001f10 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e00f      	b.n	8001f12 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ef2:	4b0b      	ldr	r3, [pc, #44]	; (8001f20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001efa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001efe:	d007      	beq.n	8001f10 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f00:	4b07      	ldr	r3, [pc, #28]	; (8001f20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f08:	4a05      	ldr	r2, [pc, #20]	; (8001f20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f0e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3714      	adds	r7, #20
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	40007000 	.word	0x40007000
 8001f24:	2000003c 	.word	0x2000003c
 8001f28:	431bde83 	.word	0x431bde83

08001f2c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b088      	sub	sp, #32
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d102      	bne.n	8001f40 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	f000 bc02 	b.w	8002744 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f40:	4b96      	ldr	r3, [pc, #600]	; (800219c <HAL_RCC_OscConfig+0x270>)
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f003 030c 	and.w	r3, r3, #12
 8001f48:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f4a:	4b94      	ldr	r3, [pc, #592]	; (800219c <HAL_RCC_OscConfig+0x270>)
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	f003 0303 	and.w	r3, r3, #3
 8001f52:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0310 	and.w	r3, r3, #16
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	f000 80e4 	beq.w	800212a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d007      	beq.n	8001f78 <HAL_RCC_OscConfig+0x4c>
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	2b0c      	cmp	r3, #12
 8001f6c:	f040 808b 	bne.w	8002086 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	f040 8087 	bne.w	8002086 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f78:	4b88      	ldr	r3, [pc, #544]	; (800219c <HAL_RCC_OscConfig+0x270>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d005      	beq.n	8001f90 <HAL_RCC_OscConfig+0x64>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d101      	bne.n	8001f90 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e3d9      	b.n	8002744 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a1a      	ldr	r2, [r3, #32]
 8001f94:	4b81      	ldr	r3, [pc, #516]	; (800219c <HAL_RCC_OscConfig+0x270>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0308 	and.w	r3, r3, #8
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d004      	beq.n	8001faa <HAL_RCC_OscConfig+0x7e>
 8001fa0:	4b7e      	ldr	r3, [pc, #504]	; (800219c <HAL_RCC_OscConfig+0x270>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fa8:	e005      	b.n	8001fb6 <HAL_RCC_OscConfig+0x8a>
 8001faa:	4b7c      	ldr	r3, [pc, #496]	; (800219c <HAL_RCC_OscConfig+0x270>)
 8001fac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fb0:	091b      	lsrs	r3, r3, #4
 8001fb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d223      	bcs.n	8002002 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a1b      	ldr	r3, [r3, #32]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f000 fd8c 	bl	8002adc <RCC_SetFlashLatencyFromMSIRange>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e3ba      	b.n	8002744 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fce:	4b73      	ldr	r3, [pc, #460]	; (800219c <HAL_RCC_OscConfig+0x270>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a72      	ldr	r2, [pc, #456]	; (800219c <HAL_RCC_OscConfig+0x270>)
 8001fd4:	f043 0308 	orr.w	r3, r3, #8
 8001fd8:	6013      	str	r3, [r2, #0]
 8001fda:	4b70      	ldr	r3, [pc, #448]	; (800219c <HAL_RCC_OscConfig+0x270>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a1b      	ldr	r3, [r3, #32]
 8001fe6:	496d      	ldr	r1, [pc, #436]	; (800219c <HAL_RCC_OscConfig+0x270>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fec:	4b6b      	ldr	r3, [pc, #428]	; (800219c <HAL_RCC_OscConfig+0x270>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	69db      	ldr	r3, [r3, #28]
 8001ff8:	021b      	lsls	r3, r3, #8
 8001ffa:	4968      	ldr	r1, [pc, #416]	; (800219c <HAL_RCC_OscConfig+0x270>)
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	604b      	str	r3, [r1, #4]
 8002000:	e025      	b.n	800204e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002002:	4b66      	ldr	r3, [pc, #408]	; (800219c <HAL_RCC_OscConfig+0x270>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a65      	ldr	r2, [pc, #404]	; (800219c <HAL_RCC_OscConfig+0x270>)
 8002008:	f043 0308 	orr.w	r3, r3, #8
 800200c:	6013      	str	r3, [r2, #0]
 800200e:	4b63      	ldr	r3, [pc, #396]	; (800219c <HAL_RCC_OscConfig+0x270>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a1b      	ldr	r3, [r3, #32]
 800201a:	4960      	ldr	r1, [pc, #384]	; (800219c <HAL_RCC_OscConfig+0x270>)
 800201c:	4313      	orrs	r3, r2
 800201e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002020:	4b5e      	ldr	r3, [pc, #376]	; (800219c <HAL_RCC_OscConfig+0x270>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	69db      	ldr	r3, [r3, #28]
 800202c:	021b      	lsls	r3, r3, #8
 800202e:	495b      	ldr	r1, [pc, #364]	; (800219c <HAL_RCC_OscConfig+0x270>)
 8002030:	4313      	orrs	r3, r2
 8002032:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d109      	bne.n	800204e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a1b      	ldr	r3, [r3, #32]
 800203e:	4618      	mov	r0, r3
 8002040:	f000 fd4c 	bl	8002adc <RCC_SetFlashLatencyFromMSIRange>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e37a      	b.n	8002744 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800204e:	f000 fc81 	bl	8002954 <HAL_RCC_GetSysClockFreq>
 8002052:	4602      	mov	r2, r0
 8002054:	4b51      	ldr	r3, [pc, #324]	; (800219c <HAL_RCC_OscConfig+0x270>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	091b      	lsrs	r3, r3, #4
 800205a:	f003 030f 	and.w	r3, r3, #15
 800205e:	4950      	ldr	r1, [pc, #320]	; (80021a0 <HAL_RCC_OscConfig+0x274>)
 8002060:	5ccb      	ldrb	r3, [r1, r3]
 8002062:	f003 031f 	and.w	r3, r3, #31
 8002066:	fa22 f303 	lsr.w	r3, r2, r3
 800206a:	4a4e      	ldr	r2, [pc, #312]	; (80021a4 <HAL_RCC_OscConfig+0x278>)
 800206c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800206e:	4b4e      	ldr	r3, [pc, #312]	; (80021a8 <HAL_RCC_OscConfig+0x27c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff fb3a 	bl	80016ec <HAL_InitTick>
 8002078:	4603      	mov	r3, r0
 800207a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800207c:	7bfb      	ldrb	r3, [r7, #15]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d052      	beq.n	8002128 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002082:	7bfb      	ldrb	r3, [r7, #15]
 8002084:	e35e      	b.n	8002744 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d032      	beq.n	80020f4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800208e:	4b43      	ldr	r3, [pc, #268]	; (800219c <HAL_RCC_OscConfig+0x270>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a42      	ldr	r2, [pc, #264]	; (800219c <HAL_RCC_OscConfig+0x270>)
 8002094:	f043 0301 	orr.w	r3, r3, #1
 8002098:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800209a:	f7ff fb77 	bl	800178c <HAL_GetTick>
 800209e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020a0:	e008      	b.n	80020b4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020a2:	f7ff fb73 	bl	800178c <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d901      	bls.n	80020b4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e347      	b.n	8002744 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020b4:	4b39      	ldr	r3, [pc, #228]	; (800219c <HAL_RCC_OscConfig+0x270>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0302 	and.w	r3, r3, #2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d0f0      	beq.n	80020a2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020c0:	4b36      	ldr	r3, [pc, #216]	; (800219c <HAL_RCC_OscConfig+0x270>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a35      	ldr	r2, [pc, #212]	; (800219c <HAL_RCC_OscConfig+0x270>)
 80020c6:	f043 0308 	orr.w	r3, r3, #8
 80020ca:	6013      	str	r3, [r2, #0]
 80020cc:	4b33      	ldr	r3, [pc, #204]	; (800219c <HAL_RCC_OscConfig+0x270>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a1b      	ldr	r3, [r3, #32]
 80020d8:	4930      	ldr	r1, [pc, #192]	; (800219c <HAL_RCC_OscConfig+0x270>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020de:	4b2f      	ldr	r3, [pc, #188]	; (800219c <HAL_RCC_OscConfig+0x270>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	69db      	ldr	r3, [r3, #28]
 80020ea:	021b      	lsls	r3, r3, #8
 80020ec:	492b      	ldr	r1, [pc, #172]	; (800219c <HAL_RCC_OscConfig+0x270>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	604b      	str	r3, [r1, #4]
 80020f2:	e01a      	b.n	800212a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80020f4:	4b29      	ldr	r3, [pc, #164]	; (800219c <HAL_RCC_OscConfig+0x270>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a28      	ldr	r2, [pc, #160]	; (800219c <HAL_RCC_OscConfig+0x270>)
 80020fa:	f023 0301 	bic.w	r3, r3, #1
 80020fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002100:	f7ff fb44 	bl	800178c <HAL_GetTick>
 8002104:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002106:	e008      	b.n	800211a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002108:	f7ff fb40 	bl	800178c <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b02      	cmp	r3, #2
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e314      	b.n	8002744 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800211a:	4b20      	ldr	r3, [pc, #128]	; (800219c <HAL_RCC_OscConfig+0x270>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1f0      	bne.n	8002108 <HAL_RCC_OscConfig+0x1dc>
 8002126:	e000      	b.n	800212a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002128:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	2b00      	cmp	r3, #0
 8002134:	d073      	beq.n	800221e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	2b08      	cmp	r3, #8
 800213a:	d005      	beq.n	8002148 <HAL_RCC_OscConfig+0x21c>
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	2b0c      	cmp	r3, #12
 8002140:	d10e      	bne.n	8002160 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	2b03      	cmp	r3, #3
 8002146:	d10b      	bne.n	8002160 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002148:	4b14      	ldr	r3, [pc, #80]	; (800219c <HAL_RCC_OscConfig+0x270>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d063      	beq.n	800221c <HAL_RCC_OscConfig+0x2f0>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d15f      	bne.n	800221c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e2f1      	b.n	8002744 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002168:	d106      	bne.n	8002178 <HAL_RCC_OscConfig+0x24c>
 800216a:	4b0c      	ldr	r3, [pc, #48]	; (800219c <HAL_RCC_OscConfig+0x270>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a0b      	ldr	r2, [pc, #44]	; (800219c <HAL_RCC_OscConfig+0x270>)
 8002170:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002174:	6013      	str	r3, [r2, #0]
 8002176:	e025      	b.n	80021c4 <HAL_RCC_OscConfig+0x298>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002180:	d114      	bne.n	80021ac <HAL_RCC_OscConfig+0x280>
 8002182:	4b06      	ldr	r3, [pc, #24]	; (800219c <HAL_RCC_OscConfig+0x270>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a05      	ldr	r2, [pc, #20]	; (800219c <HAL_RCC_OscConfig+0x270>)
 8002188:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800218c:	6013      	str	r3, [r2, #0]
 800218e:	4b03      	ldr	r3, [pc, #12]	; (800219c <HAL_RCC_OscConfig+0x270>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a02      	ldr	r2, [pc, #8]	; (800219c <HAL_RCC_OscConfig+0x270>)
 8002194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002198:	6013      	str	r3, [r2, #0]
 800219a:	e013      	b.n	80021c4 <HAL_RCC_OscConfig+0x298>
 800219c:	40021000 	.word	0x40021000
 80021a0:	08006318 	.word	0x08006318
 80021a4:	2000003c 	.word	0x2000003c
 80021a8:	20000040 	.word	0x20000040
 80021ac:	4ba0      	ldr	r3, [pc, #640]	; (8002430 <HAL_RCC_OscConfig+0x504>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a9f      	ldr	r2, [pc, #636]	; (8002430 <HAL_RCC_OscConfig+0x504>)
 80021b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021b6:	6013      	str	r3, [r2, #0]
 80021b8:	4b9d      	ldr	r3, [pc, #628]	; (8002430 <HAL_RCC_OscConfig+0x504>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a9c      	ldr	r2, [pc, #624]	; (8002430 <HAL_RCC_OscConfig+0x504>)
 80021be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d013      	beq.n	80021f4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021cc:	f7ff fade 	bl	800178c <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021d2:	e008      	b.n	80021e6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021d4:	f7ff fada 	bl	800178c <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b64      	cmp	r3, #100	; 0x64
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e2ae      	b.n	8002744 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021e6:	4b92      	ldr	r3, [pc, #584]	; (8002430 <HAL_RCC_OscConfig+0x504>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d0f0      	beq.n	80021d4 <HAL_RCC_OscConfig+0x2a8>
 80021f2:	e014      	b.n	800221e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f4:	f7ff faca 	bl	800178c <HAL_GetTick>
 80021f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021fa:	e008      	b.n	800220e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021fc:	f7ff fac6 	bl	800178c <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b64      	cmp	r3, #100	; 0x64
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e29a      	b.n	8002744 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800220e:	4b88      	ldr	r3, [pc, #544]	; (8002430 <HAL_RCC_OscConfig+0x504>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1f0      	bne.n	80021fc <HAL_RCC_OscConfig+0x2d0>
 800221a:	e000      	b.n	800221e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800221c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d060      	beq.n	80022ec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	2b04      	cmp	r3, #4
 800222e:	d005      	beq.n	800223c <HAL_RCC_OscConfig+0x310>
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	2b0c      	cmp	r3, #12
 8002234:	d119      	bne.n	800226a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	2b02      	cmp	r3, #2
 800223a:	d116      	bne.n	800226a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800223c:	4b7c      	ldr	r3, [pc, #496]	; (8002430 <HAL_RCC_OscConfig+0x504>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002244:	2b00      	cmp	r3, #0
 8002246:	d005      	beq.n	8002254 <HAL_RCC_OscConfig+0x328>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d101      	bne.n	8002254 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e277      	b.n	8002744 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002254:	4b76      	ldr	r3, [pc, #472]	; (8002430 <HAL_RCC_OscConfig+0x504>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	061b      	lsls	r3, r3, #24
 8002262:	4973      	ldr	r1, [pc, #460]	; (8002430 <HAL_RCC_OscConfig+0x504>)
 8002264:	4313      	orrs	r3, r2
 8002266:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002268:	e040      	b.n	80022ec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d023      	beq.n	80022ba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002272:	4b6f      	ldr	r3, [pc, #444]	; (8002430 <HAL_RCC_OscConfig+0x504>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a6e      	ldr	r2, [pc, #440]	; (8002430 <HAL_RCC_OscConfig+0x504>)
 8002278:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800227c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800227e:	f7ff fa85 	bl	800178c <HAL_GetTick>
 8002282:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002284:	e008      	b.n	8002298 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002286:	f7ff fa81 	bl	800178c <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b02      	cmp	r3, #2
 8002292:	d901      	bls.n	8002298 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e255      	b.n	8002744 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002298:	4b65      	ldr	r3, [pc, #404]	; (8002430 <HAL_RCC_OscConfig+0x504>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d0f0      	beq.n	8002286 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a4:	4b62      	ldr	r3, [pc, #392]	; (8002430 <HAL_RCC_OscConfig+0x504>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	691b      	ldr	r3, [r3, #16]
 80022b0:	061b      	lsls	r3, r3, #24
 80022b2:	495f      	ldr	r1, [pc, #380]	; (8002430 <HAL_RCC_OscConfig+0x504>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	604b      	str	r3, [r1, #4]
 80022b8:	e018      	b.n	80022ec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022ba:	4b5d      	ldr	r3, [pc, #372]	; (8002430 <HAL_RCC_OscConfig+0x504>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a5c      	ldr	r2, [pc, #368]	; (8002430 <HAL_RCC_OscConfig+0x504>)
 80022c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c6:	f7ff fa61 	bl	800178c <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022cc:	e008      	b.n	80022e0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022ce:	f7ff fa5d 	bl	800178c <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e231      	b.n	8002744 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022e0:	4b53      	ldr	r3, [pc, #332]	; (8002430 <HAL_RCC_OscConfig+0x504>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d1f0      	bne.n	80022ce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0308 	and.w	r3, r3, #8
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d03c      	beq.n	8002372 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	695b      	ldr	r3, [r3, #20]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d01c      	beq.n	800233a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002300:	4b4b      	ldr	r3, [pc, #300]	; (8002430 <HAL_RCC_OscConfig+0x504>)
 8002302:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002306:	4a4a      	ldr	r2, [pc, #296]	; (8002430 <HAL_RCC_OscConfig+0x504>)
 8002308:	f043 0301 	orr.w	r3, r3, #1
 800230c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002310:	f7ff fa3c 	bl	800178c <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002318:	f7ff fa38 	bl	800178c <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b02      	cmp	r3, #2
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e20c      	b.n	8002744 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800232a:	4b41      	ldr	r3, [pc, #260]	; (8002430 <HAL_RCC_OscConfig+0x504>)
 800232c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d0ef      	beq.n	8002318 <HAL_RCC_OscConfig+0x3ec>
 8002338:	e01b      	b.n	8002372 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800233a:	4b3d      	ldr	r3, [pc, #244]	; (8002430 <HAL_RCC_OscConfig+0x504>)
 800233c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002340:	4a3b      	ldr	r2, [pc, #236]	; (8002430 <HAL_RCC_OscConfig+0x504>)
 8002342:	f023 0301 	bic.w	r3, r3, #1
 8002346:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800234a:	f7ff fa1f 	bl	800178c <HAL_GetTick>
 800234e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002350:	e008      	b.n	8002364 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002352:	f7ff fa1b 	bl	800178c <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	2b02      	cmp	r3, #2
 800235e:	d901      	bls.n	8002364 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e1ef      	b.n	8002744 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002364:	4b32      	ldr	r3, [pc, #200]	; (8002430 <HAL_RCC_OscConfig+0x504>)
 8002366:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1ef      	bne.n	8002352 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0304 	and.w	r3, r3, #4
 800237a:	2b00      	cmp	r3, #0
 800237c:	f000 80a6 	beq.w	80024cc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002380:	2300      	movs	r3, #0
 8002382:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002384:	4b2a      	ldr	r3, [pc, #168]	; (8002430 <HAL_RCC_OscConfig+0x504>)
 8002386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002388:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d10d      	bne.n	80023ac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002390:	4b27      	ldr	r3, [pc, #156]	; (8002430 <HAL_RCC_OscConfig+0x504>)
 8002392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002394:	4a26      	ldr	r2, [pc, #152]	; (8002430 <HAL_RCC_OscConfig+0x504>)
 8002396:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800239a:	6593      	str	r3, [r2, #88]	; 0x58
 800239c:	4b24      	ldr	r3, [pc, #144]	; (8002430 <HAL_RCC_OscConfig+0x504>)
 800239e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a4:	60bb      	str	r3, [r7, #8]
 80023a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023a8:	2301      	movs	r3, #1
 80023aa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023ac:	4b21      	ldr	r3, [pc, #132]	; (8002434 <HAL_RCC_OscConfig+0x508>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d118      	bne.n	80023ea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023b8:	4b1e      	ldr	r3, [pc, #120]	; (8002434 <HAL_RCC_OscConfig+0x508>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a1d      	ldr	r2, [pc, #116]	; (8002434 <HAL_RCC_OscConfig+0x508>)
 80023be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023c4:	f7ff f9e2 	bl	800178c <HAL_GetTick>
 80023c8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023ca:	e008      	b.n	80023de <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023cc:	f7ff f9de 	bl	800178c <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e1b2      	b.n	8002744 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023de:	4b15      	ldr	r3, [pc, #84]	; (8002434 <HAL_RCC_OscConfig+0x508>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d0f0      	beq.n	80023cc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d108      	bne.n	8002404 <HAL_RCC_OscConfig+0x4d8>
 80023f2:	4b0f      	ldr	r3, [pc, #60]	; (8002430 <HAL_RCC_OscConfig+0x504>)
 80023f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f8:	4a0d      	ldr	r2, [pc, #52]	; (8002430 <HAL_RCC_OscConfig+0x504>)
 80023fa:	f043 0301 	orr.w	r3, r3, #1
 80023fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002402:	e029      	b.n	8002458 <HAL_RCC_OscConfig+0x52c>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	2b05      	cmp	r3, #5
 800240a:	d115      	bne.n	8002438 <HAL_RCC_OscConfig+0x50c>
 800240c:	4b08      	ldr	r3, [pc, #32]	; (8002430 <HAL_RCC_OscConfig+0x504>)
 800240e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002412:	4a07      	ldr	r2, [pc, #28]	; (8002430 <HAL_RCC_OscConfig+0x504>)
 8002414:	f043 0304 	orr.w	r3, r3, #4
 8002418:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800241c:	4b04      	ldr	r3, [pc, #16]	; (8002430 <HAL_RCC_OscConfig+0x504>)
 800241e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002422:	4a03      	ldr	r2, [pc, #12]	; (8002430 <HAL_RCC_OscConfig+0x504>)
 8002424:	f043 0301 	orr.w	r3, r3, #1
 8002428:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800242c:	e014      	b.n	8002458 <HAL_RCC_OscConfig+0x52c>
 800242e:	bf00      	nop
 8002430:	40021000 	.word	0x40021000
 8002434:	40007000 	.word	0x40007000
 8002438:	4b9a      	ldr	r3, [pc, #616]	; (80026a4 <HAL_RCC_OscConfig+0x778>)
 800243a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800243e:	4a99      	ldr	r2, [pc, #612]	; (80026a4 <HAL_RCC_OscConfig+0x778>)
 8002440:	f023 0301 	bic.w	r3, r3, #1
 8002444:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002448:	4b96      	ldr	r3, [pc, #600]	; (80026a4 <HAL_RCC_OscConfig+0x778>)
 800244a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800244e:	4a95      	ldr	r2, [pc, #596]	; (80026a4 <HAL_RCC_OscConfig+0x778>)
 8002450:	f023 0304 	bic.w	r3, r3, #4
 8002454:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d016      	beq.n	800248e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002460:	f7ff f994 	bl	800178c <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002466:	e00a      	b.n	800247e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002468:	f7ff f990 	bl	800178c <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	f241 3288 	movw	r2, #5000	; 0x1388
 8002476:	4293      	cmp	r3, r2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e162      	b.n	8002744 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800247e:	4b89      	ldr	r3, [pc, #548]	; (80026a4 <HAL_RCC_OscConfig+0x778>)
 8002480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d0ed      	beq.n	8002468 <HAL_RCC_OscConfig+0x53c>
 800248c:	e015      	b.n	80024ba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800248e:	f7ff f97d 	bl	800178c <HAL_GetTick>
 8002492:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002494:	e00a      	b.n	80024ac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002496:	f7ff f979 	bl	800178c <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e14b      	b.n	8002744 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024ac:	4b7d      	ldr	r3, [pc, #500]	; (80026a4 <HAL_RCC_OscConfig+0x778>)
 80024ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1ed      	bne.n	8002496 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024ba:	7ffb      	ldrb	r3, [r7, #31]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d105      	bne.n	80024cc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024c0:	4b78      	ldr	r3, [pc, #480]	; (80026a4 <HAL_RCC_OscConfig+0x778>)
 80024c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c4:	4a77      	ldr	r2, [pc, #476]	; (80026a4 <HAL_RCC_OscConfig+0x778>)
 80024c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024ca:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0320 	and.w	r3, r3, #32
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d03c      	beq.n	8002552 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d01c      	beq.n	800251a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80024e0:	4b70      	ldr	r3, [pc, #448]	; (80026a4 <HAL_RCC_OscConfig+0x778>)
 80024e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024e6:	4a6f      	ldr	r2, [pc, #444]	; (80026a4 <HAL_RCC_OscConfig+0x778>)
 80024e8:	f043 0301 	orr.w	r3, r3, #1
 80024ec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f0:	f7ff f94c 	bl	800178c <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024f8:	f7ff f948 	bl	800178c <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e11c      	b.n	8002744 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800250a:	4b66      	ldr	r3, [pc, #408]	; (80026a4 <HAL_RCC_OscConfig+0x778>)
 800250c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d0ef      	beq.n	80024f8 <HAL_RCC_OscConfig+0x5cc>
 8002518:	e01b      	b.n	8002552 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800251a:	4b62      	ldr	r3, [pc, #392]	; (80026a4 <HAL_RCC_OscConfig+0x778>)
 800251c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002520:	4a60      	ldr	r2, [pc, #384]	; (80026a4 <HAL_RCC_OscConfig+0x778>)
 8002522:	f023 0301 	bic.w	r3, r3, #1
 8002526:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800252a:	f7ff f92f 	bl	800178c <HAL_GetTick>
 800252e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002530:	e008      	b.n	8002544 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002532:	f7ff f92b 	bl	800178c <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	2b02      	cmp	r3, #2
 800253e:	d901      	bls.n	8002544 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e0ff      	b.n	8002744 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002544:	4b57      	ldr	r3, [pc, #348]	; (80026a4 <HAL_RCC_OscConfig+0x778>)
 8002546:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1ef      	bne.n	8002532 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002556:	2b00      	cmp	r3, #0
 8002558:	f000 80f3 	beq.w	8002742 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002560:	2b02      	cmp	r3, #2
 8002562:	f040 80c9 	bne.w	80026f8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002566:	4b4f      	ldr	r3, [pc, #316]	; (80026a4 <HAL_RCC_OscConfig+0x778>)
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	f003 0203 	and.w	r2, r3, #3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002576:	429a      	cmp	r2, r3
 8002578:	d12c      	bne.n	80025d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002584:	3b01      	subs	r3, #1
 8002586:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002588:	429a      	cmp	r2, r3
 800258a:	d123      	bne.n	80025d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002596:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002598:	429a      	cmp	r2, r3
 800259a:	d11b      	bne.n	80025d4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d113      	bne.n	80025d4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b6:	085b      	lsrs	r3, r3, #1
 80025b8:	3b01      	subs	r3, #1
 80025ba:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80025bc:	429a      	cmp	r2, r3
 80025be:	d109      	bne.n	80025d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	085b      	lsrs	r3, r3, #1
 80025cc:	3b01      	subs	r3, #1
 80025ce:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d06b      	beq.n	80026ac <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	2b0c      	cmp	r3, #12
 80025d8:	d062      	beq.n	80026a0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80025da:	4b32      	ldr	r3, [pc, #200]	; (80026a4 <HAL_RCC_OscConfig+0x778>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e0ac      	b.n	8002744 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80025ea:	4b2e      	ldr	r3, [pc, #184]	; (80026a4 <HAL_RCC_OscConfig+0x778>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a2d      	ldr	r2, [pc, #180]	; (80026a4 <HAL_RCC_OscConfig+0x778>)
 80025f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025f4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025f6:	f7ff f8c9 	bl	800178c <HAL_GetTick>
 80025fa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025fc:	e008      	b.n	8002610 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025fe:	f7ff f8c5 	bl	800178c <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e099      	b.n	8002744 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002610:	4b24      	ldr	r3, [pc, #144]	; (80026a4 <HAL_RCC_OscConfig+0x778>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d1f0      	bne.n	80025fe <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800261c:	4b21      	ldr	r3, [pc, #132]	; (80026a4 <HAL_RCC_OscConfig+0x778>)
 800261e:	68da      	ldr	r2, [r3, #12]
 8002620:	4b21      	ldr	r3, [pc, #132]	; (80026a8 <HAL_RCC_OscConfig+0x77c>)
 8002622:	4013      	ands	r3, r2
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800262c:	3a01      	subs	r2, #1
 800262e:	0112      	lsls	r2, r2, #4
 8002630:	4311      	orrs	r1, r2
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002636:	0212      	lsls	r2, r2, #8
 8002638:	4311      	orrs	r1, r2
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800263e:	0852      	lsrs	r2, r2, #1
 8002640:	3a01      	subs	r2, #1
 8002642:	0552      	lsls	r2, r2, #21
 8002644:	4311      	orrs	r1, r2
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800264a:	0852      	lsrs	r2, r2, #1
 800264c:	3a01      	subs	r2, #1
 800264e:	0652      	lsls	r2, r2, #25
 8002650:	4311      	orrs	r1, r2
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002656:	06d2      	lsls	r2, r2, #27
 8002658:	430a      	orrs	r2, r1
 800265a:	4912      	ldr	r1, [pc, #72]	; (80026a4 <HAL_RCC_OscConfig+0x778>)
 800265c:	4313      	orrs	r3, r2
 800265e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002660:	4b10      	ldr	r3, [pc, #64]	; (80026a4 <HAL_RCC_OscConfig+0x778>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a0f      	ldr	r2, [pc, #60]	; (80026a4 <HAL_RCC_OscConfig+0x778>)
 8002666:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800266a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800266c:	4b0d      	ldr	r3, [pc, #52]	; (80026a4 <HAL_RCC_OscConfig+0x778>)
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	4a0c      	ldr	r2, [pc, #48]	; (80026a4 <HAL_RCC_OscConfig+0x778>)
 8002672:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002676:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002678:	f7ff f888 	bl	800178c <HAL_GetTick>
 800267c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800267e:	e008      	b.n	8002692 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002680:	f7ff f884 	bl	800178c <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b02      	cmp	r3, #2
 800268c:	d901      	bls.n	8002692 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e058      	b.n	8002744 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002692:	4b04      	ldr	r3, [pc, #16]	; (80026a4 <HAL_RCC_OscConfig+0x778>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d0f0      	beq.n	8002680 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800269e:	e050      	b.n	8002742 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e04f      	b.n	8002744 <HAL_RCC_OscConfig+0x818>
 80026a4:	40021000 	.word	0x40021000
 80026a8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026ac:	4b27      	ldr	r3, [pc, #156]	; (800274c <HAL_RCC_OscConfig+0x820>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d144      	bne.n	8002742 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80026b8:	4b24      	ldr	r3, [pc, #144]	; (800274c <HAL_RCC_OscConfig+0x820>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a23      	ldr	r2, [pc, #140]	; (800274c <HAL_RCC_OscConfig+0x820>)
 80026be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026c2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026c4:	4b21      	ldr	r3, [pc, #132]	; (800274c <HAL_RCC_OscConfig+0x820>)
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	4a20      	ldr	r2, [pc, #128]	; (800274c <HAL_RCC_OscConfig+0x820>)
 80026ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026ce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80026d0:	f7ff f85c 	bl	800178c <HAL_GetTick>
 80026d4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026d6:	e008      	b.n	80026ea <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026d8:	f7ff f858 	bl	800178c <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e02c      	b.n	8002744 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026ea:	4b18      	ldr	r3, [pc, #96]	; (800274c <HAL_RCC_OscConfig+0x820>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d0f0      	beq.n	80026d8 <HAL_RCC_OscConfig+0x7ac>
 80026f6:	e024      	b.n	8002742 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	2b0c      	cmp	r3, #12
 80026fc:	d01f      	beq.n	800273e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026fe:	4b13      	ldr	r3, [pc, #76]	; (800274c <HAL_RCC_OscConfig+0x820>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a12      	ldr	r2, [pc, #72]	; (800274c <HAL_RCC_OscConfig+0x820>)
 8002704:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002708:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800270a:	f7ff f83f 	bl	800178c <HAL_GetTick>
 800270e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002710:	e008      	b.n	8002724 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002712:	f7ff f83b 	bl	800178c <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e00f      	b.n	8002744 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002724:	4b09      	ldr	r3, [pc, #36]	; (800274c <HAL_RCC_OscConfig+0x820>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1f0      	bne.n	8002712 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002730:	4b06      	ldr	r3, [pc, #24]	; (800274c <HAL_RCC_OscConfig+0x820>)
 8002732:	68da      	ldr	r2, [r3, #12]
 8002734:	4905      	ldr	r1, [pc, #20]	; (800274c <HAL_RCC_OscConfig+0x820>)
 8002736:	4b06      	ldr	r3, [pc, #24]	; (8002750 <HAL_RCC_OscConfig+0x824>)
 8002738:	4013      	ands	r3, r2
 800273a:	60cb      	str	r3, [r1, #12]
 800273c:	e001      	b.n	8002742 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e000      	b.n	8002744 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	3720      	adds	r7, #32
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	40021000 	.word	0x40021000
 8002750:	feeefffc 	.word	0xfeeefffc

08002754 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d101      	bne.n	8002768 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e0e7      	b.n	8002938 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002768:	4b75      	ldr	r3, [pc, #468]	; (8002940 <HAL_RCC_ClockConfig+0x1ec>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0307 	and.w	r3, r3, #7
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	429a      	cmp	r2, r3
 8002774:	d910      	bls.n	8002798 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002776:	4b72      	ldr	r3, [pc, #456]	; (8002940 <HAL_RCC_ClockConfig+0x1ec>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f023 0207 	bic.w	r2, r3, #7
 800277e:	4970      	ldr	r1, [pc, #448]	; (8002940 <HAL_RCC_ClockConfig+0x1ec>)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	4313      	orrs	r3, r2
 8002784:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002786:	4b6e      	ldr	r3, [pc, #440]	; (8002940 <HAL_RCC_ClockConfig+0x1ec>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0307 	and.w	r3, r3, #7
 800278e:	683a      	ldr	r2, [r7, #0]
 8002790:	429a      	cmp	r2, r3
 8002792:	d001      	beq.n	8002798 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e0cf      	b.n	8002938 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0302 	and.w	r3, r3, #2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d010      	beq.n	80027c6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	4b66      	ldr	r3, [pc, #408]	; (8002944 <HAL_RCC_ClockConfig+0x1f0>)
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d908      	bls.n	80027c6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027b4:	4b63      	ldr	r3, [pc, #396]	; (8002944 <HAL_RCC_ClockConfig+0x1f0>)
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	4960      	ldr	r1, [pc, #384]	; (8002944 <HAL_RCC_ClockConfig+0x1f0>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d04c      	beq.n	800286c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	2b03      	cmp	r3, #3
 80027d8:	d107      	bne.n	80027ea <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027da:	4b5a      	ldr	r3, [pc, #360]	; (8002944 <HAL_RCC_ClockConfig+0x1f0>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d121      	bne.n	800282a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e0a6      	b.n	8002938 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d107      	bne.n	8002802 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027f2:	4b54      	ldr	r3, [pc, #336]	; (8002944 <HAL_RCC_ClockConfig+0x1f0>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d115      	bne.n	800282a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e09a      	b.n	8002938 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d107      	bne.n	800281a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800280a:	4b4e      	ldr	r3, [pc, #312]	; (8002944 <HAL_RCC_ClockConfig+0x1f0>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d109      	bne.n	800282a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e08e      	b.n	8002938 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800281a:	4b4a      	ldr	r3, [pc, #296]	; (8002944 <HAL_RCC_ClockConfig+0x1f0>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e086      	b.n	8002938 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800282a:	4b46      	ldr	r3, [pc, #280]	; (8002944 <HAL_RCC_ClockConfig+0x1f0>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f023 0203 	bic.w	r2, r3, #3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	4943      	ldr	r1, [pc, #268]	; (8002944 <HAL_RCC_ClockConfig+0x1f0>)
 8002838:	4313      	orrs	r3, r2
 800283a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800283c:	f7fe ffa6 	bl	800178c <HAL_GetTick>
 8002840:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002842:	e00a      	b.n	800285a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002844:	f7fe ffa2 	bl	800178c <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002852:	4293      	cmp	r3, r2
 8002854:	d901      	bls.n	800285a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e06e      	b.n	8002938 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800285a:	4b3a      	ldr	r3, [pc, #232]	; (8002944 <HAL_RCC_ClockConfig+0x1f0>)
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f003 020c 	and.w	r2, r3, #12
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	429a      	cmp	r2, r3
 800286a:	d1eb      	bne.n	8002844 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d010      	beq.n	800289a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689a      	ldr	r2, [r3, #8]
 800287c:	4b31      	ldr	r3, [pc, #196]	; (8002944 <HAL_RCC_ClockConfig+0x1f0>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002884:	429a      	cmp	r2, r3
 8002886:	d208      	bcs.n	800289a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002888:	4b2e      	ldr	r3, [pc, #184]	; (8002944 <HAL_RCC_ClockConfig+0x1f0>)
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	492b      	ldr	r1, [pc, #172]	; (8002944 <HAL_RCC_ClockConfig+0x1f0>)
 8002896:	4313      	orrs	r3, r2
 8002898:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800289a:	4b29      	ldr	r3, [pc, #164]	; (8002940 <HAL_RCC_ClockConfig+0x1ec>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0307 	and.w	r3, r3, #7
 80028a2:	683a      	ldr	r2, [r7, #0]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d210      	bcs.n	80028ca <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028a8:	4b25      	ldr	r3, [pc, #148]	; (8002940 <HAL_RCC_ClockConfig+0x1ec>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f023 0207 	bic.w	r2, r3, #7
 80028b0:	4923      	ldr	r1, [pc, #140]	; (8002940 <HAL_RCC_ClockConfig+0x1ec>)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028b8:	4b21      	ldr	r3, [pc, #132]	; (8002940 <HAL_RCC_ClockConfig+0x1ec>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0307 	and.w	r3, r3, #7
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d001      	beq.n	80028ca <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e036      	b.n	8002938 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0304 	and.w	r3, r3, #4
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d008      	beq.n	80028e8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028d6:	4b1b      	ldr	r3, [pc, #108]	; (8002944 <HAL_RCC_ClockConfig+0x1f0>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	4918      	ldr	r1, [pc, #96]	; (8002944 <HAL_RCC_ClockConfig+0x1f0>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0308 	and.w	r3, r3, #8
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d009      	beq.n	8002908 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028f4:	4b13      	ldr	r3, [pc, #76]	; (8002944 <HAL_RCC_ClockConfig+0x1f0>)
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	00db      	lsls	r3, r3, #3
 8002902:	4910      	ldr	r1, [pc, #64]	; (8002944 <HAL_RCC_ClockConfig+0x1f0>)
 8002904:	4313      	orrs	r3, r2
 8002906:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002908:	f000 f824 	bl	8002954 <HAL_RCC_GetSysClockFreq>
 800290c:	4602      	mov	r2, r0
 800290e:	4b0d      	ldr	r3, [pc, #52]	; (8002944 <HAL_RCC_ClockConfig+0x1f0>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	091b      	lsrs	r3, r3, #4
 8002914:	f003 030f 	and.w	r3, r3, #15
 8002918:	490b      	ldr	r1, [pc, #44]	; (8002948 <HAL_RCC_ClockConfig+0x1f4>)
 800291a:	5ccb      	ldrb	r3, [r1, r3]
 800291c:	f003 031f 	and.w	r3, r3, #31
 8002920:	fa22 f303 	lsr.w	r3, r2, r3
 8002924:	4a09      	ldr	r2, [pc, #36]	; (800294c <HAL_RCC_ClockConfig+0x1f8>)
 8002926:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002928:	4b09      	ldr	r3, [pc, #36]	; (8002950 <HAL_RCC_ClockConfig+0x1fc>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4618      	mov	r0, r3
 800292e:	f7fe fedd 	bl	80016ec <HAL_InitTick>
 8002932:	4603      	mov	r3, r0
 8002934:	72fb      	strb	r3, [r7, #11]

  return status;
 8002936:	7afb      	ldrb	r3, [r7, #11]
}
 8002938:	4618      	mov	r0, r3
 800293a:	3710      	adds	r7, #16
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	40022000 	.word	0x40022000
 8002944:	40021000 	.word	0x40021000
 8002948:	08006318 	.word	0x08006318
 800294c:	2000003c 	.word	0x2000003c
 8002950:	20000040 	.word	0x20000040

08002954 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002954:	b480      	push	{r7}
 8002956:	b089      	sub	sp, #36	; 0x24
 8002958:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800295a:	2300      	movs	r3, #0
 800295c:	61fb      	str	r3, [r7, #28]
 800295e:	2300      	movs	r3, #0
 8002960:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002962:	4b3e      	ldr	r3, [pc, #248]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x108>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f003 030c 	and.w	r3, r3, #12
 800296a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800296c:	4b3b      	ldr	r3, [pc, #236]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x108>)
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	f003 0303 	and.w	r3, r3, #3
 8002974:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d005      	beq.n	8002988 <HAL_RCC_GetSysClockFreq+0x34>
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	2b0c      	cmp	r3, #12
 8002980:	d121      	bne.n	80029c6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d11e      	bne.n	80029c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002988:	4b34      	ldr	r3, [pc, #208]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x108>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0308 	and.w	r3, r3, #8
 8002990:	2b00      	cmp	r3, #0
 8002992:	d107      	bne.n	80029a4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002994:	4b31      	ldr	r3, [pc, #196]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x108>)
 8002996:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800299a:	0a1b      	lsrs	r3, r3, #8
 800299c:	f003 030f 	and.w	r3, r3, #15
 80029a0:	61fb      	str	r3, [r7, #28]
 80029a2:	e005      	b.n	80029b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80029a4:	4b2d      	ldr	r3, [pc, #180]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x108>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	091b      	lsrs	r3, r3, #4
 80029aa:	f003 030f 	and.w	r3, r3, #15
 80029ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80029b0:	4a2b      	ldr	r2, [pc, #172]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x10c>)
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029b8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d10d      	bne.n	80029dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029c4:	e00a      	b.n	80029dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	2b04      	cmp	r3, #4
 80029ca:	d102      	bne.n	80029d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80029cc:	4b25      	ldr	r3, [pc, #148]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x110>)
 80029ce:	61bb      	str	r3, [r7, #24]
 80029d0:	e004      	b.n	80029dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	2b08      	cmp	r3, #8
 80029d6:	d101      	bne.n	80029dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80029d8:	4b23      	ldr	r3, [pc, #140]	; (8002a68 <HAL_RCC_GetSysClockFreq+0x114>)
 80029da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	2b0c      	cmp	r3, #12
 80029e0:	d134      	bne.n	8002a4c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029e2:	4b1e      	ldr	r3, [pc, #120]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x108>)
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	f003 0303 	and.w	r3, r3, #3
 80029ea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d003      	beq.n	80029fa <HAL_RCC_GetSysClockFreq+0xa6>
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	2b03      	cmp	r3, #3
 80029f6:	d003      	beq.n	8002a00 <HAL_RCC_GetSysClockFreq+0xac>
 80029f8:	e005      	b.n	8002a06 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80029fa:	4b1a      	ldr	r3, [pc, #104]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x110>)
 80029fc:	617b      	str	r3, [r7, #20]
      break;
 80029fe:	e005      	b.n	8002a0c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002a00:	4b19      	ldr	r3, [pc, #100]	; (8002a68 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a02:	617b      	str	r3, [r7, #20]
      break;
 8002a04:	e002      	b.n	8002a0c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	617b      	str	r3, [r7, #20]
      break;
 8002a0a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a0c:	4b13      	ldr	r3, [pc, #76]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	091b      	lsrs	r3, r3, #4
 8002a12:	f003 0307 	and.w	r3, r3, #7
 8002a16:	3301      	adds	r3, #1
 8002a18:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002a1a:	4b10      	ldr	r3, [pc, #64]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	0a1b      	lsrs	r3, r3, #8
 8002a20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a24:	697a      	ldr	r2, [r7, #20]
 8002a26:	fb03 f202 	mul.w	r2, r3, r2
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a30:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a32:	4b0a      	ldr	r3, [pc, #40]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	0e5b      	lsrs	r3, r3, #25
 8002a38:	f003 0303 	and.w	r3, r3, #3
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002a42:	697a      	ldr	r2, [r7, #20]
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a4a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002a4c:	69bb      	ldr	r3, [r7, #24]
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3724      	adds	r7, #36	; 0x24
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	40021000 	.word	0x40021000
 8002a60:	08006330 	.word	0x08006330
 8002a64:	00f42400 	.word	0x00f42400
 8002a68:	007a1200 	.word	0x007a1200

08002a6c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a70:	4b03      	ldr	r3, [pc, #12]	; (8002a80 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a72:	681b      	ldr	r3, [r3, #0]
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	2000003c 	.word	0x2000003c

08002a84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002a88:	f7ff fff0 	bl	8002a6c <HAL_RCC_GetHCLKFreq>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	4b06      	ldr	r3, [pc, #24]	; (8002aa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	0a1b      	lsrs	r3, r3, #8
 8002a94:	f003 0307 	and.w	r3, r3, #7
 8002a98:	4904      	ldr	r1, [pc, #16]	; (8002aac <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a9a:	5ccb      	ldrb	r3, [r1, r3]
 8002a9c:	f003 031f 	and.w	r3, r3, #31
 8002aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	08006328 	.word	0x08006328

08002ab0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ab4:	f7ff ffda 	bl	8002a6c <HAL_RCC_GetHCLKFreq>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	4b06      	ldr	r3, [pc, #24]	; (8002ad4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	0adb      	lsrs	r3, r3, #11
 8002ac0:	f003 0307 	and.w	r3, r3, #7
 8002ac4:	4904      	ldr	r1, [pc, #16]	; (8002ad8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ac6:	5ccb      	ldrb	r3, [r1, r3]
 8002ac8:	f003 031f 	and.w	r3, r3, #31
 8002acc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	40021000 	.word	0x40021000
 8002ad8:	08006328 	.word	0x08006328

08002adc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b086      	sub	sp, #24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002ae8:	4b2a      	ldr	r3, [pc, #168]	; (8002b94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d003      	beq.n	8002afc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002af4:	f7ff f9b6 	bl	8001e64 <HAL_PWREx_GetVoltageRange>
 8002af8:	6178      	str	r0, [r7, #20]
 8002afa:	e014      	b.n	8002b26 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002afc:	4b25      	ldr	r3, [pc, #148]	; (8002b94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b00:	4a24      	ldr	r2, [pc, #144]	; (8002b94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b06:	6593      	str	r3, [r2, #88]	; 0x58
 8002b08:	4b22      	ldr	r3, [pc, #136]	; (8002b94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b10:	60fb      	str	r3, [r7, #12]
 8002b12:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002b14:	f7ff f9a6 	bl	8001e64 <HAL_PWREx_GetVoltageRange>
 8002b18:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002b1a:	4b1e      	ldr	r3, [pc, #120]	; (8002b94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b1e:	4a1d      	ldr	r2, [pc, #116]	; (8002b94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b24:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b2c:	d10b      	bne.n	8002b46 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2b80      	cmp	r3, #128	; 0x80
 8002b32:	d919      	bls.n	8002b68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2ba0      	cmp	r3, #160	; 0xa0
 8002b38:	d902      	bls.n	8002b40 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	613b      	str	r3, [r7, #16]
 8002b3e:	e013      	b.n	8002b68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b40:	2301      	movs	r3, #1
 8002b42:	613b      	str	r3, [r7, #16]
 8002b44:	e010      	b.n	8002b68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2b80      	cmp	r3, #128	; 0x80
 8002b4a:	d902      	bls.n	8002b52 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	613b      	str	r3, [r7, #16]
 8002b50:	e00a      	b.n	8002b68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2b80      	cmp	r3, #128	; 0x80
 8002b56:	d102      	bne.n	8002b5e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b58:	2302      	movs	r3, #2
 8002b5a:	613b      	str	r3, [r7, #16]
 8002b5c:	e004      	b.n	8002b68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2b70      	cmp	r3, #112	; 0x70
 8002b62:	d101      	bne.n	8002b68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b64:	2301      	movs	r3, #1
 8002b66:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002b68:	4b0b      	ldr	r3, [pc, #44]	; (8002b98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f023 0207 	bic.w	r2, r3, #7
 8002b70:	4909      	ldr	r1, [pc, #36]	; (8002b98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002b78:	4b07      	ldr	r3, [pc, #28]	; (8002b98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0307 	and.w	r3, r3, #7
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d001      	beq.n	8002b8a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e000      	b.n	8002b8c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3718      	adds	r7, #24
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	40021000 	.word	0x40021000
 8002b98:	40022000 	.word	0x40022000

08002b9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ba8:	2300      	movs	r3, #0
 8002baa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d031      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bbc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002bc0:	d01a      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002bc2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002bc6:	d814      	bhi.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d009      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002bcc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002bd0:	d10f      	bne.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002bd2:	4b5d      	ldr	r3, [pc, #372]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	4a5c      	ldr	r2, [pc, #368]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bdc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002bde:	e00c      	b.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3304      	adds	r3, #4
 8002be4:	2100      	movs	r1, #0
 8002be6:	4618      	mov	r0, r3
 8002be8:	f000 f9de 	bl	8002fa8 <RCCEx_PLLSAI1_Config>
 8002bec:	4603      	mov	r3, r0
 8002bee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002bf0:	e003      	b.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	74fb      	strb	r3, [r7, #19]
      break;
 8002bf6:	e000      	b.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002bf8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bfa:	7cfb      	ldrb	r3, [r7, #19]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d10b      	bne.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c00:	4b51      	ldr	r3, [pc, #324]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c06:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c0e:	494e      	ldr	r1, [pc, #312]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002c16:	e001      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c18:	7cfb      	ldrb	r3, [r7, #19]
 8002c1a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f000 809e 	beq.w	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c2e:	4b46      	ldr	r3, [pc, #280]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e000      	b.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002c3e:	2300      	movs	r3, #0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d00d      	beq.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c44:	4b40      	ldr	r3, [pc, #256]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c48:	4a3f      	ldr	r2, [pc, #252]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c4e:	6593      	str	r3, [r2, #88]	; 0x58
 8002c50:	4b3d      	ldr	r3, [pc, #244]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c58:	60bb      	str	r3, [r7, #8]
 8002c5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c60:	4b3a      	ldr	r3, [pc, #232]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a39      	ldr	r2, [pc, #228]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002c66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c6a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c6c:	f7fe fd8e 	bl	800178c <HAL_GetTick>
 8002c70:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c72:	e009      	b.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c74:	f7fe fd8a 	bl	800178c <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d902      	bls.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	74fb      	strb	r3, [r7, #19]
        break;
 8002c86:	e005      	b.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c88:	4b30      	ldr	r3, [pc, #192]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d0ef      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002c94:	7cfb      	ldrb	r3, [r7, #19]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d15a      	bne.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c9a:	4b2b      	ldr	r3, [pc, #172]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ca0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ca4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d01e      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cb0:	697a      	ldr	r2, [r7, #20]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d019      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002cb6:	4b24      	ldr	r3, [pc, #144]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cc0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002cc2:	4b21      	ldr	r3, [pc, #132]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc8:	4a1f      	ldr	r2, [pc, #124]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cd2:	4b1d      	ldr	r3, [pc, #116]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd8:	4a1b      	ldr	r2, [pc, #108]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ce2:	4a19      	ldr	r2, [pc, #100]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	f003 0301 	and.w	r3, r3, #1
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d016      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf4:	f7fe fd4a 	bl	800178c <HAL_GetTick>
 8002cf8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cfa:	e00b      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cfc:	f7fe fd46 	bl	800178c <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d902      	bls.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	74fb      	strb	r3, [r7, #19]
            break;
 8002d12:	e006      	b.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d14:	4b0c      	ldr	r3, [pc, #48]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d0ec      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002d22:	7cfb      	ldrb	r3, [r7, #19]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d10b      	bne.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d28:	4b07      	ldr	r3, [pc, #28]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d2e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d36:	4904      	ldr	r1, [pc, #16]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002d3e:	e009      	b.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d40:	7cfb      	ldrb	r3, [r7, #19]
 8002d42:	74bb      	strb	r3, [r7, #18]
 8002d44:	e006      	b.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002d46:	bf00      	nop
 8002d48:	40021000 	.word	0x40021000
 8002d4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d50:	7cfb      	ldrb	r3, [r7, #19]
 8002d52:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d54:	7c7b      	ldrb	r3, [r7, #17]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d105      	bne.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d5a:	4b8a      	ldr	r3, [pc, #552]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d5e:	4a89      	ldr	r2, [pc, #548]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d64:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00a      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d72:	4b84      	ldr	r3, [pc, #528]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d78:	f023 0203 	bic.w	r2, r3, #3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a1b      	ldr	r3, [r3, #32]
 8002d80:	4980      	ldr	r1, [pc, #512]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0302 	and.w	r3, r3, #2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00a      	beq.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d94:	4b7b      	ldr	r3, [pc, #492]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d9a:	f023 020c 	bic.w	r2, r3, #12
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da2:	4978      	ldr	r1, [pc, #480]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0320 	and.w	r3, r3, #32
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d00a      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002db6:	4b73      	ldr	r3, [pc, #460]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dbc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc4:	496f      	ldr	r1, [pc, #444]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d00a      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002dd8:	4b6a      	ldr	r3, [pc, #424]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dde:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002de6:	4967      	ldr	r1, [pc, #412]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00a      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002dfa:	4b62      	ldr	r3, [pc, #392]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e00:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e08:	495e      	ldr	r1, [pc, #376]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d00a      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e1c:	4b59      	ldr	r3, [pc, #356]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e22:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2a:	4956      	ldr	r1, [pc, #344]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00a      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e3e:	4b51      	ldr	r3, [pc, #324]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4c:	494d      	ldr	r1, [pc, #308]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d028      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e60:	4b48      	ldr	r3, [pc, #288]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e66:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	4945      	ldr	r1, [pc, #276]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e7e:	d106      	bne.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e80:	4b40      	ldr	r3, [pc, #256]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	4a3f      	ldr	r2, [pc, #252]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e8a:	60d3      	str	r3, [r2, #12]
 8002e8c:	e011      	b.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e92:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e96:	d10c      	bne.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	3304      	adds	r3, #4
 8002e9c:	2101      	movs	r1, #1
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f000 f882 	bl	8002fa8 <RCCEx_PLLSAI1_Config>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002ea8:	7cfb      	ldrb	r3, [r7, #19]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002eae:	7cfb      	ldrb	r3, [r7, #19]
 8002eb0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d028      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ebe:	4b31      	ldr	r3, [pc, #196]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ecc:	492d      	ldr	r1, [pc, #180]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002edc:	d106      	bne.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ede:	4b29      	ldr	r3, [pc, #164]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	4a28      	ldr	r2, [pc, #160]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ee4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ee8:	60d3      	str	r3, [r2, #12]
 8002eea:	e011      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ef4:	d10c      	bne.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	3304      	adds	r3, #4
 8002efa:	2101      	movs	r1, #1
 8002efc:	4618      	mov	r0, r3
 8002efe:	f000 f853 	bl	8002fa8 <RCCEx_PLLSAI1_Config>
 8002f02:	4603      	mov	r3, r0
 8002f04:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f06:	7cfb      	ldrb	r3, [r7, #19]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d001      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002f0c:	7cfb      	ldrb	r3, [r7, #19]
 8002f0e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d01c      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f1c:	4b19      	ldr	r3, [pc, #100]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f22:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f2a:	4916      	ldr	r1, [pc, #88]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f3a:	d10c      	bne.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	3304      	adds	r3, #4
 8002f40:	2102      	movs	r1, #2
 8002f42:	4618      	mov	r0, r3
 8002f44:	f000 f830 	bl	8002fa8 <RCCEx_PLLSAI1_Config>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f4c:	7cfb      	ldrb	r3, [r7, #19]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002f52:	7cfb      	ldrb	r3, [r7, #19]
 8002f54:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00a      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002f62:	4b08      	ldr	r3, [pc, #32]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f68:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f70:	4904      	ldr	r1, [pc, #16]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002f78:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3718      	adds	r7, #24
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	40021000 	.word	0x40021000

08002f88 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002f8c:	4b05      	ldr	r3, [pc, #20]	; (8002fa4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a04      	ldr	r2, [pc, #16]	; (8002fa4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002f92:	f043 0304 	orr.w	r3, r3, #4
 8002f96:	6013      	str	r3, [r2, #0]
}
 8002f98:	bf00      	nop
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	40021000 	.word	0x40021000

08002fa8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002fb6:	4b74      	ldr	r3, [pc, #464]	; (8003188 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	f003 0303 	and.w	r3, r3, #3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d018      	beq.n	8002ff4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002fc2:	4b71      	ldr	r3, [pc, #452]	; (8003188 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	f003 0203 	and.w	r2, r3, #3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d10d      	bne.n	8002fee <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
       ||
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d009      	beq.n	8002fee <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002fda:	4b6b      	ldr	r3, [pc, #428]	; (8003188 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	091b      	lsrs	r3, r3, #4
 8002fe0:	f003 0307 	and.w	r3, r3, #7
 8002fe4:	1c5a      	adds	r2, r3, #1
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
       ||
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d047      	beq.n	800307e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	73fb      	strb	r3, [r7, #15]
 8002ff2:	e044      	b.n	800307e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2b03      	cmp	r3, #3
 8002ffa:	d018      	beq.n	800302e <RCCEx_PLLSAI1_Config+0x86>
 8002ffc:	2b03      	cmp	r3, #3
 8002ffe:	d825      	bhi.n	800304c <RCCEx_PLLSAI1_Config+0xa4>
 8003000:	2b01      	cmp	r3, #1
 8003002:	d002      	beq.n	800300a <RCCEx_PLLSAI1_Config+0x62>
 8003004:	2b02      	cmp	r3, #2
 8003006:	d009      	beq.n	800301c <RCCEx_PLLSAI1_Config+0x74>
 8003008:	e020      	b.n	800304c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800300a:	4b5f      	ldr	r3, [pc, #380]	; (8003188 <RCCEx_PLLSAI1_Config+0x1e0>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d11d      	bne.n	8003052 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800301a:	e01a      	b.n	8003052 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800301c:	4b5a      	ldr	r3, [pc, #360]	; (8003188 <RCCEx_PLLSAI1_Config+0x1e0>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003024:	2b00      	cmp	r3, #0
 8003026:	d116      	bne.n	8003056 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800302c:	e013      	b.n	8003056 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800302e:	4b56      	ldr	r3, [pc, #344]	; (8003188 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d10f      	bne.n	800305a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800303a:	4b53      	ldr	r3, [pc, #332]	; (8003188 <RCCEx_PLLSAI1_Config+0x1e0>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d109      	bne.n	800305a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800304a:	e006      	b.n	800305a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	73fb      	strb	r3, [r7, #15]
      break;
 8003050:	e004      	b.n	800305c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003052:	bf00      	nop
 8003054:	e002      	b.n	800305c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003056:	bf00      	nop
 8003058:	e000      	b.n	800305c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800305a:	bf00      	nop
    }

    if(status == HAL_OK)
 800305c:	7bfb      	ldrb	r3, [r7, #15]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d10d      	bne.n	800307e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003062:	4b49      	ldr	r3, [pc, #292]	; (8003188 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6819      	ldr	r1, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	3b01      	subs	r3, #1
 8003074:	011b      	lsls	r3, r3, #4
 8003076:	430b      	orrs	r3, r1
 8003078:	4943      	ldr	r1, [pc, #268]	; (8003188 <RCCEx_PLLSAI1_Config+0x1e0>)
 800307a:	4313      	orrs	r3, r2
 800307c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800307e:	7bfb      	ldrb	r3, [r7, #15]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d17c      	bne.n	800317e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003084:	4b40      	ldr	r3, [pc, #256]	; (8003188 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a3f      	ldr	r2, [pc, #252]	; (8003188 <RCCEx_PLLSAI1_Config+0x1e0>)
 800308a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800308e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003090:	f7fe fb7c 	bl	800178c <HAL_GetTick>
 8003094:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003096:	e009      	b.n	80030ac <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003098:	f7fe fb78 	bl	800178c <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d902      	bls.n	80030ac <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	73fb      	strb	r3, [r7, #15]
        break;
 80030aa:	e005      	b.n	80030b8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80030ac:	4b36      	ldr	r3, [pc, #216]	; (8003188 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1ef      	bne.n	8003098 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80030b8:	7bfb      	ldrb	r3, [r7, #15]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d15f      	bne.n	800317e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d110      	bne.n	80030e6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030c4:	4b30      	ldr	r3, [pc, #192]	; (8003188 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030c6:	691b      	ldr	r3, [r3, #16]
 80030c8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80030cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	6892      	ldr	r2, [r2, #8]
 80030d4:	0211      	lsls	r1, r2, #8
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	68d2      	ldr	r2, [r2, #12]
 80030da:	06d2      	lsls	r2, r2, #27
 80030dc:	430a      	orrs	r2, r1
 80030de:	492a      	ldr	r1, [pc, #168]	; (8003188 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	610b      	str	r3, [r1, #16]
 80030e4:	e027      	b.n	8003136 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d112      	bne.n	8003112 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030ec:	4b26      	ldr	r3, [pc, #152]	; (8003188 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80030f4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	6892      	ldr	r2, [r2, #8]
 80030fc:	0211      	lsls	r1, r2, #8
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	6912      	ldr	r2, [r2, #16]
 8003102:	0852      	lsrs	r2, r2, #1
 8003104:	3a01      	subs	r2, #1
 8003106:	0552      	lsls	r2, r2, #21
 8003108:	430a      	orrs	r2, r1
 800310a:	491f      	ldr	r1, [pc, #124]	; (8003188 <RCCEx_PLLSAI1_Config+0x1e0>)
 800310c:	4313      	orrs	r3, r2
 800310e:	610b      	str	r3, [r1, #16]
 8003110:	e011      	b.n	8003136 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003112:	4b1d      	ldr	r3, [pc, #116]	; (8003188 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800311a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	6892      	ldr	r2, [r2, #8]
 8003122:	0211      	lsls	r1, r2, #8
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	6952      	ldr	r2, [r2, #20]
 8003128:	0852      	lsrs	r2, r2, #1
 800312a:	3a01      	subs	r2, #1
 800312c:	0652      	lsls	r2, r2, #25
 800312e:	430a      	orrs	r2, r1
 8003130:	4915      	ldr	r1, [pc, #84]	; (8003188 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003132:	4313      	orrs	r3, r2
 8003134:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003136:	4b14      	ldr	r3, [pc, #80]	; (8003188 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a13      	ldr	r2, [pc, #76]	; (8003188 <RCCEx_PLLSAI1_Config+0x1e0>)
 800313c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003140:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003142:	f7fe fb23 	bl	800178c <HAL_GetTick>
 8003146:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003148:	e009      	b.n	800315e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800314a:	f7fe fb1f 	bl	800178c <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	2b02      	cmp	r3, #2
 8003156:	d902      	bls.n	800315e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	73fb      	strb	r3, [r7, #15]
          break;
 800315c:	e005      	b.n	800316a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800315e:	4b0a      	ldr	r3, [pc, #40]	; (8003188 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d0ef      	beq.n	800314a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800316a:	7bfb      	ldrb	r3, [r7, #15]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d106      	bne.n	800317e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003170:	4b05      	ldr	r3, [pc, #20]	; (8003188 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003172:	691a      	ldr	r2, [r3, #16]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	4903      	ldr	r1, [pc, #12]	; (8003188 <RCCEx_PLLSAI1_Config+0x1e0>)
 800317a:	4313      	orrs	r3, r2
 800317c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800317e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003180:	4618      	mov	r0, r3
 8003182:	3710      	adds	r7, #16
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	40021000 	.word	0x40021000

0800318c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d079      	beq.n	8003292 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d106      	bne.n	80031b8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f7fe f8f4 	bl	80013a0 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2202      	movs	r2, #2
 80031bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	f003 0310 	and.w	r3, r3, #16
 80031ca:	2b10      	cmp	r3, #16
 80031cc:	d058      	beq.n	8003280 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	22ca      	movs	r2, #202	; 0xca
 80031d4:	625a      	str	r2, [r3, #36]	; 0x24
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2253      	movs	r2, #83	; 0x53
 80031dc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 fbda 	bl	8003998 <RTC_EnterInitMode>
 80031e4:	4603      	mov	r3, r0
 80031e6:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80031e8:	7bfb      	ldrb	r3, [r7, #15]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d127      	bne.n	800323e <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	6812      	ldr	r2, [r2, #0]
 80031f8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80031fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003200:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	6899      	ldr	r1, [r3, #8]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	691b      	ldr	r3, [r3, #16]
 8003210:	431a      	orrs	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	431a      	orrs	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	430a      	orrs	r2, r1
 800321e:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	68d2      	ldr	r2, [r2, #12]
 8003228:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	6919      	ldr	r1, [r3, #16]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	041a      	lsls	r2, r3, #16
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	430a      	orrs	r2, r1
 800323c:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 fbde 	bl	8003a00 <RTC_ExitInitMode>
 8003244:	4603      	mov	r3, r0
 8003246:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003248:	7bfb      	ldrb	r3, [r7, #15]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d113      	bne.n	8003276 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f022 0203 	bic.w	r2, r2, #3
 800325c:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	69da      	ldr	r2, [r3, #28]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	695b      	ldr	r3, [r3, #20]
 800326c:	431a      	orrs	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	430a      	orrs	r2, r1
 8003274:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	22ff      	movs	r2, #255	; 0xff
 800327c:	625a      	str	r2, [r3, #36]	; 0x24
 800327e:	e001      	b.n	8003284 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8003280:	2300      	movs	r3, #0
 8003282:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003284:	7bfb      	ldrb	r3, [r7, #15]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d103      	bne.n	8003292 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2201      	movs	r2, #1
 800328e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 8003292:	7bfb      	ldrb	r3, [r7, #15]
}
 8003294:	4618      	mov	r0, r3
 8003296:	3710      	adds	r7, #16
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800329c:	b590      	push	{r4, r7, lr}
 800329e:	b087      	sub	sp, #28
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d101      	bne.n	80032b6 <HAL_RTC_SetTime+0x1a>
 80032b2:	2302      	movs	r3, #2
 80032b4:	e08b      	b.n	80033ce <HAL_RTC_SetTime+0x132>
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2201      	movs	r2, #1
 80032ba:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2202      	movs	r2, #2
 80032c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	22ca      	movs	r2, #202	; 0xca
 80032cc:	625a      	str	r2, [r3, #36]	; 0x24
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2253      	movs	r2, #83	; 0x53
 80032d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f000 fb5e 	bl	8003998 <RTC_EnterInitMode>
 80032dc:	4603      	mov	r3, r0
 80032de:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80032e0:	7cfb      	ldrb	r3, [r7, #19]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d163      	bne.n	80033ae <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d126      	bne.n	800333a <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d102      	bne.n	8003300 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	2200      	movs	r2, #0
 80032fe:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	4618      	mov	r0, r3
 8003306:	f000 fbb9 	bl	8003a7c <RTC_ByteToBcd2>
 800330a:	4603      	mov	r3, r0
 800330c:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	785b      	ldrb	r3, [r3, #1]
 8003312:	4618      	mov	r0, r3
 8003314:	f000 fbb2 	bl	8003a7c <RTC_ByteToBcd2>
 8003318:	4603      	mov	r3, r0
 800331a:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800331c:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	789b      	ldrb	r3, [r3, #2]
 8003322:	4618      	mov	r0, r3
 8003324:	f000 fbaa 	bl	8003a7c <RTC_ByteToBcd2>
 8003328:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800332a:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	78db      	ldrb	r3, [r3, #3]
 8003332:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003334:	4313      	orrs	r3, r2
 8003336:	617b      	str	r3, [r7, #20]
 8003338:	e018      	b.n	800336c <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003344:	2b00      	cmp	r3, #0
 8003346:	d102      	bne.n	800334e <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	2200      	movs	r2, #0
 800334c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	785b      	ldrb	r3, [r3, #1]
 8003358:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800335a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800335c:	68ba      	ldr	r2, [r7, #8]
 800335e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003360:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	78db      	ldrb	r3, [r3, #3]
 8003366:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003368:	4313      	orrs	r3, r2
 800336a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003376:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800337a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689a      	ldr	r2, [r3, #8]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800338a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6899      	ldr	r1, [r3, #8]
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	68da      	ldr	r2, [r3, #12]
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	431a      	orrs	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	430a      	orrs	r2, r1
 80033a2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80033a4:	68f8      	ldr	r0, [r7, #12]
 80033a6:	f000 fb2b 	bl	8003a00 <RTC_ExitInitMode>
 80033aa:	4603      	mov	r3, r0
 80033ac:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	22ff      	movs	r2, #255	; 0xff
 80033b4:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80033b6:	7cfb      	ldrb	r3, [r7, #19]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d103      	bne.n	80033c4 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80033cc:	7cfb      	ldrb	r3, [r7, #19]
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	371c      	adds	r7, #28
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd90      	pop	{r4, r7, pc}

080033d6 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80033d6:	b580      	push	{r7, lr}
 80033d8:	b086      	sub	sp, #24
 80033da:	af00      	add	r7, sp, #0
 80033dc:	60f8      	str	r0, [r7, #12]
 80033de:	60b9      	str	r1, [r7, #8]
 80033e0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003404:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003408:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	0c1b      	lsrs	r3, r3, #16
 800340e:	b2db      	uxtb	r3, r3
 8003410:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003414:	b2da      	uxtb	r2, r3
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	0a1b      	lsrs	r3, r3, #8
 800341e:	b2db      	uxtb	r3, r3
 8003420:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003424:	b2da      	uxtb	r2, r3
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	b2db      	uxtb	r3, r3
 800342e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003432:	b2da      	uxtb	r2, r3
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	0d9b      	lsrs	r3, r3, #22
 800343c:	b2db      	uxtb	r3, r3
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	b2da      	uxtb	r2, r3
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d11a      	bne.n	8003484 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	4618      	mov	r0, r3
 8003454:	f000 fb32 	bl	8003abc <RTC_Bcd2ToByte>
 8003458:	4603      	mov	r3, r0
 800345a:	461a      	mov	r2, r3
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	785b      	ldrb	r3, [r3, #1]
 8003464:	4618      	mov	r0, r3
 8003466:	f000 fb29 	bl	8003abc <RTC_Bcd2ToByte>
 800346a:	4603      	mov	r3, r0
 800346c:	461a      	mov	r2, r3
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	789b      	ldrb	r3, [r3, #2]
 8003476:	4618      	mov	r0, r3
 8003478:	f000 fb20 	bl	8003abc <RTC_Bcd2ToByte>
 800347c:	4603      	mov	r3, r0
 800347e:	461a      	mov	r2, r3
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3718      	adds	r7, #24
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800348e:	b590      	push	{r4, r7, lr}
 8003490:	b087      	sub	sp, #28
 8003492:	af00      	add	r7, sp, #0
 8003494:	60f8      	str	r0, [r7, #12]
 8003496:	60b9      	str	r1, [r7, #8]
 8003498:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d101      	bne.n	80034a8 <HAL_RTC_SetDate+0x1a>
 80034a4:	2302      	movs	r3, #2
 80034a6:	e075      	b.n	8003594 <HAL_RTC_SetDate+0x106>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2202      	movs	r2, #2
 80034b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d10e      	bne.n	80034dc <HAL_RTC_SetDate+0x4e>
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	785b      	ldrb	r3, [r3, #1]
 80034c2:	f003 0310 	and.w	r3, r3, #16
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d008      	beq.n	80034dc <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	785b      	ldrb	r3, [r3, #1]
 80034ce:	f023 0310 	bic.w	r3, r3, #16
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	330a      	adds	r3, #10
 80034d6:	b2da      	uxtb	r2, r3
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d11c      	bne.n	800351c <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	78db      	ldrb	r3, [r3, #3]
 80034e6:	4618      	mov	r0, r3
 80034e8:	f000 fac8 	bl	8003a7c <RTC_ByteToBcd2>
 80034ec:	4603      	mov	r3, r0
 80034ee:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	785b      	ldrb	r3, [r3, #1]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f000 fac1 	bl	8003a7c <RTC_ByteToBcd2>
 80034fa:	4603      	mov	r3, r0
 80034fc:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80034fe:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	789b      	ldrb	r3, [r3, #2]
 8003504:	4618      	mov	r0, r3
 8003506:	f000 fab9 	bl	8003a7c <RTC_ByteToBcd2>
 800350a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800350c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003516:	4313      	orrs	r3, r2
 8003518:	617b      	str	r3, [r7, #20]
 800351a:	e00e      	b.n	800353a <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	78db      	ldrb	r3, [r3, #3]
 8003520:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	785b      	ldrb	r3, [r3, #1]
 8003526:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003528:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800352a:	68ba      	ldr	r2, [r7, #8]
 800352c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800352e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003536:	4313      	orrs	r3, r2
 8003538:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	22ca      	movs	r2, #202	; 0xca
 8003540:	625a      	str	r2, [r3, #36]	; 0x24
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2253      	movs	r2, #83	; 0x53
 8003548:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f000 fa24 	bl	8003998 <RTC_EnterInitMode>
 8003550:	4603      	mov	r3, r0
 8003552:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003554:	7cfb      	ldrb	r3, [r7, #19]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d10c      	bne.n	8003574 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003564:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003568:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	f000 fa48 	bl	8003a00 <RTC_ExitInitMode>
 8003570:	4603      	mov	r3, r0
 8003572:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	22ff      	movs	r2, #255	; 0xff
 800357a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800357c:	7cfb      	ldrb	r3, [r7, #19]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d103      	bne.n	800358a <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2201      	movs	r2, #1
 8003586:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8003592:	7cfb      	ldrb	r3, [r7, #19]
}
 8003594:	4618      	mov	r0, r3
 8003596:	371c      	adds	r7, #28
 8003598:	46bd      	mov	sp, r7
 800359a:	bd90      	pop	{r4, r7, pc}

0800359c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b086      	sub	sp, #24
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80035b2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80035b6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	0c1b      	lsrs	r3, r3, #16
 80035bc:	b2da      	uxtb	r2, r3
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	0a1b      	lsrs	r3, r3, #8
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	f003 031f 	and.w	r3, r3, #31
 80035cc:	b2da      	uxtb	r2, r3
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035da:	b2da      	uxtb	r2, r3
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	0b5b      	lsrs	r3, r3, #13
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	f003 0307 	and.w	r3, r3, #7
 80035ea:	b2da      	uxtb	r2, r3
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d11a      	bne.n	800362c <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	78db      	ldrb	r3, [r3, #3]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f000 fa5e 	bl	8003abc <RTC_Bcd2ToByte>
 8003600:	4603      	mov	r3, r0
 8003602:	461a      	mov	r2, r3
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	785b      	ldrb	r3, [r3, #1]
 800360c:	4618      	mov	r0, r3
 800360e:	f000 fa55 	bl	8003abc <RTC_Bcd2ToByte>
 8003612:	4603      	mov	r3, r0
 8003614:	461a      	mov	r2, r3
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	789b      	ldrb	r3, [r3, #2]
 800361e:	4618      	mov	r0, r3
 8003620:	f000 fa4c 	bl	8003abc <RTC_Bcd2ToByte>
 8003624:	4603      	mov	r3, r0
 8003626:	461a      	mov	r2, r3
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3718      	adds	r7, #24
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
	...

08003638 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003638:	b590      	push	{r4, r7, lr}
 800363a:	b089      	sub	sp, #36	; 0x24
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f893 3020 	ldrb.w	r3, [r3, #32]
 800364a:	2b01      	cmp	r3, #1
 800364c:	d101      	bne.n	8003652 <HAL_RTC_SetAlarm_IT+0x1a>
 800364e:	2302      	movs	r3, #2
 8003650:	e127      	b.n	80038a2 <HAL_RTC_SetAlarm_IT+0x26a>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2201      	movs	r2, #1
 8003656:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2202      	movs	r2, #2
 800365e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d137      	bne.n	80036d8 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003672:	2b00      	cmp	r3, #0
 8003674:	d102      	bne.n	800367c <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	2200      	movs	r2, #0
 800367a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	4618      	mov	r0, r3
 8003682:	f000 f9fb 	bl	8003a7c <RTC_ByteToBcd2>
 8003686:	4603      	mov	r3, r0
 8003688:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	785b      	ldrb	r3, [r3, #1]
 800368e:	4618      	mov	r0, r3
 8003690:	f000 f9f4 	bl	8003a7c <RTC_ByteToBcd2>
 8003694:	4603      	mov	r3, r0
 8003696:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003698:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	789b      	ldrb	r3, [r3, #2]
 800369e:	4618      	mov	r0, r3
 80036a0:	f000 f9ec 	bl	8003a7c <RTC_ByteToBcd2>
 80036a4:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80036a6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	78db      	ldrb	r3, [r3, #3]
 80036ae:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80036b0:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80036ba:	4618      	mov	r0, r3
 80036bc:	f000 f9de 	bl	8003a7c <RTC_ByteToBcd2>
 80036c0:	4603      	mov	r3, r0
 80036c2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80036c4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80036cc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80036d2:	4313      	orrs	r3, r2
 80036d4:	61fb      	str	r3, [r7, #28]
 80036d6:	e023      	b.n	8003720 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d102      	bne.n	80036ec <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	2200      	movs	r2, #0
 80036ea:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	785b      	ldrb	r3, [r3, #1]
 80036f6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80036f8:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80036fa:	68ba      	ldr	r2, [r7, #8]
 80036fc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80036fe:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	78db      	ldrb	r3, [r3, #3]
 8003704:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003706:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800370e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003710:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003716:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800371c:	4313      	orrs	r3, r2
 800371e:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	685a      	ldr	r2, [r3, #4]
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	69db      	ldr	r3, [r3, #28]
 8003728:	4313      	orrs	r3, r2
 800372a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	22ca      	movs	r2, #202	; 0xca
 8003732:	625a      	str	r2, [r3, #36]	; 0x24
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2253      	movs	r2, #83	; 0x53
 800373a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003740:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003744:	d14a      	bne.n	80037dc <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	689a      	ldr	r2, [r3, #8]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003754:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	b2da      	uxtb	r2, r3
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8003766:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 8003768:	f7fe f810 	bl	800178c <HAL_GetTick>
 800376c:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800376e:	e015      	b.n	800379c <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003770:	f7fe f80c 	bl	800178c <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800377e:	d90d      	bls.n	800379c <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	22ff      	movs	r2, #255	; 0xff
 8003786:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2203      	movs	r2, #3
 800378c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e082      	b.n	80038a2 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d0e2      	beq.n	8003770 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	69fa      	ldr	r2, [r7, #28]
 80037b0:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	69ba      	ldr	r2, [r7, #24]
 80037b8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	689a      	ldr	r2, [r3, #8]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037c8:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	689a      	ldr	r2, [r3, #8]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80037d8:	609a      	str	r2, [r3, #8]
 80037da:	e049      	b.n	8003870 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689a      	ldr	r2, [r3, #8]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80037ea:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	b2da      	uxtb	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f462 7220 	orn	r2, r2, #640	; 0x280
 80037fc:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 80037fe:	f7fd ffc5 	bl	800178c <HAL_GetTick>
 8003802:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003804:	e015      	b.n	8003832 <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003806:	f7fd ffc1 	bl	800178c <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003814:	d90d      	bls.n	8003832 <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	22ff      	movs	r2, #255	; 0xff
 800381c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2203      	movs	r2, #3
 8003822:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e037      	b.n	80038a2 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d0e2      	beq.n	8003806 <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	69fa      	ldr	r2, [r7, #28]
 8003846:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	689a      	ldr	r2, [r3, #8]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800385e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	689a      	ldr	r2, [r3, #8]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800386e:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003870:	4b0e      	ldr	r3, [pc, #56]	; (80038ac <HAL_RTC_SetAlarm_IT+0x274>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a0d      	ldr	r2, [pc, #52]	; (80038ac <HAL_RTC_SetAlarm_IT+0x274>)
 8003876:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800387a:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800387c:	4b0b      	ldr	r3, [pc, #44]	; (80038ac <HAL_RTC_SetAlarm_IT+0x274>)
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	4a0a      	ldr	r2, [pc, #40]	; (80038ac <HAL_RTC_SetAlarm_IT+0x274>)
 8003882:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003886:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	22ff      	movs	r2, #255	; 0xff
 800388e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3724      	adds	r7, #36	; 0x24
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd90      	pop	{r4, r7, pc}
 80038aa:	bf00      	nop
 80038ac:	40010400 	.word	0x40010400

080038b0 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80038b8:	4b1f      	ldr	r3, [pc, #124]	; (8003938 <HAL_RTC_AlarmIRQHandler+0x88>)
 80038ba:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80038be:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d012      	beq.n	80038f4 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00b      	beq.n	80038f4 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	b2da      	uxtb	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80038ec:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 f824 	bl	800393c <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d012      	beq.n	8003928 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00b      	beq.n	8003928 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	b2da      	uxtb	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f462 7220 	orn	r2, r2, #640	; 0x280
 8003920:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 f8e4 	bl	8003af0 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8003930:	bf00      	nop
 8003932:	3708      	adds	r7, #8
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	40010400 	.word	0x40010400

0800393c <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8003944:	bf00      	nop
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a0d      	ldr	r2, [pc, #52]	; (8003994 <HAL_RTC_WaitForSynchro+0x44>)
 800395e:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8003960:	f7fd ff14 	bl	800178c <HAL_GetTick>
 8003964:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003966:	e009      	b.n	800397c <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003968:	f7fd ff10 	bl	800178c <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003976:	d901      	bls.n	800397c <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e007      	b.n	800398c <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	f003 0320 	and.w	r3, r3, #32
 8003986:	2b00      	cmp	r3, #0
 8003988:	d0ee      	beq.n	8003968 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	3710      	adds	r7, #16
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	0003ff5f 	.word	0x0003ff5f

08003998 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039a0:	2300      	movs	r3, #0
 80039a2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d120      	bne.n	80039f4 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f04f 32ff 	mov.w	r2, #4294967295
 80039ba:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80039bc:	f7fd fee6 	bl	800178c <HAL_GetTick>
 80039c0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80039c2:	e00d      	b.n	80039e0 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80039c4:	f7fd fee2 	bl	800178c <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039d2:	d905      	bls.n	80039e0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2203      	movs	r2, #3
 80039dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d102      	bne.n	80039f4 <RTC_EnterInitMode+0x5c>
 80039ee:	7bfb      	ldrb	r3, [r7, #15]
 80039f0:	2b03      	cmp	r3, #3
 80039f2:	d1e7      	bne.n	80039c4 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80039f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
	...

08003a00 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8003a0c:	4b1a      	ldr	r3, [pc, #104]	; (8003a78 <RTC_ExitInitMode+0x78>)
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	4a19      	ldr	r2, [pc, #100]	; (8003a78 <RTC_ExitInitMode+0x78>)
 8003a12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a16:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003a18:	4b17      	ldr	r3, [pc, #92]	; (8003a78 <RTC_ExitInitMode+0x78>)
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f003 0320 	and.w	r3, r3, #32
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10c      	bne.n	8003a3e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f7ff ff93 	bl	8003950 <HAL_RTC_WaitForSynchro>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d01e      	beq.n	8003a6e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2203      	movs	r2, #3
 8003a34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	73fb      	strb	r3, [r7, #15]
 8003a3c:	e017      	b.n	8003a6e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003a3e:	4b0e      	ldr	r3, [pc, #56]	; (8003a78 <RTC_ExitInitMode+0x78>)
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	4a0d      	ldr	r2, [pc, #52]	; (8003a78 <RTC_ExitInitMode+0x78>)
 8003a44:	f023 0320 	bic.w	r3, r3, #32
 8003a48:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f7ff ff80 	bl	8003950 <HAL_RTC_WaitForSynchro>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d005      	beq.n	8003a62 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2203      	movs	r2, #3
 8003a5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003a62:	4b05      	ldr	r3, [pc, #20]	; (8003a78 <RTC_ExitInitMode+0x78>)
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	4a04      	ldr	r2, [pc, #16]	; (8003a78 <RTC_ExitInitMode+0x78>)
 8003a68:	f043 0320 	orr.w	r3, r3, #32
 8003a6c:	6093      	str	r3, [r2, #8]
  }

  return status;
 8003a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3710      	adds	r7, #16
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	40002800 	.word	0x40002800

08003a7c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b085      	sub	sp, #20
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	4603      	mov	r3, r0
 8003a84:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003a86:	2300      	movs	r3, #0
 8003a88:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8003a8a:	79fb      	ldrb	r3, [r7, #7]
 8003a8c:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8003a8e:	e005      	b.n	8003a9c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	3301      	adds	r3, #1
 8003a94:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8003a96:	7afb      	ldrb	r3, [r7, #11]
 8003a98:	3b0a      	subs	r3, #10
 8003a9a:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8003a9c:	7afb      	ldrb	r3, [r7, #11]
 8003a9e:	2b09      	cmp	r3, #9
 8003aa0:	d8f6      	bhi.n	8003a90 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	011b      	lsls	r3, r3, #4
 8003aa8:	b2da      	uxtb	r2, r3
 8003aaa:	7afb      	ldrb	r3, [r7, #11]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	b2db      	uxtb	r3, r3
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3714      	adds	r7, #20
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8003ac6:	79fb      	ldrb	r3, [r7, #7]
 8003ac8:	091b      	lsrs	r3, r3, #4
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	461a      	mov	r2, r3
 8003ace:	0092      	lsls	r2, r2, #2
 8003ad0:	4413      	add	r3, r2
 8003ad2:	005b      	lsls	r3, r3, #1
 8003ad4:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8003ad6:	79fb      	ldrb	r3, [r7, #7]
 8003ad8:	f003 030f 	and.w	r3, r3, #15
 8003adc:	b2da      	uxtb	r2, r3
 8003ade:	7bfb      	ldrb	r3, [r7, #15]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	b2db      	uxtb	r3, r3
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3714      	adds	r7, #20
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8003af8:	bf00      	nop
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e040      	b.n	8003b98 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d106      	bne.n	8003b2c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f7fd fc72 	bl	8001410 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2224      	movs	r2, #36	; 0x24
 8003b30:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f022 0201 	bic.w	r2, r2, #1
 8003b40:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d002      	beq.n	8003b50 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 feb2 	bl	80048b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 fc83 	bl	800445c <UART_SetConfig>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d101      	bne.n	8003b60 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e01b      	b.n	8003b98 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	685a      	ldr	r2, [r3, #4]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	689a      	ldr	r2, [r3, #8]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f042 0201 	orr.w	r2, r2, #1
 8003b8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 ff31 	bl	80049f8 <UART_CheckIdleState>
 8003b96:	4603      	mov	r3, r0
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3708      	adds	r7, #8
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b08a      	sub	sp, #40	; 0x28
 8003ba4:	af02      	add	r7, sp, #8
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	603b      	str	r3, [r7, #0]
 8003bac:	4613      	mov	r3, r2
 8003bae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bb4:	2b20      	cmp	r3, #32
 8003bb6:	d178      	bne.n	8003caa <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d002      	beq.n	8003bc4 <HAL_UART_Transmit+0x24>
 8003bbe:	88fb      	ldrh	r3, [r7, #6]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d101      	bne.n	8003bc8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e071      	b.n	8003cac <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2221      	movs	r2, #33	; 0x21
 8003bd4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003bd6:	f7fd fdd9 	bl	800178c <HAL_GetTick>
 8003bda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	88fa      	ldrh	r2, [r7, #6]
 8003be0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	88fa      	ldrh	r2, [r7, #6]
 8003be8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bf4:	d108      	bne.n	8003c08 <HAL_UART_Transmit+0x68>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d104      	bne.n	8003c08 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	61bb      	str	r3, [r7, #24]
 8003c06:	e003      	b.n	8003c10 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003c10:	e030      	b.n	8003c74 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	9300      	str	r3, [sp, #0]
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	2180      	movs	r1, #128	; 0x80
 8003c1c:	68f8      	ldr	r0, [r7, #12]
 8003c1e:	f000 ff93 	bl	8004b48 <UART_WaitOnFlagUntilTimeout>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d004      	beq.n	8003c32 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2220      	movs	r2, #32
 8003c2c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e03c      	b.n	8003cac <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d10b      	bne.n	8003c50 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	881a      	ldrh	r2, [r3, #0]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c44:	b292      	uxth	r2, r2
 8003c46:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	3302      	adds	r3, #2
 8003c4c:	61bb      	str	r3, [r7, #24]
 8003c4e:	e008      	b.n	8003c62 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	781a      	ldrb	r2, [r3, #0]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	b292      	uxth	r2, r2
 8003c5a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	3301      	adds	r3, #1
 8003c60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	b29a      	uxth	r2, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d1c8      	bne.n	8003c12 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	9300      	str	r3, [sp, #0]
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	2200      	movs	r2, #0
 8003c88:	2140      	movs	r1, #64	; 0x40
 8003c8a:	68f8      	ldr	r0, [r7, #12]
 8003c8c:	f000 ff5c 	bl	8004b48 <UART_WaitOnFlagUntilTimeout>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d004      	beq.n	8003ca0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2220      	movs	r2, #32
 8003c9a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e005      	b.n	8003cac <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2220      	movs	r2, #32
 8003ca4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	e000      	b.n	8003cac <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003caa:	2302      	movs	r3, #2
  }
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3720      	adds	r7, #32
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b08a      	sub	sp, #40	; 0x28
 8003cb8:	af02      	add	r7, sp, #8
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	603b      	str	r3, [r7, #0]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cca:	2b20      	cmp	r3, #32
 8003ccc:	f040 80b6 	bne.w	8003e3c <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d002      	beq.n	8003cdc <HAL_UART_Receive+0x28>
 8003cd6:	88fb      	ldrh	r3, [r7, #6]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d101      	bne.n	8003ce0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e0ae      	b.n	8003e3e <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2222      	movs	r2, #34	; 0x22
 8003cec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cf6:	f7fd fd49 	bl	800178c <HAL_GetTick>
 8003cfa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	88fa      	ldrh	r2, [r7, #6]
 8003d00:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	88fa      	ldrh	r2, [r7, #6]
 8003d08:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d14:	d10e      	bne.n	8003d34 <HAL_UART_Receive+0x80>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d105      	bne.n	8003d2a <HAL_UART_Receive+0x76>
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003d24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d28:	e02d      	b.n	8003d86 <HAL_UART_Receive+0xd2>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	22ff      	movs	r2, #255	; 0xff
 8003d2e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d32:	e028      	b.n	8003d86 <HAL_UART_Receive+0xd2>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d10d      	bne.n	8003d58 <HAL_UART_Receive+0xa4>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d104      	bne.n	8003d4e <HAL_UART_Receive+0x9a>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	22ff      	movs	r2, #255	; 0xff
 8003d48:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d4c:	e01b      	b.n	8003d86 <HAL_UART_Receive+0xd2>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	227f      	movs	r2, #127	; 0x7f
 8003d52:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d56:	e016      	b.n	8003d86 <HAL_UART_Receive+0xd2>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d60:	d10d      	bne.n	8003d7e <HAL_UART_Receive+0xca>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d104      	bne.n	8003d74 <HAL_UART_Receive+0xc0>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	227f      	movs	r2, #127	; 0x7f
 8003d6e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d72:	e008      	b.n	8003d86 <HAL_UART_Receive+0xd2>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	223f      	movs	r2, #63	; 0x3f
 8003d78:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d7c:	e003      	b.n	8003d86 <HAL_UART_Receive+0xd2>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003d8c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d96:	d108      	bne.n	8003daa <HAL_UART_Receive+0xf6>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	691b      	ldr	r3, [r3, #16]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d104      	bne.n	8003daa <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003da0:	2300      	movs	r3, #0
 8003da2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	61bb      	str	r3, [r7, #24]
 8003da8:	e003      	b.n	8003db2 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003dae:	2300      	movs	r3, #0
 8003db0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003db2:	e037      	b.n	8003e24 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	9300      	str	r3, [sp, #0]
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	2120      	movs	r1, #32
 8003dbe:	68f8      	ldr	r0, [r7, #12]
 8003dc0:	f000 fec2 	bl	8004b48 <UART_WaitOnFlagUntilTimeout>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d005      	beq.n	8003dd6 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2220      	movs	r2, #32
 8003dce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e033      	b.n	8003e3e <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d10c      	bne.n	8003df6 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003de2:	b29a      	uxth	r2, r3
 8003de4:	8a7b      	ldrh	r3, [r7, #18]
 8003de6:	4013      	ands	r3, r2
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	3302      	adds	r3, #2
 8003df2:	61bb      	str	r3, [r7, #24]
 8003df4:	e00d      	b.n	8003e12 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	b2da      	uxtb	r2, r3
 8003e00:	8a7b      	ldrh	r3, [r7, #18]
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	4013      	ands	r3, r2
 8003e06:	b2da      	uxtb	r2, r3
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	3301      	adds	r3, #1
 8003e10:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	b29a      	uxth	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1c1      	bne.n	8003db4 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2220      	movs	r2, #32
 8003e34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	e000      	b.n	8003e3e <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8003e3c:	2302      	movs	r3, #2
  }
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3720      	adds	r7, #32
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
	...

08003e48 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b0ba      	sub	sp, #232	; 0xe8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	69db      	ldr	r3, [r3, #28]
 8003e56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003e6e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003e72:	f640 030f 	movw	r3, #2063	; 0x80f
 8003e76:	4013      	ands	r3, r2
 8003e78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003e7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d115      	bne.n	8003eb0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003e84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e88:	f003 0320 	and.w	r3, r3, #32
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d00f      	beq.n	8003eb0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003e90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e94:	f003 0320 	and.w	r3, r3, #32
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d009      	beq.n	8003eb0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f000 82ae 	beq.w	8004402 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	4798      	blx	r3
      }
      return;
 8003eae:	e2a8      	b.n	8004402 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003eb0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	f000 8117 	beq.w	80040e8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003eba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ebe:	f003 0301 	and.w	r3, r3, #1
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d106      	bne.n	8003ed4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003ec6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003eca:	4b85      	ldr	r3, [pc, #532]	; (80040e0 <HAL_UART_IRQHandler+0x298>)
 8003ecc:	4013      	ands	r3, r2
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	f000 810a 	beq.w	80040e8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003ed4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ed8:	f003 0301 	and.w	r3, r3, #1
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d011      	beq.n	8003f04 <HAL_UART_IRQHandler+0xbc>
 8003ee0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00b      	beq.n	8003f04 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003efa:	f043 0201 	orr.w	r2, r3, #1
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f08:	f003 0302 	and.w	r3, r3, #2
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d011      	beq.n	8003f34 <HAL_UART_IRQHandler+0xec>
 8003f10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f14:	f003 0301 	and.w	r3, r3, #1
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00b      	beq.n	8003f34 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2202      	movs	r2, #2
 8003f22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f2a:	f043 0204 	orr.w	r2, r3, #4
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f38:	f003 0304 	and.w	r3, r3, #4
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d011      	beq.n	8003f64 <HAL_UART_IRQHandler+0x11c>
 8003f40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f44:	f003 0301 	and.w	r3, r3, #1
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d00b      	beq.n	8003f64 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2204      	movs	r2, #4
 8003f52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f5a:	f043 0202 	orr.w	r2, r3, #2
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003f64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f68:	f003 0308 	and.w	r3, r3, #8
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d017      	beq.n	8003fa0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003f70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f74:	f003 0320 	and.w	r3, r3, #32
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d105      	bne.n	8003f88 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003f7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f80:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00b      	beq.n	8003fa0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2208      	movs	r2, #8
 8003f8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f96:	f043 0208 	orr.w	r2, r3, #8
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003fa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d012      	beq.n	8003fd2 <HAL_UART_IRQHandler+0x18a>
 8003fac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fb0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d00c      	beq.n	8003fd2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fc0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fc8:	f043 0220 	orr.w	r2, r3, #32
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	f000 8214 	beq.w	8004406 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fe2:	f003 0320 	and.w	r3, r3, #32
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00d      	beq.n	8004006 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003fea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fee:	f003 0320 	and.w	r3, r3, #32
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d007      	beq.n	8004006 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d003      	beq.n	8004006 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800400c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800401a:	2b40      	cmp	r3, #64	; 0x40
 800401c:	d005      	beq.n	800402a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800401e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004022:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004026:	2b00      	cmp	r3, #0
 8004028:	d04f      	beq.n	80040ca <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 fdf3 	bl	8004c16 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800403a:	2b40      	cmp	r3, #64	; 0x40
 800403c:	d141      	bne.n	80040c2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	3308      	adds	r3, #8
 8004044:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004048:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800404c:	e853 3f00 	ldrex	r3, [r3]
 8004050:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004054:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004058:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800405c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	3308      	adds	r3, #8
 8004066:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800406a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800406e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004072:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004076:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800407a:	e841 2300 	strex	r3, r2, [r1]
 800407e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004082:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1d9      	bne.n	800403e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800408e:	2b00      	cmp	r3, #0
 8004090:	d013      	beq.n	80040ba <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004096:	4a13      	ldr	r2, [pc, #76]	; (80040e4 <HAL_UART_IRQHandler+0x29c>)
 8004098:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800409e:	4618      	mov	r0, r3
 80040a0:	f7fd fcf3 	bl	8001a8a <HAL_DMA_Abort_IT>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d017      	beq.n	80040da <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80040b4:	4610      	mov	r0, r2
 80040b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040b8:	e00f      	b.n	80040da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 f9b8 	bl	8004430 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040c0:	e00b      	b.n	80040da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 f9b4 	bl	8004430 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040c8:	e007      	b.n	80040da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 f9b0 	bl	8004430 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80040d8:	e195      	b.n	8004406 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040da:	bf00      	nop
    return;
 80040dc:	e193      	b.n	8004406 <HAL_UART_IRQHandler+0x5be>
 80040de:	bf00      	nop
 80040e0:	04000120 	.word	0x04000120
 80040e4:	08004cdf 	.word	0x08004cdf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	f040 814e 	bne.w	800438e <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80040f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040f6:	f003 0310 	and.w	r3, r3, #16
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	f000 8147 	beq.w	800438e <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004100:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004104:	f003 0310 	and.w	r3, r3, #16
 8004108:	2b00      	cmp	r3, #0
 800410a:	f000 8140 	beq.w	800438e <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2210      	movs	r2, #16
 8004114:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004120:	2b40      	cmp	r3, #64	; 0x40
 8004122:	f040 80b8 	bne.w	8004296 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004132:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004136:	2b00      	cmp	r3, #0
 8004138:	f000 8167 	beq.w	800440a <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004142:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004146:	429a      	cmp	r2, r3
 8004148:	f080 815f 	bcs.w	800440a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004152:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0320 	and.w	r3, r3, #32
 8004162:	2b00      	cmp	r3, #0
 8004164:	f040 8086 	bne.w	8004274 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004170:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004174:	e853 3f00 	ldrex	r3, [r3]
 8004178:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800417c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004180:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004184:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	461a      	mov	r2, r3
 800418e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004192:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004196:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800419a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800419e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80041a2:	e841 2300 	strex	r3, r2, [r1]
 80041a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80041aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1da      	bne.n	8004168 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	3308      	adds	r3, #8
 80041b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041bc:	e853 3f00 	ldrex	r3, [r3]
 80041c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80041c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041c4:	f023 0301 	bic.w	r3, r3, #1
 80041c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	3308      	adds	r3, #8
 80041d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80041d6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80041da:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80041de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80041e2:	e841 2300 	strex	r3, r2, [r1]
 80041e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80041e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d1e1      	bne.n	80041b2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	3308      	adds	r3, #8
 80041f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041f8:	e853 3f00 	ldrex	r3, [r3]
 80041fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80041fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004200:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004204:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	3308      	adds	r3, #8
 800420e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004212:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004214:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004216:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004218:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800421a:	e841 2300 	strex	r3, r2, [r1]
 800421e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004220:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004222:	2b00      	cmp	r3, #0
 8004224:	d1e3      	bne.n	80041ee <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2220      	movs	r2, #32
 800422a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800423a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800423c:	e853 3f00 	ldrex	r3, [r3]
 8004240:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004242:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004244:	f023 0310 	bic.w	r3, r3, #16
 8004248:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	461a      	mov	r2, r3
 8004252:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004256:	65bb      	str	r3, [r7, #88]	; 0x58
 8004258:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800425a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800425c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800425e:	e841 2300 	strex	r3, r2, [r1]
 8004262:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004264:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1e4      	bne.n	8004234 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800426e:	4618      	mov	r0, r3
 8004270:	f7fd fbcd 	bl	8001a0e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2202      	movs	r2, #2
 8004278:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004286:	b29b      	uxth	r3, r3
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	b29b      	uxth	r3, r3
 800428c:	4619      	mov	r1, r3
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 f8d8 	bl	8004444 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004294:	e0b9      	b.n	800440a <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f000 80ab 	beq.w	800440e <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 80042b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80042bc:	2b00      	cmp	r3, #0
 80042be:	f000 80a6 	beq.w	800440e <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ca:	e853 3f00 	ldrex	r3, [r3]
 80042ce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80042d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	461a      	mov	r2, r3
 80042e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80042e4:	647b      	str	r3, [r7, #68]	; 0x44
 80042e6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80042ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042ec:	e841 2300 	strex	r3, r2, [r1]
 80042f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80042f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1e4      	bne.n	80042c2 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	3308      	adds	r3, #8
 80042fe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004302:	e853 3f00 	ldrex	r3, [r3]
 8004306:	623b      	str	r3, [r7, #32]
   return(result);
 8004308:	6a3b      	ldr	r3, [r7, #32]
 800430a:	f023 0301 	bic.w	r3, r3, #1
 800430e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	3308      	adds	r3, #8
 8004318:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800431c:	633a      	str	r2, [r7, #48]	; 0x30
 800431e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004320:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004322:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004324:	e841 2300 	strex	r3, r2, [r1]
 8004328:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800432a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800432c:	2b00      	cmp	r3, #0
 800432e:	d1e3      	bne.n	80042f8 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2220      	movs	r2, #32
 8004334:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	e853 3f00 	ldrex	r3, [r3]
 8004350:	60fb      	str	r3, [r7, #12]
   return(result);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f023 0310 	bic.w	r3, r3, #16
 8004358:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	461a      	mov	r2, r3
 8004362:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004366:	61fb      	str	r3, [r7, #28]
 8004368:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800436a:	69b9      	ldr	r1, [r7, #24]
 800436c:	69fa      	ldr	r2, [r7, #28]
 800436e:	e841 2300 	strex	r3, r2, [r1]
 8004372:	617b      	str	r3, [r7, #20]
   return(result);
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d1e4      	bne.n	8004344 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2202      	movs	r2, #2
 800437e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004380:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004384:	4619      	mov	r1, r3
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 f85c 	bl	8004444 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800438c:	e03f      	b.n	800440e <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800438e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004392:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00e      	beq.n	80043b8 <HAL_UART_IRQHandler+0x570>
 800439a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800439e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d008      	beq.n	80043b8 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80043ae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 fcd4 	bl	8004d5e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80043b6:	e02d      	b.n	8004414 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80043b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d00e      	beq.n	80043e2 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80043c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d008      	beq.n	80043e2 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d01c      	beq.n	8004412 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	4798      	blx	r3
    }
    return;
 80043e0:	e017      	b.n	8004412 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80043e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d012      	beq.n	8004414 <HAL_UART_IRQHandler+0x5cc>
 80043ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00c      	beq.n	8004414 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 fc85 	bl	8004d0a <UART_EndTransmit_IT>
    return;
 8004400:	e008      	b.n	8004414 <HAL_UART_IRQHandler+0x5cc>
      return;
 8004402:	bf00      	nop
 8004404:	e006      	b.n	8004414 <HAL_UART_IRQHandler+0x5cc>
    return;
 8004406:	bf00      	nop
 8004408:	e004      	b.n	8004414 <HAL_UART_IRQHandler+0x5cc>
      return;
 800440a:	bf00      	nop
 800440c:	e002      	b.n	8004414 <HAL_UART_IRQHandler+0x5cc>
      return;
 800440e:	bf00      	nop
 8004410:	e000      	b.n	8004414 <HAL_UART_IRQHandler+0x5cc>
    return;
 8004412:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004414:	37e8      	adds	r7, #232	; 0xe8
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop

0800441c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004424:	bf00      	nop
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	460b      	mov	r3, r1
 800444e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800445c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004460:	b08a      	sub	sp, #40	; 0x28
 8004462:	af00      	add	r7, sp, #0
 8004464:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004466:	2300      	movs	r3, #0
 8004468:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	689a      	ldr	r2, [r3, #8]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	431a      	orrs	r2, r3
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	431a      	orrs	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	69db      	ldr	r3, [r3, #28]
 8004480:	4313      	orrs	r3, r2
 8004482:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	4bb4      	ldr	r3, [pc, #720]	; (800475c <UART_SetConfig+0x300>)
 800448c:	4013      	ands	r3, r2
 800448e:	68fa      	ldr	r2, [r7, #12]
 8004490:	6812      	ldr	r2, [r2, #0]
 8004492:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004494:	430b      	orrs	r3, r1
 8004496:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	68da      	ldr	r2, [r3, #12]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	430a      	orrs	r2, r1
 80044ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4aa9      	ldr	r2, [pc, #676]	; (8004760 <UART_SetConfig+0x304>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d004      	beq.n	80044c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044c4:	4313      	orrs	r3, r2
 80044c6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044d8:	430a      	orrs	r2, r1
 80044da:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4aa0      	ldr	r2, [pc, #640]	; (8004764 <UART_SetConfig+0x308>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d126      	bne.n	8004534 <UART_SetConfig+0xd8>
 80044e6:	4ba0      	ldr	r3, [pc, #640]	; (8004768 <UART_SetConfig+0x30c>)
 80044e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ec:	f003 0303 	and.w	r3, r3, #3
 80044f0:	2b03      	cmp	r3, #3
 80044f2:	d81b      	bhi.n	800452c <UART_SetConfig+0xd0>
 80044f4:	a201      	add	r2, pc, #4	; (adr r2, 80044fc <UART_SetConfig+0xa0>)
 80044f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044fa:	bf00      	nop
 80044fc:	0800450d 	.word	0x0800450d
 8004500:	0800451d 	.word	0x0800451d
 8004504:	08004515 	.word	0x08004515
 8004508:	08004525 	.word	0x08004525
 800450c:	2301      	movs	r3, #1
 800450e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004512:	e080      	b.n	8004616 <UART_SetConfig+0x1ba>
 8004514:	2302      	movs	r3, #2
 8004516:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800451a:	e07c      	b.n	8004616 <UART_SetConfig+0x1ba>
 800451c:	2304      	movs	r3, #4
 800451e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004522:	e078      	b.n	8004616 <UART_SetConfig+0x1ba>
 8004524:	2308      	movs	r3, #8
 8004526:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800452a:	e074      	b.n	8004616 <UART_SetConfig+0x1ba>
 800452c:	2310      	movs	r3, #16
 800452e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004532:	e070      	b.n	8004616 <UART_SetConfig+0x1ba>
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a8c      	ldr	r2, [pc, #560]	; (800476c <UART_SetConfig+0x310>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d138      	bne.n	80045b0 <UART_SetConfig+0x154>
 800453e:	4b8a      	ldr	r3, [pc, #552]	; (8004768 <UART_SetConfig+0x30c>)
 8004540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004544:	f003 030c 	and.w	r3, r3, #12
 8004548:	2b0c      	cmp	r3, #12
 800454a:	d82d      	bhi.n	80045a8 <UART_SetConfig+0x14c>
 800454c:	a201      	add	r2, pc, #4	; (adr r2, 8004554 <UART_SetConfig+0xf8>)
 800454e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004552:	bf00      	nop
 8004554:	08004589 	.word	0x08004589
 8004558:	080045a9 	.word	0x080045a9
 800455c:	080045a9 	.word	0x080045a9
 8004560:	080045a9 	.word	0x080045a9
 8004564:	08004599 	.word	0x08004599
 8004568:	080045a9 	.word	0x080045a9
 800456c:	080045a9 	.word	0x080045a9
 8004570:	080045a9 	.word	0x080045a9
 8004574:	08004591 	.word	0x08004591
 8004578:	080045a9 	.word	0x080045a9
 800457c:	080045a9 	.word	0x080045a9
 8004580:	080045a9 	.word	0x080045a9
 8004584:	080045a1 	.word	0x080045a1
 8004588:	2300      	movs	r3, #0
 800458a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800458e:	e042      	b.n	8004616 <UART_SetConfig+0x1ba>
 8004590:	2302      	movs	r3, #2
 8004592:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004596:	e03e      	b.n	8004616 <UART_SetConfig+0x1ba>
 8004598:	2304      	movs	r3, #4
 800459a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800459e:	e03a      	b.n	8004616 <UART_SetConfig+0x1ba>
 80045a0:	2308      	movs	r3, #8
 80045a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045a6:	e036      	b.n	8004616 <UART_SetConfig+0x1ba>
 80045a8:	2310      	movs	r3, #16
 80045aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045ae:	e032      	b.n	8004616 <UART_SetConfig+0x1ba>
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a6a      	ldr	r2, [pc, #424]	; (8004760 <UART_SetConfig+0x304>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d12a      	bne.n	8004610 <UART_SetConfig+0x1b4>
 80045ba:	4b6b      	ldr	r3, [pc, #428]	; (8004768 <UART_SetConfig+0x30c>)
 80045bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80045c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80045c8:	d01a      	beq.n	8004600 <UART_SetConfig+0x1a4>
 80045ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80045ce:	d81b      	bhi.n	8004608 <UART_SetConfig+0x1ac>
 80045d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045d4:	d00c      	beq.n	80045f0 <UART_SetConfig+0x194>
 80045d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045da:	d815      	bhi.n	8004608 <UART_SetConfig+0x1ac>
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d003      	beq.n	80045e8 <UART_SetConfig+0x18c>
 80045e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045e4:	d008      	beq.n	80045f8 <UART_SetConfig+0x19c>
 80045e6:	e00f      	b.n	8004608 <UART_SetConfig+0x1ac>
 80045e8:	2300      	movs	r3, #0
 80045ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045ee:	e012      	b.n	8004616 <UART_SetConfig+0x1ba>
 80045f0:	2302      	movs	r3, #2
 80045f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045f6:	e00e      	b.n	8004616 <UART_SetConfig+0x1ba>
 80045f8:	2304      	movs	r3, #4
 80045fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045fe:	e00a      	b.n	8004616 <UART_SetConfig+0x1ba>
 8004600:	2308      	movs	r3, #8
 8004602:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004606:	e006      	b.n	8004616 <UART_SetConfig+0x1ba>
 8004608:	2310      	movs	r3, #16
 800460a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800460e:	e002      	b.n	8004616 <UART_SetConfig+0x1ba>
 8004610:	2310      	movs	r3, #16
 8004612:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a51      	ldr	r2, [pc, #324]	; (8004760 <UART_SetConfig+0x304>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d17a      	bne.n	8004716 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004620:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004624:	2b08      	cmp	r3, #8
 8004626:	d824      	bhi.n	8004672 <UART_SetConfig+0x216>
 8004628:	a201      	add	r2, pc, #4	; (adr r2, 8004630 <UART_SetConfig+0x1d4>)
 800462a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800462e:	bf00      	nop
 8004630:	08004655 	.word	0x08004655
 8004634:	08004673 	.word	0x08004673
 8004638:	0800465d 	.word	0x0800465d
 800463c:	08004673 	.word	0x08004673
 8004640:	08004663 	.word	0x08004663
 8004644:	08004673 	.word	0x08004673
 8004648:	08004673 	.word	0x08004673
 800464c:	08004673 	.word	0x08004673
 8004650:	0800466b 	.word	0x0800466b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004654:	f7fe fa16 	bl	8002a84 <HAL_RCC_GetPCLK1Freq>
 8004658:	61f8      	str	r0, [r7, #28]
        break;
 800465a:	e010      	b.n	800467e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800465c:	4b44      	ldr	r3, [pc, #272]	; (8004770 <UART_SetConfig+0x314>)
 800465e:	61fb      	str	r3, [r7, #28]
        break;
 8004660:	e00d      	b.n	800467e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004662:	f7fe f977 	bl	8002954 <HAL_RCC_GetSysClockFreq>
 8004666:	61f8      	str	r0, [r7, #28]
        break;
 8004668:	e009      	b.n	800467e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800466a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800466e:	61fb      	str	r3, [r7, #28]
        break;
 8004670:	e005      	b.n	800467e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8004672:	2300      	movs	r3, #0
 8004674:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800467c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	2b00      	cmp	r3, #0
 8004682:	f000 8107 	beq.w	8004894 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	685a      	ldr	r2, [r3, #4]
 800468a:	4613      	mov	r3, r2
 800468c:	005b      	lsls	r3, r3, #1
 800468e:	4413      	add	r3, r2
 8004690:	69fa      	ldr	r2, [r7, #28]
 8004692:	429a      	cmp	r2, r3
 8004694:	d305      	bcc.n	80046a2 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800469c:	69fa      	ldr	r2, [r7, #28]
 800469e:	429a      	cmp	r2, r3
 80046a0:	d903      	bls.n	80046aa <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80046a8:	e0f4      	b.n	8004894 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	2200      	movs	r2, #0
 80046ae:	461c      	mov	r4, r3
 80046b0:	4615      	mov	r5, r2
 80046b2:	f04f 0200 	mov.w	r2, #0
 80046b6:	f04f 0300 	mov.w	r3, #0
 80046ba:	022b      	lsls	r3, r5, #8
 80046bc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80046c0:	0222      	lsls	r2, r4, #8
 80046c2:	68f9      	ldr	r1, [r7, #12]
 80046c4:	6849      	ldr	r1, [r1, #4]
 80046c6:	0849      	lsrs	r1, r1, #1
 80046c8:	2000      	movs	r0, #0
 80046ca:	4688      	mov	r8, r1
 80046cc:	4681      	mov	r9, r0
 80046ce:	eb12 0a08 	adds.w	sl, r2, r8
 80046d2:	eb43 0b09 	adc.w	fp, r3, r9
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	603b      	str	r3, [r7, #0]
 80046de:	607a      	str	r2, [r7, #4]
 80046e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046e4:	4650      	mov	r0, sl
 80046e6:	4659      	mov	r1, fp
 80046e8:	f7fb fdd2 	bl	8000290 <__aeabi_uldivmod>
 80046ec:	4602      	mov	r2, r0
 80046ee:	460b      	mov	r3, r1
 80046f0:	4613      	mov	r3, r2
 80046f2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046fa:	d308      	bcc.n	800470e <UART_SetConfig+0x2b2>
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004702:	d204      	bcs.n	800470e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	69ba      	ldr	r2, [r7, #24]
 800470a:	60da      	str	r2, [r3, #12]
 800470c:	e0c2      	b.n	8004894 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004714:	e0be      	b.n	8004894 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	69db      	ldr	r3, [r3, #28]
 800471a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800471e:	d16a      	bne.n	80047f6 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8004720:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004724:	2b08      	cmp	r3, #8
 8004726:	d834      	bhi.n	8004792 <UART_SetConfig+0x336>
 8004728:	a201      	add	r2, pc, #4	; (adr r2, 8004730 <UART_SetConfig+0x2d4>)
 800472a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800472e:	bf00      	nop
 8004730:	08004755 	.word	0x08004755
 8004734:	08004775 	.word	0x08004775
 8004738:	0800477d 	.word	0x0800477d
 800473c:	08004793 	.word	0x08004793
 8004740:	08004783 	.word	0x08004783
 8004744:	08004793 	.word	0x08004793
 8004748:	08004793 	.word	0x08004793
 800474c:	08004793 	.word	0x08004793
 8004750:	0800478b 	.word	0x0800478b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004754:	f7fe f996 	bl	8002a84 <HAL_RCC_GetPCLK1Freq>
 8004758:	61f8      	str	r0, [r7, #28]
        break;
 800475a:	e020      	b.n	800479e <UART_SetConfig+0x342>
 800475c:	efff69f3 	.word	0xefff69f3
 8004760:	40008000 	.word	0x40008000
 8004764:	40013800 	.word	0x40013800
 8004768:	40021000 	.word	0x40021000
 800476c:	40004400 	.word	0x40004400
 8004770:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004774:	f7fe f99c 	bl	8002ab0 <HAL_RCC_GetPCLK2Freq>
 8004778:	61f8      	str	r0, [r7, #28]
        break;
 800477a:	e010      	b.n	800479e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800477c:	4b4c      	ldr	r3, [pc, #304]	; (80048b0 <UART_SetConfig+0x454>)
 800477e:	61fb      	str	r3, [r7, #28]
        break;
 8004780:	e00d      	b.n	800479e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004782:	f7fe f8e7 	bl	8002954 <HAL_RCC_GetSysClockFreq>
 8004786:	61f8      	str	r0, [r7, #28]
        break;
 8004788:	e009      	b.n	800479e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800478a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800478e:	61fb      	str	r3, [r7, #28]
        break;
 8004790:	e005      	b.n	800479e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8004792:	2300      	movs	r3, #0
 8004794:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800479c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d077      	beq.n	8004894 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	005a      	lsls	r2, r3, #1
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	085b      	lsrs	r3, r3, #1
 80047ae:	441a      	add	r2, r3
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	2b0f      	cmp	r3, #15
 80047be:	d916      	bls.n	80047ee <UART_SetConfig+0x392>
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047c6:	d212      	bcs.n	80047ee <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	f023 030f 	bic.w	r3, r3, #15
 80047d0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	085b      	lsrs	r3, r3, #1
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	f003 0307 	and.w	r3, r3, #7
 80047dc:	b29a      	uxth	r2, r3
 80047de:	8afb      	ldrh	r3, [r7, #22]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	8afa      	ldrh	r2, [r7, #22]
 80047ea:	60da      	str	r2, [r3, #12]
 80047ec:	e052      	b.n	8004894 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80047f4:	e04e      	b.n	8004894 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80047f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80047fa:	2b08      	cmp	r3, #8
 80047fc:	d827      	bhi.n	800484e <UART_SetConfig+0x3f2>
 80047fe:	a201      	add	r2, pc, #4	; (adr r2, 8004804 <UART_SetConfig+0x3a8>)
 8004800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004804:	08004829 	.word	0x08004829
 8004808:	08004831 	.word	0x08004831
 800480c:	08004839 	.word	0x08004839
 8004810:	0800484f 	.word	0x0800484f
 8004814:	0800483f 	.word	0x0800483f
 8004818:	0800484f 	.word	0x0800484f
 800481c:	0800484f 	.word	0x0800484f
 8004820:	0800484f 	.word	0x0800484f
 8004824:	08004847 	.word	0x08004847
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004828:	f7fe f92c 	bl	8002a84 <HAL_RCC_GetPCLK1Freq>
 800482c:	61f8      	str	r0, [r7, #28]
        break;
 800482e:	e014      	b.n	800485a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004830:	f7fe f93e 	bl	8002ab0 <HAL_RCC_GetPCLK2Freq>
 8004834:	61f8      	str	r0, [r7, #28]
        break;
 8004836:	e010      	b.n	800485a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004838:	4b1d      	ldr	r3, [pc, #116]	; (80048b0 <UART_SetConfig+0x454>)
 800483a:	61fb      	str	r3, [r7, #28]
        break;
 800483c:	e00d      	b.n	800485a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800483e:	f7fe f889 	bl	8002954 <HAL_RCC_GetSysClockFreq>
 8004842:	61f8      	str	r0, [r7, #28]
        break;
 8004844:	e009      	b.n	800485a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004846:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800484a:	61fb      	str	r3, [r7, #28]
        break;
 800484c:	e005      	b.n	800485a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800484e:	2300      	movs	r3, #0
 8004850:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004858:	bf00      	nop
    }

    if (pclk != 0U)
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d019      	beq.n	8004894 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	085a      	lsrs	r2, r3, #1
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	441a      	add	r2, r3
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004872:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	2b0f      	cmp	r3, #15
 8004878:	d909      	bls.n	800488e <UART_SetConfig+0x432>
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004880:	d205      	bcs.n	800488e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	b29a      	uxth	r2, r3
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	60da      	str	r2, [r3, #12]
 800488c:	e002      	b.n	8004894 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2200      	movs	r2, #0
 8004898:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2200      	movs	r2, #0
 800489e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80048a0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3728      	adds	r7, #40	; 0x28
 80048a8:	46bd      	mov	sp, r7
 80048aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048ae:	bf00      	nop
 80048b0:	00f42400 	.word	0x00f42400

080048b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c0:	f003 0308 	and.w	r3, r3, #8
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00a      	beq.n	80048de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	430a      	orrs	r2, r1
 80048dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00a      	beq.n	8004900 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	430a      	orrs	r2, r1
 80048fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004904:	f003 0302 	and.w	r3, r3, #2
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00a      	beq.n	8004922 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	430a      	orrs	r2, r1
 8004920:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004926:	f003 0304 	and.w	r3, r3, #4
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00a      	beq.n	8004944 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	430a      	orrs	r2, r1
 8004942:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004948:	f003 0310 	and.w	r3, r3, #16
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00a      	beq.n	8004966 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	430a      	orrs	r2, r1
 8004964:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496a:	f003 0320 	and.w	r3, r3, #32
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00a      	beq.n	8004988 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	430a      	orrs	r2, r1
 8004986:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004990:	2b00      	cmp	r3, #0
 8004992:	d01a      	beq.n	80049ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	430a      	orrs	r2, r1
 80049a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049b2:	d10a      	bne.n	80049ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	430a      	orrs	r2, r1
 80049c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00a      	beq.n	80049ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	430a      	orrs	r2, r1
 80049ea:	605a      	str	r2, [r3, #4]
  }
}
 80049ec:	bf00      	nop
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b098      	sub	sp, #96	; 0x60
 80049fc:	af02      	add	r7, sp, #8
 80049fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a08:	f7fc fec0 	bl	800178c <HAL_GetTick>
 8004a0c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0308 	and.w	r3, r3, #8
 8004a18:	2b08      	cmp	r3, #8
 8004a1a:	d12e      	bne.n	8004a7a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a20:	9300      	str	r3, [sp, #0]
 8004a22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a24:	2200      	movs	r2, #0
 8004a26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 f88c 	bl	8004b48 <UART_WaitOnFlagUntilTimeout>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d021      	beq.n	8004a7a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a3e:	e853 3f00 	ldrex	r3, [r3]
 8004a42:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a4a:	653b      	str	r3, [r7, #80]	; 0x50
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	461a      	mov	r2, r3
 8004a52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a54:	647b      	str	r3, [r7, #68]	; 0x44
 8004a56:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a58:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a5c:	e841 2300 	strex	r3, r2, [r1]
 8004a60:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d1e6      	bne.n	8004a36 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2220      	movs	r2, #32
 8004a6c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e062      	b.n	8004b40 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0304 	and.w	r3, r3, #4
 8004a84:	2b04      	cmp	r3, #4
 8004a86:	d149      	bne.n	8004b1c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a8c:	9300      	str	r3, [sp, #0]
 8004a8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a90:	2200      	movs	r2, #0
 8004a92:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 f856 	bl	8004b48 <UART_WaitOnFlagUntilTimeout>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d03c      	beq.n	8004b1c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aaa:	e853 3f00 	ldrex	r3, [r3]
 8004aae:	623b      	str	r3, [r7, #32]
   return(result);
 8004ab0:	6a3b      	ldr	r3, [r7, #32]
 8004ab2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ab6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	461a      	mov	r2, r3
 8004abe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ac0:	633b      	str	r3, [r7, #48]	; 0x30
 8004ac2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ac6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ac8:	e841 2300 	strex	r3, r2, [r1]
 8004acc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d1e6      	bne.n	8004aa2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	3308      	adds	r3, #8
 8004ada:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	e853 3f00 	ldrex	r3, [r3]
 8004ae2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f023 0301 	bic.w	r3, r3, #1
 8004aea:	64bb      	str	r3, [r7, #72]	; 0x48
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	3308      	adds	r3, #8
 8004af2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004af4:	61fa      	str	r2, [r7, #28]
 8004af6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af8:	69b9      	ldr	r1, [r7, #24]
 8004afa:	69fa      	ldr	r2, [r7, #28]
 8004afc:	e841 2300 	strex	r3, r2, [r1]
 8004b00:	617b      	str	r3, [r7, #20]
   return(result);
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d1e5      	bne.n	8004ad4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2220      	movs	r2, #32
 8004b0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e011      	b.n	8004b40 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2220      	movs	r2, #32
 8004b20:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2220      	movs	r2, #32
 8004b26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3758      	adds	r7, #88	; 0x58
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	603b      	str	r3, [r7, #0]
 8004b54:	4613      	mov	r3, r2
 8004b56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b58:	e049      	b.n	8004bee <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b60:	d045      	beq.n	8004bee <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b62:	f7fc fe13 	bl	800178c <HAL_GetTick>
 8004b66:	4602      	mov	r2, r0
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	69ba      	ldr	r2, [r7, #24]
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d302      	bcc.n	8004b78 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d101      	bne.n	8004b7c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e048      	b.n	8004c0e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0304 	and.w	r3, r3, #4
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d031      	beq.n	8004bee <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	69db      	ldr	r3, [r3, #28]
 8004b90:	f003 0308 	and.w	r3, r3, #8
 8004b94:	2b08      	cmp	r3, #8
 8004b96:	d110      	bne.n	8004bba <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2208      	movs	r2, #8
 8004b9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ba0:	68f8      	ldr	r0, [r7, #12]
 8004ba2:	f000 f838 	bl	8004c16 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2208      	movs	r2, #8
 8004baa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e029      	b.n	8004c0e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	69db      	ldr	r3, [r3, #28]
 8004bc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bc8:	d111      	bne.n	8004bee <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004bd2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004bd4:	68f8      	ldr	r0, [r7, #12]
 8004bd6:	f000 f81e 	bl	8004c16 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2220      	movs	r2, #32
 8004bde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	e00f      	b.n	8004c0e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	69da      	ldr	r2, [r3, #28]
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	68ba      	ldr	r2, [r7, #8]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	bf0c      	ite	eq
 8004bfe:	2301      	moveq	r3, #1
 8004c00:	2300      	movne	r3, #0
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	461a      	mov	r2, r3
 8004c06:	79fb      	ldrb	r3, [r7, #7]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d0a6      	beq.n	8004b5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3710      	adds	r7, #16
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}

08004c16 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c16:	b480      	push	{r7}
 8004c18:	b095      	sub	sp, #84	; 0x54
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c26:	e853 3f00 	ldrex	r3, [r3]
 8004c2a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c2e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	461a      	mov	r2, r3
 8004c3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c3c:	643b      	str	r3, [r7, #64]	; 0x40
 8004c3e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c40:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004c42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c44:	e841 2300 	strex	r3, r2, [r1]
 8004c48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d1e6      	bne.n	8004c1e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	3308      	adds	r3, #8
 8004c56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c58:	6a3b      	ldr	r3, [r7, #32]
 8004c5a:	e853 3f00 	ldrex	r3, [r3]
 8004c5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	f023 0301 	bic.w	r3, r3, #1
 8004c66:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	3308      	adds	r3, #8
 8004c6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c70:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c78:	e841 2300 	strex	r3, r2, [r1]
 8004c7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d1e5      	bne.n	8004c50 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d118      	bne.n	8004cbe <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	e853 3f00 	ldrex	r3, [r3]
 8004c98:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	f023 0310 	bic.w	r3, r3, #16
 8004ca0:	647b      	str	r3, [r7, #68]	; 0x44
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004caa:	61bb      	str	r3, [r7, #24]
 8004cac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cae:	6979      	ldr	r1, [r7, #20]
 8004cb0:	69ba      	ldr	r2, [r7, #24]
 8004cb2:	e841 2300 	strex	r3, r2, [r1]
 8004cb6:	613b      	str	r3, [r7, #16]
   return(result);
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d1e6      	bne.n	8004c8c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2220      	movs	r2, #32
 8004cc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004cd2:	bf00      	nop
 8004cd4:	3754      	adds	r7, #84	; 0x54
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr

08004cde <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004cde:	b580      	push	{r7, lr}
 8004ce0:	b084      	sub	sp, #16
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004cfc:	68f8      	ldr	r0, [r7, #12]
 8004cfe:	f7ff fb97 	bl	8004430 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d02:	bf00      	nop
 8004d04:	3710      	adds	r7, #16
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}

08004d0a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	b088      	sub	sp, #32
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	e853 3f00 	ldrex	r3, [r3]
 8004d1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d26:	61fb      	str	r3, [r7, #28]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	61bb      	str	r3, [r7, #24]
 8004d32:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d34:	6979      	ldr	r1, [r7, #20]
 8004d36:	69ba      	ldr	r2, [r7, #24]
 8004d38:	e841 2300 	strex	r3, r2, [r1]
 8004d3c:	613b      	str	r3, [r7, #16]
   return(result);
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d1e6      	bne.n	8004d12 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2220      	movs	r2, #32
 8004d48:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f7ff fb63 	bl	800441c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d56:	bf00      	nop
 8004d58:	3720      	adds	r7, #32
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004d5e:	b480      	push	{r7}
 8004d60:	b083      	sub	sp, #12
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004d66:	bf00      	nop
 8004d68:	370c      	adds	r7, #12
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr

08004d72 <atoi>:
 8004d72:	220a      	movs	r2, #10
 8004d74:	2100      	movs	r1, #0
 8004d76:	f000 b883 	b.w	8004e80 <strtol>
	...

08004d7c <_strtol_l.constprop.0>:
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d82:	d001      	beq.n	8004d88 <_strtol_l.constprop.0+0xc>
 8004d84:	2b24      	cmp	r3, #36	; 0x24
 8004d86:	d906      	bls.n	8004d96 <_strtol_l.constprop.0+0x1a>
 8004d88:	f000 fb04 	bl	8005394 <__errno>
 8004d8c:	2316      	movs	r3, #22
 8004d8e:	6003      	str	r3, [r0, #0]
 8004d90:	2000      	movs	r0, #0
 8004d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d96:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8004e7c <_strtol_l.constprop.0+0x100>
 8004d9a:	460d      	mov	r5, r1
 8004d9c:	462e      	mov	r6, r5
 8004d9e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004da2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8004da6:	f017 0708 	ands.w	r7, r7, #8
 8004daa:	d1f7      	bne.n	8004d9c <_strtol_l.constprop.0+0x20>
 8004dac:	2c2d      	cmp	r4, #45	; 0x2d
 8004dae:	d132      	bne.n	8004e16 <_strtol_l.constprop.0+0x9a>
 8004db0:	782c      	ldrb	r4, [r5, #0]
 8004db2:	2701      	movs	r7, #1
 8004db4:	1cb5      	adds	r5, r6, #2
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d05b      	beq.n	8004e72 <_strtol_l.constprop.0+0xf6>
 8004dba:	2b10      	cmp	r3, #16
 8004dbc:	d109      	bne.n	8004dd2 <_strtol_l.constprop.0+0x56>
 8004dbe:	2c30      	cmp	r4, #48	; 0x30
 8004dc0:	d107      	bne.n	8004dd2 <_strtol_l.constprop.0+0x56>
 8004dc2:	782c      	ldrb	r4, [r5, #0]
 8004dc4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004dc8:	2c58      	cmp	r4, #88	; 0x58
 8004dca:	d14d      	bne.n	8004e68 <_strtol_l.constprop.0+0xec>
 8004dcc:	786c      	ldrb	r4, [r5, #1]
 8004dce:	2310      	movs	r3, #16
 8004dd0:	3502      	adds	r5, #2
 8004dd2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8004dd6:	f108 38ff 	add.w	r8, r8, #4294967295
 8004dda:	f04f 0e00 	mov.w	lr, #0
 8004dde:	fbb8 f9f3 	udiv	r9, r8, r3
 8004de2:	4676      	mov	r6, lr
 8004de4:	fb03 8a19 	mls	sl, r3, r9, r8
 8004de8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004dec:	f1bc 0f09 	cmp.w	ip, #9
 8004df0:	d816      	bhi.n	8004e20 <_strtol_l.constprop.0+0xa4>
 8004df2:	4664      	mov	r4, ip
 8004df4:	42a3      	cmp	r3, r4
 8004df6:	dd24      	ble.n	8004e42 <_strtol_l.constprop.0+0xc6>
 8004df8:	f1be 3fff 	cmp.w	lr, #4294967295
 8004dfc:	d008      	beq.n	8004e10 <_strtol_l.constprop.0+0x94>
 8004dfe:	45b1      	cmp	r9, r6
 8004e00:	d31c      	bcc.n	8004e3c <_strtol_l.constprop.0+0xc0>
 8004e02:	d101      	bne.n	8004e08 <_strtol_l.constprop.0+0x8c>
 8004e04:	45a2      	cmp	sl, r4
 8004e06:	db19      	blt.n	8004e3c <_strtol_l.constprop.0+0xc0>
 8004e08:	fb06 4603 	mla	r6, r6, r3, r4
 8004e0c:	f04f 0e01 	mov.w	lr, #1
 8004e10:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004e14:	e7e8      	b.n	8004de8 <_strtol_l.constprop.0+0x6c>
 8004e16:	2c2b      	cmp	r4, #43	; 0x2b
 8004e18:	bf04      	itt	eq
 8004e1a:	782c      	ldrbeq	r4, [r5, #0]
 8004e1c:	1cb5      	addeq	r5, r6, #2
 8004e1e:	e7ca      	b.n	8004db6 <_strtol_l.constprop.0+0x3a>
 8004e20:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004e24:	f1bc 0f19 	cmp.w	ip, #25
 8004e28:	d801      	bhi.n	8004e2e <_strtol_l.constprop.0+0xb2>
 8004e2a:	3c37      	subs	r4, #55	; 0x37
 8004e2c:	e7e2      	b.n	8004df4 <_strtol_l.constprop.0+0x78>
 8004e2e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004e32:	f1bc 0f19 	cmp.w	ip, #25
 8004e36:	d804      	bhi.n	8004e42 <_strtol_l.constprop.0+0xc6>
 8004e38:	3c57      	subs	r4, #87	; 0x57
 8004e3a:	e7db      	b.n	8004df4 <_strtol_l.constprop.0+0x78>
 8004e3c:	f04f 3eff 	mov.w	lr, #4294967295
 8004e40:	e7e6      	b.n	8004e10 <_strtol_l.constprop.0+0x94>
 8004e42:	f1be 3fff 	cmp.w	lr, #4294967295
 8004e46:	d105      	bne.n	8004e54 <_strtol_l.constprop.0+0xd8>
 8004e48:	2322      	movs	r3, #34	; 0x22
 8004e4a:	6003      	str	r3, [r0, #0]
 8004e4c:	4646      	mov	r6, r8
 8004e4e:	b942      	cbnz	r2, 8004e62 <_strtol_l.constprop.0+0xe6>
 8004e50:	4630      	mov	r0, r6
 8004e52:	e79e      	b.n	8004d92 <_strtol_l.constprop.0+0x16>
 8004e54:	b107      	cbz	r7, 8004e58 <_strtol_l.constprop.0+0xdc>
 8004e56:	4276      	negs	r6, r6
 8004e58:	2a00      	cmp	r2, #0
 8004e5a:	d0f9      	beq.n	8004e50 <_strtol_l.constprop.0+0xd4>
 8004e5c:	f1be 0f00 	cmp.w	lr, #0
 8004e60:	d000      	beq.n	8004e64 <_strtol_l.constprop.0+0xe8>
 8004e62:	1e69      	subs	r1, r5, #1
 8004e64:	6011      	str	r1, [r2, #0]
 8004e66:	e7f3      	b.n	8004e50 <_strtol_l.constprop.0+0xd4>
 8004e68:	2430      	movs	r4, #48	; 0x30
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1b1      	bne.n	8004dd2 <_strtol_l.constprop.0+0x56>
 8004e6e:	2308      	movs	r3, #8
 8004e70:	e7af      	b.n	8004dd2 <_strtol_l.constprop.0+0x56>
 8004e72:	2c30      	cmp	r4, #48	; 0x30
 8004e74:	d0a5      	beq.n	8004dc2 <_strtol_l.constprop.0+0x46>
 8004e76:	230a      	movs	r3, #10
 8004e78:	e7ab      	b.n	8004dd2 <_strtol_l.constprop.0+0x56>
 8004e7a:	bf00      	nop
 8004e7c:	08006361 	.word	0x08006361

08004e80 <strtol>:
 8004e80:	4613      	mov	r3, r2
 8004e82:	460a      	mov	r2, r1
 8004e84:	4601      	mov	r1, r0
 8004e86:	4802      	ldr	r0, [pc, #8]	; (8004e90 <strtol+0x10>)
 8004e88:	6800      	ldr	r0, [r0, #0]
 8004e8a:	f7ff bf77 	b.w	8004d7c <_strtol_l.constprop.0>
 8004e8e:	bf00      	nop
 8004e90:	200000a0 	.word	0x200000a0

08004e94 <std>:
 8004e94:	2300      	movs	r3, #0
 8004e96:	b510      	push	{r4, lr}
 8004e98:	4604      	mov	r4, r0
 8004e9a:	e9c0 3300 	strd	r3, r3, [r0]
 8004e9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004ea2:	6083      	str	r3, [r0, #8]
 8004ea4:	8181      	strh	r1, [r0, #12]
 8004ea6:	6643      	str	r3, [r0, #100]	; 0x64
 8004ea8:	81c2      	strh	r2, [r0, #14]
 8004eaa:	6183      	str	r3, [r0, #24]
 8004eac:	4619      	mov	r1, r3
 8004eae:	2208      	movs	r2, #8
 8004eb0:	305c      	adds	r0, #92	; 0x5c
 8004eb2:	f000 f9c4 	bl	800523e <memset>
 8004eb6:	4b0d      	ldr	r3, [pc, #52]	; (8004eec <std+0x58>)
 8004eb8:	6263      	str	r3, [r4, #36]	; 0x24
 8004eba:	4b0d      	ldr	r3, [pc, #52]	; (8004ef0 <std+0x5c>)
 8004ebc:	62a3      	str	r3, [r4, #40]	; 0x28
 8004ebe:	4b0d      	ldr	r3, [pc, #52]	; (8004ef4 <std+0x60>)
 8004ec0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004ec2:	4b0d      	ldr	r3, [pc, #52]	; (8004ef8 <std+0x64>)
 8004ec4:	6323      	str	r3, [r4, #48]	; 0x30
 8004ec6:	4b0d      	ldr	r3, [pc, #52]	; (8004efc <std+0x68>)
 8004ec8:	6224      	str	r4, [r4, #32]
 8004eca:	429c      	cmp	r4, r3
 8004ecc:	d006      	beq.n	8004edc <std+0x48>
 8004ece:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004ed2:	4294      	cmp	r4, r2
 8004ed4:	d002      	beq.n	8004edc <std+0x48>
 8004ed6:	33d0      	adds	r3, #208	; 0xd0
 8004ed8:	429c      	cmp	r4, r3
 8004eda:	d105      	bne.n	8004ee8 <std+0x54>
 8004edc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004ee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ee4:	f000 ba80 	b.w	80053e8 <__retarget_lock_init_recursive>
 8004ee8:	bd10      	pop	{r4, pc}
 8004eea:	bf00      	nop
 8004eec:	080051b9 	.word	0x080051b9
 8004ef0:	080051db 	.word	0x080051db
 8004ef4:	08005213 	.word	0x08005213
 8004ef8:	08005237 	.word	0x08005237
 8004efc:	200001a8 	.word	0x200001a8

08004f00 <stdio_exit_handler>:
 8004f00:	4a02      	ldr	r2, [pc, #8]	; (8004f0c <stdio_exit_handler+0xc>)
 8004f02:	4903      	ldr	r1, [pc, #12]	; (8004f10 <stdio_exit_handler+0x10>)
 8004f04:	4803      	ldr	r0, [pc, #12]	; (8004f14 <stdio_exit_handler+0x14>)
 8004f06:	f000 b869 	b.w	8004fdc <_fwalk_sglue>
 8004f0a:	bf00      	nop
 8004f0c:	20000048 	.word	0x20000048
 8004f10:	08005ce1 	.word	0x08005ce1
 8004f14:	20000054 	.word	0x20000054

08004f18 <cleanup_stdio>:
 8004f18:	6841      	ldr	r1, [r0, #4]
 8004f1a:	4b0c      	ldr	r3, [pc, #48]	; (8004f4c <cleanup_stdio+0x34>)
 8004f1c:	4299      	cmp	r1, r3
 8004f1e:	b510      	push	{r4, lr}
 8004f20:	4604      	mov	r4, r0
 8004f22:	d001      	beq.n	8004f28 <cleanup_stdio+0x10>
 8004f24:	f000 fedc 	bl	8005ce0 <_fflush_r>
 8004f28:	68a1      	ldr	r1, [r4, #8]
 8004f2a:	4b09      	ldr	r3, [pc, #36]	; (8004f50 <cleanup_stdio+0x38>)
 8004f2c:	4299      	cmp	r1, r3
 8004f2e:	d002      	beq.n	8004f36 <cleanup_stdio+0x1e>
 8004f30:	4620      	mov	r0, r4
 8004f32:	f000 fed5 	bl	8005ce0 <_fflush_r>
 8004f36:	68e1      	ldr	r1, [r4, #12]
 8004f38:	4b06      	ldr	r3, [pc, #24]	; (8004f54 <cleanup_stdio+0x3c>)
 8004f3a:	4299      	cmp	r1, r3
 8004f3c:	d004      	beq.n	8004f48 <cleanup_stdio+0x30>
 8004f3e:	4620      	mov	r0, r4
 8004f40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f44:	f000 becc 	b.w	8005ce0 <_fflush_r>
 8004f48:	bd10      	pop	{r4, pc}
 8004f4a:	bf00      	nop
 8004f4c:	200001a8 	.word	0x200001a8
 8004f50:	20000210 	.word	0x20000210
 8004f54:	20000278 	.word	0x20000278

08004f58 <global_stdio_init.part.0>:
 8004f58:	b510      	push	{r4, lr}
 8004f5a:	4b0b      	ldr	r3, [pc, #44]	; (8004f88 <global_stdio_init.part.0+0x30>)
 8004f5c:	4c0b      	ldr	r4, [pc, #44]	; (8004f8c <global_stdio_init.part.0+0x34>)
 8004f5e:	4a0c      	ldr	r2, [pc, #48]	; (8004f90 <global_stdio_init.part.0+0x38>)
 8004f60:	601a      	str	r2, [r3, #0]
 8004f62:	4620      	mov	r0, r4
 8004f64:	2200      	movs	r2, #0
 8004f66:	2104      	movs	r1, #4
 8004f68:	f7ff ff94 	bl	8004e94 <std>
 8004f6c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004f70:	2201      	movs	r2, #1
 8004f72:	2109      	movs	r1, #9
 8004f74:	f7ff ff8e 	bl	8004e94 <std>
 8004f78:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004f7c:	2202      	movs	r2, #2
 8004f7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f82:	2112      	movs	r1, #18
 8004f84:	f7ff bf86 	b.w	8004e94 <std>
 8004f88:	200002e0 	.word	0x200002e0
 8004f8c:	200001a8 	.word	0x200001a8
 8004f90:	08004f01 	.word	0x08004f01

08004f94 <__sfp_lock_acquire>:
 8004f94:	4801      	ldr	r0, [pc, #4]	; (8004f9c <__sfp_lock_acquire+0x8>)
 8004f96:	f000 ba28 	b.w	80053ea <__retarget_lock_acquire_recursive>
 8004f9a:	bf00      	nop
 8004f9c:	200002e9 	.word	0x200002e9

08004fa0 <__sfp_lock_release>:
 8004fa0:	4801      	ldr	r0, [pc, #4]	; (8004fa8 <__sfp_lock_release+0x8>)
 8004fa2:	f000 ba23 	b.w	80053ec <__retarget_lock_release_recursive>
 8004fa6:	bf00      	nop
 8004fa8:	200002e9 	.word	0x200002e9

08004fac <__sinit>:
 8004fac:	b510      	push	{r4, lr}
 8004fae:	4604      	mov	r4, r0
 8004fb0:	f7ff fff0 	bl	8004f94 <__sfp_lock_acquire>
 8004fb4:	6a23      	ldr	r3, [r4, #32]
 8004fb6:	b11b      	cbz	r3, 8004fc0 <__sinit+0x14>
 8004fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fbc:	f7ff bff0 	b.w	8004fa0 <__sfp_lock_release>
 8004fc0:	4b04      	ldr	r3, [pc, #16]	; (8004fd4 <__sinit+0x28>)
 8004fc2:	6223      	str	r3, [r4, #32]
 8004fc4:	4b04      	ldr	r3, [pc, #16]	; (8004fd8 <__sinit+0x2c>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d1f5      	bne.n	8004fb8 <__sinit+0xc>
 8004fcc:	f7ff ffc4 	bl	8004f58 <global_stdio_init.part.0>
 8004fd0:	e7f2      	b.n	8004fb8 <__sinit+0xc>
 8004fd2:	bf00      	nop
 8004fd4:	08004f19 	.word	0x08004f19
 8004fd8:	200002e0 	.word	0x200002e0

08004fdc <_fwalk_sglue>:
 8004fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fe0:	4607      	mov	r7, r0
 8004fe2:	4688      	mov	r8, r1
 8004fe4:	4614      	mov	r4, r2
 8004fe6:	2600      	movs	r6, #0
 8004fe8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004fec:	f1b9 0901 	subs.w	r9, r9, #1
 8004ff0:	d505      	bpl.n	8004ffe <_fwalk_sglue+0x22>
 8004ff2:	6824      	ldr	r4, [r4, #0]
 8004ff4:	2c00      	cmp	r4, #0
 8004ff6:	d1f7      	bne.n	8004fe8 <_fwalk_sglue+0xc>
 8004ff8:	4630      	mov	r0, r6
 8004ffa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ffe:	89ab      	ldrh	r3, [r5, #12]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d907      	bls.n	8005014 <_fwalk_sglue+0x38>
 8005004:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005008:	3301      	adds	r3, #1
 800500a:	d003      	beq.n	8005014 <_fwalk_sglue+0x38>
 800500c:	4629      	mov	r1, r5
 800500e:	4638      	mov	r0, r7
 8005010:	47c0      	blx	r8
 8005012:	4306      	orrs	r6, r0
 8005014:	3568      	adds	r5, #104	; 0x68
 8005016:	e7e9      	b.n	8004fec <_fwalk_sglue+0x10>

08005018 <getchar>:
 8005018:	4b02      	ldr	r3, [pc, #8]	; (8005024 <getchar+0xc>)
 800501a:	6818      	ldr	r0, [r3, #0]
 800501c:	6841      	ldr	r1, [r0, #4]
 800501e:	f000 be99 	b.w	8005d54 <_getc_r>
 8005022:	bf00      	nop
 8005024:	200000a0 	.word	0x200000a0

08005028 <iprintf>:
 8005028:	b40f      	push	{r0, r1, r2, r3}
 800502a:	b507      	push	{r0, r1, r2, lr}
 800502c:	4906      	ldr	r1, [pc, #24]	; (8005048 <iprintf+0x20>)
 800502e:	ab04      	add	r3, sp, #16
 8005030:	6808      	ldr	r0, [r1, #0]
 8005032:	f853 2b04 	ldr.w	r2, [r3], #4
 8005036:	6881      	ldr	r1, [r0, #8]
 8005038:	9301      	str	r3, [sp, #4]
 800503a:	f000 fb21 	bl	8005680 <_vfiprintf_r>
 800503e:	b003      	add	sp, #12
 8005040:	f85d eb04 	ldr.w	lr, [sp], #4
 8005044:	b004      	add	sp, #16
 8005046:	4770      	bx	lr
 8005048:	200000a0 	.word	0x200000a0

0800504c <putchar>:
 800504c:	4b02      	ldr	r3, [pc, #8]	; (8005058 <putchar+0xc>)
 800504e:	4601      	mov	r1, r0
 8005050:	6818      	ldr	r0, [r3, #0]
 8005052:	6882      	ldr	r2, [r0, #8]
 8005054:	f000 bf0b 	b.w	8005e6e <_putc_r>
 8005058:	200000a0 	.word	0x200000a0

0800505c <setvbuf>:
 800505c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005060:	461d      	mov	r5, r3
 8005062:	4b54      	ldr	r3, [pc, #336]	; (80051b4 <setvbuf+0x158>)
 8005064:	681f      	ldr	r7, [r3, #0]
 8005066:	4604      	mov	r4, r0
 8005068:	460e      	mov	r6, r1
 800506a:	4690      	mov	r8, r2
 800506c:	b127      	cbz	r7, 8005078 <setvbuf+0x1c>
 800506e:	6a3b      	ldr	r3, [r7, #32]
 8005070:	b913      	cbnz	r3, 8005078 <setvbuf+0x1c>
 8005072:	4638      	mov	r0, r7
 8005074:	f7ff ff9a 	bl	8004fac <__sinit>
 8005078:	f1b8 0f02 	cmp.w	r8, #2
 800507c:	d006      	beq.n	800508c <setvbuf+0x30>
 800507e:	f1b8 0f01 	cmp.w	r8, #1
 8005082:	f200 8094 	bhi.w	80051ae <setvbuf+0x152>
 8005086:	2d00      	cmp	r5, #0
 8005088:	f2c0 8091 	blt.w	80051ae <setvbuf+0x152>
 800508c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800508e:	07da      	lsls	r2, r3, #31
 8005090:	d405      	bmi.n	800509e <setvbuf+0x42>
 8005092:	89a3      	ldrh	r3, [r4, #12]
 8005094:	059b      	lsls	r3, r3, #22
 8005096:	d402      	bmi.n	800509e <setvbuf+0x42>
 8005098:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800509a:	f000 f9a6 	bl	80053ea <__retarget_lock_acquire_recursive>
 800509e:	4621      	mov	r1, r4
 80050a0:	4638      	mov	r0, r7
 80050a2:	f000 fe1d 	bl	8005ce0 <_fflush_r>
 80050a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80050a8:	b141      	cbz	r1, 80050bc <setvbuf+0x60>
 80050aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80050ae:	4299      	cmp	r1, r3
 80050b0:	d002      	beq.n	80050b8 <setvbuf+0x5c>
 80050b2:	4638      	mov	r0, r7
 80050b4:	f000 f9ba 	bl	800542c <_free_r>
 80050b8:	2300      	movs	r3, #0
 80050ba:	6363      	str	r3, [r4, #52]	; 0x34
 80050bc:	2300      	movs	r3, #0
 80050be:	61a3      	str	r3, [r4, #24]
 80050c0:	6063      	str	r3, [r4, #4]
 80050c2:	89a3      	ldrh	r3, [r4, #12]
 80050c4:	0618      	lsls	r0, r3, #24
 80050c6:	d503      	bpl.n	80050d0 <setvbuf+0x74>
 80050c8:	6921      	ldr	r1, [r4, #16]
 80050ca:	4638      	mov	r0, r7
 80050cc:	f000 f9ae 	bl	800542c <_free_r>
 80050d0:	89a3      	ldrh	r3, [r4, #12]
 80050d2:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80050d6:	f023 0303 	bic.w	r3, r3, #3
 80050da:	f1b8 0f02 	cmp.w	r8, #2
 80050de:	81a3      	strh	r3, [r4, #12]
 80050e0:	d05f      	beq.n	80051a2 <setvbuf+0x146>
 80050e2:	ab01      	add	r3, sp, #4
 80050e4:	466a      	mov	r2, sp
 80050e6:	4621      	mov	r1, r4
 80050e8:	4638      	mov	r0, r7
 80050ea:	f000 fe5e 	bl	8005daa <__swhatbuf_r>
 80050ee:	89a3      	ldrh	r3, [r4, #12]
 80050f0:	4318      	orrs	r0, r3
 80050f2:	81a0      	strh	r0, [r4, #12]
 80050f4:	bb2d      	cbnz	r5, 8005142 <setvbuf+0xe6>
 80050f6:	9d00      	ldr	r5, [sp, #0]
 80050f8:	4628      	mov	r0, r5
 80050fa:	f000 f9e3 	bl	80054c4 <malloc>
 80050fe:	4606      	mov	r6, r0
 8005100:	2800      	cmp	r0, #0
 8005102:	d150      	bne.n	80051a6 <setvbuf+0x14a>
 8005104:	f8dd 9000 	ldr.w	r9, [sp]
 8005108:	45a9      	cmp	r9, r5
 800510a:	d13e      	bne.n	800518a <setvbuf+0x12e>
 800510c:	f04f 35ff 	mov.w	r5, #4294967295
 8005110:	2200      	movs	r2, #0
 8005112:	60a2      	str	r2, [r4, #8]
 8005114:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8005118:	6022      	str	r2, [r4, #0]
 800511a:	6122      	str	r2, [r4, #16]
 800511c:	2201      	movs	r2, #1
 800511e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005122:	6162      	str	r2, [r4, #20]
 8005124:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005126:	f043 0302 	orr.w	r3, r3, #2
 800512a:	07d1      	lsls	r1, r2, #31
 800512c:	81a3      	strh	r3, [r4, #12]
 800512e:	d404      	bmi.n	800513a <setvbuf+0xde>
 8005130:	059b      	lsls	r3, r3, #22
 8005132:	d402      	bmi.n	800513a <setvbuf+0xde>
 8005134:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005136:	f000 f959 	bl	80053ec <__retarget_lock_release_recursive>
 800513a:	4628      	mov	r0, r5
 800513c:	b003      	add	sp, #12
 800513e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005142:	2e00      	cmp	r6, #0
 8005144:	d0d8      	beq.n	80050f8 <setvbuf+0x9c>
 8005146:	6a3b      	ldr	r3, [r7, #32]
 8005148:	b913      	cbnz	r3, 8005150 <setvbuf+0xf4>
 800514a:	4638      	mov	r0, r7
 800514c:	f7ff ff2e 	bl	8004fac <__sinit>
 8005150:	f1b8 0f01 	cmp.w	r8, #1
 8005154:	bf08      	it	eq
 8005156:	89a3      	ldrheq	r3, [r4, #12]
 8005158:	6026      	str	r6, [r4, #0]
 800515a:	bf04      	itt	eq
 800515c:	f043 0301 	orreq.w	r3, r3, #1
 8005160:	81a3      	strheq	r3, [r4, #12]
 8005162:	89a3      	ldrh	r3, [r4, #12]
 8005164:	f013 0208 	ands.w	r2, r3, #8
 8005168:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800516c:	d01d      	beq.n	80051aa <setvbuf+0x14e>
 800516e:	07da      	lsls	r2, r3, #31
 8005170:	bf41      	itttt	mi
 8005172:	2200      	movmi	r2, #0
 8005174:	426d      	negmi	r5, r5
 8005176:	60a2      	strmi	r2, [r4, #8]
 8005178:	61a5      	strmi	r5, [r4, #24]
 800517a:	bf58      	it	pl
 800517c:	60a5      	strpl	r5, [r4, #8]
 800517e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8005180:	f015 0501 	ands.w	r5, r5, #1
 8005184:	d0d4      	beq.n	8005130 <setvbuf+0xd4>
 8005186:	2500      	movs	r5, #0
 8005188:	e7d7      	b.n	800513a <setvbuf+0xde>
 800518a:	4648      	mov	r0, r9
 800518c:	f000 f99a 	bl	80054c4 <malloc>
 8005190:	4606      	mov	r6, r0
 8005192:	2800      	cmp	r0, #0
 8005194:	d0ba      	beq.n	800510c <setvbuf+0xb0>
 8005196:	89a3      	ldrh	r3, [r4, #12]
 8005198:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800519c:	81a3      	strh	r3, [r4, #12]
 800519e:	464d      	mov	r5, r9
 80051a0:	e7d1      	b.n	8005146 <setvbuf+0xea>
 80051a2:	2500      	movs	r5, #0
 80051a4:	e7b4      	b.n	8005110 <setvbuf+0xb4>
 80051a6:	46a9      	mov	r9, r5
 80051a8:	e7f5      	b.n	8005196 <setvbuf+0x13a>
 80051aa:	60a2      	str	r2, [r4, #8]
 80051ac:	e7e7      	b.n	800517e <setvbuf+0x122>
 80051ae:	f04f 35ff 	mov.w	r5, #4294967295
 80051b2:	e7c2      	b.n	800513a <setvbuf+0xde>
 80051b4:	200000a0 	.word	0x200000a0

080051b8 <__sread>:
 80051b8:	b510      	push	{r4, lr}
 80051ba:	460c      	mov	r4, r1
 80051bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051c0:	f000 f8c4 	bl	800534c <_read_r>
 80051c4:	2800      	cmp	r0, #0
 80051c6:	bfab      	itete	ge
 80051c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80051ca:	89a3      	ldrhlt	r3, [r4, #12]
 80051cc:	181b      	addge	r3, r3, r0
 80051ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80051d2:	bfac      	ite	ge
 80051d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80051d6:	81a3      	strhlt	r3, [r4, #12]
 80051d8:	bd10      	pop	{r4, pc}

080051da <__swrite>:
 80051da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051de:	461f      	mov	r7, r3
 80051e0:	898b      	ldrh	r3, [r1, #12]
 80051e2:	05db      	lsls	r3, r3, #23
 80051e4:	4605      	mov	r5, r0
 80051e6:	460c      	mov	r4, r1
 80051e8:	4616      	mov	r6, r2
 80051ea:	d505      	bpl.n	80051f8 <__swrite+0x1e>
 80051ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051f0:	2302      	movs	r3, #2
 80051f2:	2200      	movs	r2, #0
 80051f4:	f000 f898 	bl	8005328 <_lseek_r>
 80051f8:	89a3      	ldrh	r3, [r4, #12]
 80051fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005202:	81a3      	strh	r3, [r4, #12]
 8005204:	4632      	mov	r2, r6
 8005206:	463b      	mov	r3, r7
 8005208:	4628      	mov	r0, r5
 800520a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800520e:	f000 b8af 	b.w	8005370 <_write_r>

08005212 <__sseek>:
 8005212:	b510      	push	{r4, lr}
 8005214:	460c      	mov	r4, r1
 8005216:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800521a:	f000 f885 	bl	8005328 <_lseek_r>
 800521e:	1c43      	adds	r3, r0, #1
 8005220:	89a3      	ldrh	r3, [r4, #12]
 8005222:	bf15      	itete	ne
 8005224:	6560      	strne	r0, [r4, #84]	; 0x54
 8005226:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800522a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800522e:	81a3      	strheq	r3, [r4, #12]
 8005230:	bf18      	it	ne
 8005232:	81a3      	strhne	r3, [r4, #12]
 8005234:	bd10      	pop	{r4, pc}

08005236 <__sclose>:
 8005236:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800523a:	f000 b865 	b.w	8005308 <_close_r>

0800523e <memset>:
 800523e:	4402      	add	r2, r0
 8005240:	4603      	mov	r3, r0
 8005242:	4293      	cmp	r3, r2
 8005244:	d100      	bne.n	8005248 <memset+0xa>
 8005246:	4770      	bx	lr
 8005248:	f803 1b01 	strb.w	r1, [r3], #1
 800524c:	e7f9      	b.n	8005242 <memset+0x4>
	...

08005250 <strtok>:
 8005250:	4b16      	ldr	r3, [pc, #88]	; (80052ac <strtok+0x5c>)
 8005252:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005254:	681e      	ldr	r6, [r3, #0]
 8005256:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8005258:	4605      	mov	r5, r0
 800525a:	b9fc      	cbnz	r4, 800529c <strtok+0x4c>
 800525c:	2050      	movs	r0, #80	; 0x50
 800525e:	9101      	str	r1, [sp, #4]
 8005260:	f000 f930 	bl	80054c4 <malloc>
 8005264:	9901      	ldr	r1, [sp, #4]
 8005266:	6470      	str	r0, [r6, #68]	; 0x44
 8005268:	4602      	mov	r2, r0
 800526a:	b920      	cbnz	r0, 8005276 <strtok+0x26>
 800526c:	4b10      	ldr	r3, [pc, #64]	; (80052b0 <strtok+0x60>)
 800526e:	4811      	ldr	r0, [pc, #68]	; (80052b4 <strtok+0x64>)
 8005270:	215b      	movs	r1, #91	; 0x5b
 8005272:	f000 f8bd 	bl	80053f0 <__assert_func>
 8005276:	e9c0 4400 	strd	r4, r4, [r0]
 800527a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800527e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005282:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8005286:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800528a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800528e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8005292:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8005296:	6184      	str	r4, [r0, #24]
 8005298:	7704      	strb	r4, [r0, #28]
 800529a:	6244      	str	r4, [r0, #36]	; 0x24
 800529c:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800529e:	2301      	movs	r3, #1
 80052a0:	4628      	mov	r0, r5
 80052a2:	b002      	add	sp, #8
 80052a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80052a8:	f000 b806 	b.w	80052b8 <__strtok_r>
 80052ac:	200000a0 	.word	0x200000a0
 80052b0:	08006461 	.word	0x08006461
 80052b4:	08006478 	.word	0x08006478

080052b8 <__strtok_r>:
 80052b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052ba:	b908      	cbnz	r0, 80052c0 <__strtok_r+0x8>
 80052bc:	6810      	ldr	r0, [r2, #0]
 80052be:	b188      	cbz	r0, 80052e4 <__strtok_r+0x2c>
 80052c0:	4604      	mov	r4, r0
 80052c2:	4620      	mov	r0, r4
 80052c4:	f814 5b01 	ldrb.w	r5, [r4], #1
 80052c8:	460f      	mov	r7, r1
 80052ca:	f817 6b01 	ldrb.w	r6, [r7], #1
 80052ce:	b91e      	cbnz	r6, 80052d8 <__strtok_r+0x20>
 80052d0:	b965      	cbnz	r5, 80052ec <__strtok_r+0x34>
 80052d2:	6015      	str	r5, [r2, #0]
 80052d4:	4628      	mov	r0, r5
 80052d6:	e005      	b.n	80052e4 <__strtok_r+0x2c>
 80052d8:	42b5      	cmp	r5, r6
 80052da:	d1f6      	bne.n	80052ca <__strtok_r+0x12>
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d1f0      	bne.n	80052c2 <__strtok_r+0xa>
 80052e0:	6014      	str	r4, [r2, #0]
 80052e2:	7003      	strb	r3, [r0, #0]
 80052e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052e6:	461c      	mov	r4, r3
 80052e8:	e00c      	b.n	8005304 <__strtok_r+0x4c>
 80052ea:	b915      	cbnz	r5, 80052f2 <__strtok_r+0x3a>
 80052ec:	f814 3b01 	ldrb.w	r3, [r4], #1
 80052f0:	460e      	mov	r6, r1
 80052f2:	f816 5b01 	ldrb.w	r5, [r6], #1
 80052f6:	42ab      	cmp	r3, r5
 80052f8:	d1f7      	bne.n	80052ea <__strtok_r+0x32>
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d0f3      	beq.n	80052e6 <__strtok_r+0x2e>
 80052fe:	2300      	movs	r3, #0
 8005300:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005304:	6014      	str	r4, [r2, #0]
 8005306:	e7ed      	b.n	80052e4 <__strtok_r+0x2c>

08005308 <_close_r>:
 8005308:	b538      	push	{r3, r4, r5, lr}
 800530a:	4d06      	ldr	r5, [pc, #24]	; (8005324 <_close_r+0x1c>)
 800530c:	2300      	movs	r3, #0
 800530e:	4604      	mov	r4, r0
 8005310:	4608      	mov	r0, r1
 8005312:	602b      	str	r3, [r5, #0]
 8005314:	f7fb ffb4 	bl	8001280 <_close>
 8005318:	1c43      	adds	r3, r0, #1
 800531a:	d102      	bne.n	8005322 <_close_r+0x1a>
 800531c:	682b      	ldr	r3, [r5, #0]
 800531e:	b103      	cbz	r3, 8005322 <_close_r+0x1a>
 8005320:	6023      	str	r3, [r4, #0]
 8005322:	bd38      	pop	{r3, r4, r5, pc}
 8005324:	200002e4 	.word	0x200002e4

08005328 <_lseek_r>:
 8005328:	b538      	push	{r3, r4, r5, lr}
 800532a:	4d07      	ldr	r5, [pc, #28]	; (8005348 <_lseek_r+0x20>)
 800532c:	4604      	mov	r4, r0
 800532e:	4608      	mov	r0, r1
 8005330:	4611      	mov	r1, r2
 8005332:	2200      	movs	r2, #0
 8005334:	602a      	str	r2, [r5, #0]
 8005336:	461a      	mov	r2, r3
 8005338:	f7fb ffb9 	bl	80012ae <_lseek>
 800533c:	1c43      	adds	r3, r0, #1
 800533e:	d102      	bne.n	8005346 <_lseek_r+0x1e>
 8005340:	682b      	ldr	r3, [r5, #0]
 8005342:	b103      	cbz	r3, 8005346 <_lseek_r+0x1e>
 8005344:	6023      	str	r3, [r4, #0]
 8005346:	bd38      	pop	{r3, r4, r5, pc}
 8005348:	200002e4 	.word	0x200002e4

0800534c <_read_r>:
 800534c:	b538      	push	{r3, r4, r5, lr}
 800534e:	4d07      	ldr	r5, [pc, #28]	; (800536c <_read_r+0x20>)
 8005350:	4604      	mov	r4, r0
 8005352:	4608      	mov	r0, r1
 8005354:	4611      	mov	r1, r2
 8005356:	2200      	movs	r2, #0
 8005358:	602a      	str	r2, [r5, #0]
 800535a:	461a      	mov	r2, r3
 800535c:	f7fb ffb8 	bl	80012d0 <_read>
 8005360:	1c43      	adds	r3, r0, #1
 8005362:	d102      	bne.n	800536a <_read_r+0x1e>
 8005364:	682b      	ldr	r3, [r5, #0]
 8005366:	b103      	cbz	r3, 800536a <_read_r+0x1e>
 8005368:	6023      	str	r3, [r4, #0]
 800536a:	bd38      	pop	{r3, r4, r5, pc}
 800536c:	200002e4 	.word	0x200002e4

08005370 <_write_r>:
 8005370:	b538      	push	{r3, r4, r5, lr}
 8005372:	4d07      	ldr	r5, [pc, #28]	; (8005390 <_write_r+0x20>)
 8005374:	4604      	mov	r4, r0
 8005376:	4608      	mov	r0, r1
 8005378:	4611      	mov	r1, r2
 800537a:	2200      	movs	r2, #0
 800537c:	602a      	str	r2, [r5, #0]
 800537e:	461a      	mov	r2, r3
 8005380:	f7fb ff52 	bl	8001228 <_write>
 8005384:	1c43      	adds	r3, r0, #1
 8005386:	d102      	bne.n	800538e <_write_r+0x1e>
 8005388:	682b      	ldr	r3, [r5, #0]
 800538a:	b103      	cbz	r3, 800538e <_write_r+0x1e>
 800538c:	6023      	str	r3, [r4, #0]
 800538e:	bd38      	pop	{r3, r4, r5, pc}
 8005390:	200002e4 	.word	0x200002e4

08005394 <__errno>:
 8005394:	4b01      	ldr	r3, [pc, #4]	; (800539c <__errno+0x8>)
 8005396:	6818      	ldr	r0, [r3, #0]
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	200000a0 	.word	0x200000a0

080053a0 <__libc_init_array>:
 80053a0:	b570      	push	{r4, r5, r6, lr}
 80053a2:	4d0d      	ldr	r5, [pc, #52]	; (80053d8 <__libc_init_array+0x38>)
 80053a4:	4c0d      	ldr	r4, [pc, #52]	; (80053dc <__libc_init_array+0x3c>)
 80053a6:	1b64      	subs	r4, r4, r5
 80053a8:	10a4      	asrs	r4, r4, #2
 80053aa:	2600      	movs	r6, #0
 80053ac:	42a6      	cmp	r6, r4
 80053ae:	d109      	bne.n	80053c4 <__libc_init_array+0x24>
 80053b0:	4d0b      	ldr	r5, [pc, #44]	; (80053e0 <__libc_init_array+0x40>)
 80053b2:	4c0c      	ldr	r4, [pc, #48]	; (80053e4 <__libc_init_array+0x44>)
 80053b4:	f000 ff40 	bl	8006238 <_init>
 80053b8:	1b64      	subs	r4, r4, r5
 80053ba:	10a4      	asrs	r4, r4, #2
 80053bc:	2600      	movs	r6, #0
 80053be:	42a6      	cmp	r6, r4
 80053c0:	d105      	bne.n	80053ce <__libc_init_array+0x2e>
 80053c2:	bd70      	pop	{r4, r5, r6, pc}
 80053c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80053c8:	4798      	blx	r3
 80053ca:	3601      	adds	r6, #1
 80053cc:	e7ee      	b.n	80053ac <__libc_init_array+0xc>
 80053ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80053d2:	4798      	blx	r3
 80053d4:	3601      	adds	r6, #1
 80053d6:	e7f2      	b.n	80053be <__libc_init_array+0x1e>
 80053d8:	0800654c 	.word	0x0800654c
 80053dc:	0800654c 	.word	0x0800654c
 80053e0:	0800654c 	.word	0x0800654c
 80053e4:	08006550 	.word	0x08006550

080053e8 <__retarget_lock_init_recursive>:
 80053e8:	4770      	bx	lr

080053ea <__retarget_lock_acquire_recursive>:
 80053ea:	4770      	bx	lr

080053ec <__retarget_lock_release_recursive>:
 80053ec:	4770      	bx	lr
	...

080053f0 <__assert_func>:
 80053f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80053f2:	4614      	mov	r4, r2
 80053f4:	461a      	mov	r2, r3
 80053f6:	4b09      	ldr	r3, [pc, #36]	; (800541c <__assert_func+0x2c>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4605      	mov	r5, r0
 80053fc:	68d8      	ldr	r0, [r3, #12]
 80053fe:	b14c      	cbz	r4, 8005414 <__assert_func+0x24>
 8005400:	4b07      	ldr	r3, [pc, #28]	; (8005420 <__assert_func+0x30>)
 8005402:	9100      	str	r1, [sp, #0]
 8005404:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005408:	4906      	ldr	r1, [pc, #24]	; (8005424 <__assert_func+0x34>)
 800540a:	462b      	mov	r3, r5
 800540c:	f000 fc90 	bl	8005d30 <fiprintf>
 8005410:	f000 fe40 	bl	8006094 <abort>
 8005414:	4b04      	ldr	r3, [pc, #16]	; (8005428 <__assert_func+0x38>)
 8005416:	461c      	mov	r4, r3
 8005418:	e7f3      	b.n	8005402 <__assert_func+0x12>
 800541a:	bf00      	nop
 800541c:	200000a0 	.word	0x200000a0
 8005420:	080064d2 	.word	0x080064d2
 8005424:	080064df 	.word	0x080064df
 8005428:	0800650d 	.word	0x0800650d

0800542c <_free_r>:
 800542c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800542e:	2900      	cmp	r1, #0
 8005430:	d044      	beq.n	80054bc <_free_r+0x90>
 8005432:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005436:	9001      	str	r0, [sp, #4]
 8005438:	2b00      	cmp	r3, #0
 800543a:	f1a1 0404 	sub.w	r4, r1, #4
 800543e:	bfb8      	it	lt
 8005440:	18e4      	addlt	r4, r4, r3
 8005442:	f000 f8e7 	bl	8005614 <__malloc_lock>
 8005446:	4a1e      	ldr	r2, [pc, #120]	; (80054c0 <_free_r+0x94>)
 8005448:	9801      	ldr	r0, [sp, #4]
 800544a:	6813      	ldr	r3, [r2, #0]
 800544c:	b933      	cbnz	r3, 800545c <_free_r+0x30>
 800544e:	6063      	str	r3, [r4, #4]
 8005450:	6014      	str	r4, [r2, #0]
 8005452:	b003      	add	sp, #12
 8005454:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005458:	f000 b8e2 	b.w	8005620 <__malloc_unlock>
 800545c:	42a3      	cmp	r3, r4
 800545e:	d908      	bls.n	8005472 <_free_r+0x46>
 8005460:	6825      	ldr	r5, [r4, #0]
 8005462:	1961      	adds	r1, r4, r5
 8005464:	428b      	cmp	r3, r1
 8005466:	bf01      	itttt	eq
 8005468:	6819      	ldreq	r1, [r3, #0]
 800546a:	685b      	ldreq	r3, [r3, #4]
 800546c:	1949      	addeq	r1, r1, r5
 800546e:	6021      	streq	r1, [r4, #0]
 8005470:	e7ed      	b.n	800544e <_free_r+0x22>
 8005472:	461a      	mov	r2, r3
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	b10b      	cbz	r3, 800547c <_free_r+0x50>
 8005478:	42a3      	cmp	r3, r4
 800547a:	d9fa      	bls.n	8005472 <_free_r+0x46>
 800547c:	6811      	ldr	r1, [r2, #0]
 800547e:	1855      	adds	r5, r2, r1
 8005480:	42a5      	cmp	r5, r4
 8005482:	d10b      	bne.n	800549c <_free_r+0x70>
 8005484:	6824      	ldr	r4, [r4, #0]
 8005486:	4421      	add	r1, r4
 8005488:	1854      	adds	r4, r2, r1
 800548a:	42a3      	cmp	r3, r4
 800548c:	6011      	str	r1, [r2, #0]
 800548e:	d1e0      	bne.n	8005452 <_free_r+0x26>
 8005490:	681c      	ldr	r4, [r3, #0]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	6053      	str	r3, [r2, #4]
 8005496:	440c      	add	r4, r1
 8005498:	6014      	str	r4, [r2, #0]
 800549a:	e7da      	b.n	8005452 <_free_r+0x26>
 800549c:	d902      	bls.n	80054a4 <_free_r+0x78>
 800549e:	230c      	movs	r3, #12
 80054a0:	6003      	str	r3, [r0, #0]
 80054a2:	e7d6      	b.n	8005452 <_free_r+0x26>
 80054a4:	6825      	ldr	r5, [r4, #0]
 80054a6:	1961      	adds	r1, r4, r5
 80054a8:	428b      	cmp	r3, r1
 80054aa:	bf04      	itt	eq
 80054ac:	6819      	ldreq	r1, [r3, #0]
 80054ae:	685b      	ldreq	r3, [r3, #4]
 80054b0:	6063      	str	r3, [r4, #4]
 80054b2:	bf04      	itt	eq
 80054b4:	1949      	addeq	r1, r1, r5
 80054b6:	6021      	streq	r1, [r4, #0]
 80054b8:	6054      	str	r4, [r2, #4]
 80054ba:	e7ca      	b.n	8005452 <_free_r+0x26>
 80054bc:	b003      	add	sp, #12
 80054be:	bd30      	pop	{r4, r5, pc}
 80054c0:	200002ec 	.word	0x200002ec

080054c4 <malloc>:
 80054c4:	4b02      	ldr	r3, [pc, #8]	; (80054d0 <malloc+0xc>)
 80054c6:	4601      	mov	r1, r0
 80054c8:	6818      	ldr	r0, [r3, #0]
 80054ca:	f000 b823 	b.w	8005514 <_malloc_r>
 80054ce:	bf00      	nop
 80054d0:	200000a0 	.word	0x200000a0

080054d4 <sbrk_aligned>:
 80054d4:	b570      	push	{r4, r5, r6, lr}
 80054d6:	4e0e      	ldr	r6, [pc, #56]	; (8005510 <sbrk_aligned+0x3c>)
 80054d8:	460c      	mov	r4, r1
 80054da:	6831      	ldr	r1, [r6, #0]
 80054dc:	4605      	mov	r5, r0
 80054de:	b911      	cbnz	r1, 80054e6 <sbrk_aligned+0x12>
 80054e0:	f000 fdc8 	bl	8006074 <_sbrk_r>
 80054e4:	6030      	str	r0, [r6, #0]
 80054e6:	4621      	mov	r1, r4
 80054e8:	4628      	mov	r0, r5
 80054ea:	f000 fdc3 	bl	8006074 <_sbrk_r>
 80054ee:	1c43      	adds	r3, r0, #1
 80054f0:	d00a      	beq.n	8005508 <sbrk_aligned+0x34>
 80054f2:	1cc4      	adds	r4, r0, #3
 80054f4:	f024 0403 	bic.w	r4, r4, #3
 80054f8:	42a0      	cmp	r0, r4
 80054fa:	d007      	beq.n	800550c <sbrk_aligned+0x38>
 80054fc:	1a21      	subs	r1, r4, r0
 80054fe:	4628      	mov	r0, r5
 8005500:	f000 fdb8 	bl	8006074 <_sbrk_r>
 8005504:	3001      	adds	r0, #1
 8005506:	d101      	bne.n	800550c <sbrk_aligned+0x38>
 8005508:	f04f 34ff 	mov.w	r4, #4294967295
 800550c:	4620      	mov	r0, r4
 800550e:	bd70      	pop	{r4, r5, r6, pc}
 8005510:	200002f0 	.word	0x200002f0

08005514 <_malloc_r>:
 8005514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005518:	1ccd      	adds	r5, r1, #3
 800551a:	f025 0503 	bic.w	r5, r5, #3
 800551e:	3508      	adds	r5, #8
 8005520:	2d0c      	cmp	r5, #12
 8005522:	bf38      	it	cc
 8005524:	250c      	movcc	r5, #12
 8005526:	2d00      	cmp	r5, #0
 8005528:	4607      	mov	r7, r0
 800552a:	db01      	blt.n	8005530 <_malloc_r+0x1c>
 800552c:	42a9      	cmp	r1, r5
 800552e:	d905      	bls.n	800553c <_malloc_r+0x28>
 8005530:	230c      	movs	r3, #12
 8005532:	603b      	str	r3, [r7, #0]
 8005534:	2600      	movs	r6, #0
 8005536:	4630      	mov	r0, r6
 8005538:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800553c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005610 <_malloc_r+0xfc>
 8005540:	f000 f868 	bl	8005614 <__malloc_lock>
 8005544:	f8d8 3000 	ldr.w	r3, [r8]
 8005548:	461c      	mov	r4, r3
 800554a:	bb5c      	cbnz	r4, 80055a4 <_malloc_r+0x90>
 800554c:	4629      	mov	r1, r5
 800554e:	4638      	mov	r0, r7
 8005550:	f7ff ffc0 	bl	80054d4 <sbrk_aligned>
 8005554:	1c43      	adds	r3, r0, #1
 8005556:	4604      	mov	r4, r0
 8005558:	d155      	bne.n	8005606 <_malloc_r+0xf2>
 800555a:	f8d8 4000 	ldr.w	r4, [r8]
 800555e:	4626      	mov	r6, r4
 8005560:	2e00      	cmp	r6, #0
 8005562:	d145      	bne.n	80055f0 <_malloc_r+0xdc>
 8005564:	2c00      	cmp	r4, #0
 8005566:	d048      	beq.n	80055fa <_malloc_r+0xe6>
 8005568:	6823      	ldr	r3, [r4, #0]
 800556a:	4631      	mov	r1, r6
 800556c:	4638      	mov	r0, r7
 800556e:	eb04 0903 	add.w	r9, r4, r3
 8005572:	f000 fd7f 	bl	8006074 <_sbrk_r>
 8005576:	4581      	cmp	r9, r0
 8005578:	d13f      	bne.n	80055fa <_malloc_r+0xe6>
 800557a:	6821      	ldr	r1, [r4, #0]
 800557c:	1a6d      	subs	r5, r5, r1
 800557e:	4629      	mov	r1, r5
 8005580:	4638      	mov	r0, r7
 8005582:	f7ff ffa7 	bl	80054d4 <sbrk_aligned>
 8005586:	3001      	adds	r0, #1
 8005588:	d037      	beq.n	80055fa <_malloc_r+0xe6>
 800558a:	6823      	ldr	r3, [r4, #0]
 800558c:	442b      	add	r3, r5
 800558e:	6023      	str	r3, [r4, #0]
 8005590:	f8d8 3000 	ldr.w	r3, [r8]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d038      	beq.n	800560a <_malloc_r+0xf6>
 8005598:	685a      	ldr	r2, [r3, #4]
 800559a:	42a2      	cmp	r2, r4
 800559c:	d12b      	bne.n	80055f6 <_malloc_r+0xe2>
 800559e:	2200      	movs	r2, #0
 80055a0:	605a      	str	r2, [r3, #4]
 80055a2:	e00f      	b.n	80055c4 <_malloc_r+0xb0>
 80055a4:	6822      	ldr	r2, [r4, #0]
 80055a6:	1b52      	subs	r2, r2, r5
 80055a8:	d41f      	bmi.n	80055ea <_malloc_r+0xd6>
 80055aa:	2a0b      	cmp	r2, #11
 80055ac:	d917      	bls.n	80055de <_malloc_r+0xca>
 80055ae:	1961      	adds	r1, r4, r5
 80055b0:	42a3      	cmp	r3, r4
 80055b2:	6025      	str	r5, [r4, #0]
 80055b4:	bf18      	it	ne
 80055b6:	6059      	strne	r1, [r3, #4]
 80055b8:	6863      	ldr	r3, [r4, #4]
 80055ba:	bf08      	it	eq
 80055bc:	f8c8 1000 	streq.w	r1, [r8]
 80055c0:	5162      	str	r2, [r4, r5]
 80055c2:	604b      	str	r3, [r1, #4]
 80055c4:	4638      	mov	r0, r7
 80055c6:	f104 060b 	add.w	r6, r4, #11
 80055ca:	f000 f829 	bl	8005620 <__malloc_unlock>
 80055ce:	f026 0607 	bic.w	r6, r6, #7
 80055d2:	1d23      	adds	r3, r4, #4
 80055d4:	1af2      	subs	r2, r6, r3
 80055d6:	d0ae      	beq.n	8005536 <_malloc_r+0x22>
 80055d8:	1b9b      	subs	r3, r3, r6
 80055da:	50a3      	str	r3, [r4, r2]
 80055dc:	e7ab      	b.n	8005536 <_malloc_r+0x22>
 80055de:	42a3      	cmp	r3, r4
 80055e0:	6862      	ldr	r2, [r4, #4]
 80055e2:	d1dd      	bne.n	80055a0 <_malloc_r+0x8c>
 80055e4:	f8c8 2000 	str.w	r2, [r8]
 80055e8:	e7ec      	b.n	80055c4 <_malloc_r+0xb0>
 80055ea:	4623      	mov	r3, r4
 80055ec:	6864      	ldr	r4, [r4, #4]
 80055ee:	e7ac      	b.n	800554a <_malloc_r+0x36>
 80055f0:	4634      	mov	r4, r6
 80055f2:	6876      	ldr	r6, [r6, #4]
 80055f4:	e7b4      	b.n	8005560 <_malloc_r+0x4c>
 80055f6:	4613      	mov	r3, r2
 80055f8:	e7cc      	b.n	8005594 <_malloc_r+0x80>
 80055fa:	230c      	movs	r3, #12
 80055fc:	603b      	str	r3, [r7, #0]
 80055fe:	4638      	mov	r0, r7
 8005600:	f000 f80e 	bl	8005620 <__malloc_unlock>
 8005604:	e797      	b.n	8005536 <_malloc_r+0x22>
 8005606:	6025      	str	r5, [r4, #0]
 8005608:	e7dc      	b.n	80055c4 <_malloc_r+0xb0>
 800560a:	605b      	str	r3, [r3, #4]
 800560c:	deff      	udf	#255	; 0xff
 800560e:	bf00      	nop
 8005610:	200002ec 	.word	0x200002ec

08005614 <__malloc_lock>:
 8005614:	4801      	ldr	r0, [pc, #4]	; (800561c <__malloc_lock+0x8>)
 8005616:	f7ff bee8 	b.w	80053ea <__retarget_lock_acquire_recursive>
 800561a:	bf00      	nop
 800561c:	200002e8 	.word	0x200002e8

08005620 <__malloc_unlock>:
 8005620:	4801      	ldr	r0, [pc, #4]	; (8005628 <__malloc_unlock+0x8>)
 8005622:	f7ff bee3 	b.w	80053ec <__retarget_lock_release_recursive>
 8005626:	bf00      	nop
 8005628:	200002e8 	.word	0x200002e8

0800562c <__sfputc_r>:
 800562c:	6893      	ldr	r3, [r2, #8]
 800562e:	3b01      	subs	r3, #1
 8005630:	2b00      	cmp	r3, #0
 8005632:	b410      	push	{r4}
 8005634:	6093      	str	r3, [r2, #8]
 8005636:	da08      	bge.n	800564a <__sfputc_r+0x1e>
 8005638:	6994      	ldr	r4, [r2, #24]
 800563a:	42a3      	cmp	r3, r4
 800563c:	db01      	blt.n	8005642 <__sfputc_r+0x16>
 800563e:	290a      	cmp	r1, #10
 8005640:	d103      	bne.n	800564a <__sfputc_r+0x1e>
 8005642:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005646:	f000 bc5e 	b.w	8005f06 <__swbuf_r>
 800564a:	6813      	ldr	r3, [r2, #0]
 800564c:	1c58      	adds	r0, r3, #1
 800564e:	6010      	str	r0, [r2, #0]
 8005650:	7019      	strb	r1, [r3, #0]
 8005652:	4608      	mov	r0, r1
 8005654:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005658:	4770      	bx	lr

0800565a <__sfputs_r>:
 800565a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800565c:	4606      	mov	r6, r0
 800565e:	460f      	mov	r7, r1
 8005660:	4614      	mov	r4, r2
 8005662:	18d5      	adds	r5, r2, r3
 8005664:	42ac      	cmp	r4, r5
 8005666:	d101      	bne.n	800566c <__sfputs_r+0x12>
 8005668:	2000      	movs	r0, #0
 800566a:	e007      	b.n	800567c <__sfputs_r+0x22>
 800566c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005670:	463a      	mov	r2, r7
 8005672:	4630      	mov	r0, r6
 8005674:	f7ff ffda 	bl	800562c <__sfputc_r>
 8005678:	1c43      	adds	r3, r0, #1
 800567a:	d1f3      	bne.n	8005664 <__sfputs_r+0xa>
 800567c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005680 <_vfiprintf_r>:
 8005680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005684:	460d      	mov	r5, r1
 8005686:	b09d      	sub	sp, #116	; 0x74
 8005688:	4614      	mov	r4, r2
 800568a:	4698      	mov	r8, r3
 800568c:	4606      	mov	r6, r0
 800568e:	b118      	cbz	r0, 8005698 <_vfiprintf_r+0x18>
 8005690:	6a03      	ldr	r3, [r0, #32]
 8005692:	b90b      	cbnz	r3, 8005698 <_vfiprintf_r+0x18>
 8005694:	f7ff fc8a 	bl	8004fac <__sinit>
 8005698:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800569a:	07d9      	lsls	r1, r3, #31
 800569c:	d405      	bmi.n	80056aa <_vfiprintf_r+0x2a>
 800569e:	89ab      	ldrh	r3, [r5, #12]
 80056a0:	059a      	lsls	r2, r3, #22
 80056a2:	d402      	bmi.n	80056aa <_vfiprintf_r+0x2a>
 80056a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80056a6:	f7ff fea0 	bl	80053ea <__retarget_lock_acquire_recursive>
 80056aa:	89ab      	ldrh	r3, [r5, #12]
 80056ac:	071b      	lsls	r3, r3, #28
 80056ae:	d501      	bpl.n	80056b4 <_vfiprintf_r+0x34>
 80056b0:	692b      	ldr	r3, [r5, #16]
 80056b2:	b99b      	cbnz	r3, 80056dc <_vfiprintf_r+0x5c>
 80056b4:	4629      	mov	r1, r5
 80056b6:	4630      	mov	r0, r6
 80056b8:	f000 fc62 	bl	8005f80 <__swsetup_r>
 80056bc:	b170      	cbz	r0, 80056dc <_vfiprintf_r+0x5c>
 80056be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80056c0:	07dc      	lsls	r4, r3, #31
 80056c2:	d504      	bpl.n	80056ce <_vfiprintf_r+0x4e>
 80056c4:	f04f 30ff 	mov.w	r0, #4294967295
 80056c8:	b01d      	add	sp, #116	; 0x74
 80056ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056ce:	89ab      	ldrh	r3, [r5, #12]
 80056d0:	0598      	lsls	r0, r3, #22
 80056d2:	d4f7      	bmi.n	80056c4 <_vfiprintf_r+0x44>
 80056d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80056d6:	f7ff fe89 	bl	80053ec <__retarget_lock_release_recursive>
 80056da:	e7f3      	b.n	80056c4 <_vfiprintf_r+0x44>
 80056dc:	2300      	movs	r3, #0
 80056de:	9309      	str	r3, [sp, #36]	; 0x24
 80056e0:	2320      	movs	r3, #32
 80056e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80056e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80056ea:	2330      	movs	r3, #48	; 0x30
 80056ec:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80058a0 <_vfiprintf_r+0x220>
 80056f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80056f4:	f04f 0901 	mov.w	r9, #1
 80056f8:	4623      	mov	r3, r4
 80056fa:	469a      	mov	sl, r3
 80056fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005700:	b10a      	cbz	r2, 8005706 <_vfiprintf_r+0x86>
 8005702:	2a25      	cmp	r2, #37	; 0x25
 8005704:	d1f9      	bne.n	80056fa <_vfiprintf_r+0x7a>
 8005706:	ebba 0b04 	subs.w	fp, sl, r4
 800570a:	d00b      	beq.n	8005724 <_vfiprintf_r+0xa4>
 800570c:	465b      	mov	r3, fp
 800570e:	4622      	mov	r2, r4
 8005710:	4629      	mov	r1, r5
 8005712:	4630      	mov	r0, r6
 8005714:	f7ff ffa1 	bl	800565a <__sfputs_r>
 8005718:	3001      	adds	r0, #1
 800571a:	f000 80a9 	beq.w	8005870 <_vfiprintf_r+0x1f0>
 800571e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005720:	445a      	add	r2, fp
 8005722:	9209      	str	r2, [sp, #36]	; 0x24
 8005724:	f89a 3000 	ldrb.w	r3, [sl]
 8005728:	2b00      	cmp	r3, #0
 800572a:	f000 80a1 	beq.w	8005870 <_vfiprintf_r+0x1f0>
 800572e:	2300      	movs	r3, #0
 8005730:	f04f 32ff 	mov.w	r2, #4294967295
 8005734:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005738:	f10a 0a01 	add.w	sl, sl, #1
 800573c:	9304      	str	r3, [sp, #16]
 800573e:	9307      	str	r3, [sp, #28]
 8005740:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005744:	931a      	str	r3, [sp, #104]	; 0x68
 8005746:	4654      	mov	r4, sl
 8005748:	2205      	movs	r2, #5
 800574a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800574e:	4854      	ldr	r0, [pc, #336]	; (80058a0 <_vfiprintf_r+0x220>)
 8005750:	f7fa fd4e 	bl	80001f0 <memchr>
 8005754:	9a04      	ldr	r2, [sp, #16]
 8005756:	b9d8      	cbnz	r0, 8005790 <_vfiprintf_r+0x110>
 8005758:	06d1      	lsls	r1, r2, #27
 800575a:	bf44      	itt	mi
 800575c:	2320      	movmi	r3, #32
 800575e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005762:	0713      	lsls	r3, r2, #28
 8005764:	bf44      	itt	mi
 8005766:	232b      	movmi	r3, #43	; 0x2b
 8005768:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800576c:	f89a 3000 	ldrb.w	r3, [sl]
 8005770:	2b2a      	cmp	r3, #42	; 0x2a
 8005772:	d015      	beq.n	80057a0 <_vfiprintf_r+0x120>
 8005774:	9a07      	ldr	r2, [sp, #28]
 8005776:	4654      	mov	r4, sl
 8005778:	2000      	movs	r0, #0
 800577a:	f04f 0c0a 	mov.w	ip, #10
 800577e:	4621      	mov	r1, r4
 8005780:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005784:	3b30      	subs	r3, #48	; 0x30
 8005786:	2b09      	cmp	r3, #9
 8005788:	d94d      	bls.n	8005826 <_vfiprintf_r+0x1a6>
 800578a:	b1b0      	cbz	r0, 80057ba <_vfiprintf_r+0x13a>
 800578c:	9207      	str	r2, [sp, #28]
 800578e:	e014      	b.n	80057ba <_vfiprintf_r+0x13a>
 8005790:	eba0 0308 	sub.w	r3, r0, r8
 8005794:	fa09 f303 	lsl.w	r3, r9, r3
 8005798:	4313      	orrs	r3, r2
 800579a:	9304      	str	r3, [sp, #16]
 800579c:	46a2      	mov	sl, r4
 800579e:	e7d2      	b.n	8005746 <_vfiprintf_r+0xc6>
 80057a0:	9b03      	ldr	r3, [sp, #12]
 80057a2:	1d19      	adds	r1, r3, #4
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	9103      	str	r1, [sp, #12]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	bfbb      	ittet	lt
 80057ac:	425b      	neglt	r3, r3
 80057ae:	f042 0202 	orrlt.w	r2, r2, #2
 80057b2:	9307      	strge	r3, [sp, #28]
 80057b4:	9307      	strlt	r3, [sp, #28]
 80057b6:	bfb8      	it	lt
 80057b8:	9204      	strlt	r2, [sp, #16]
 80057ba:	7823      	ldrb	r3, [r4, #0]
 80057bc:	2b2e      	cmp	r3, #46	; 0x2e
 80057be:	d10c      	bne.n	80057da <_vfiprintf_r+0x15a>
 80057c0:	7863      	ldrb	r3, [r4, #1]
 80057c2:	2b2a      	cmp	r3, #42	; 0x2a
 80057c4:	d134      	bne.n	8005830 <_vfiprintf_r+0x1b0>
 80057c6:	9b03      	ldr	r3, [sp, #12]
 80057c8:	1d1a      	adds	r2, r3, #4
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	9203      	str	r2, [sp, #12]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	bfb8      	it	lt
 80057d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80057d6:	3402      	adds	r4, #2
 80057d8:	9305      	str	r3, [sp, #20]
 80057da:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80058b0 <_vfiprintf_r+0x230>
 80057de:	7821      	ldrb	r1, [r4, #0]
 80057e0:	2203      	movs	r2, #3
 80057e2:	4650      	mov	r0, sl
 80057e4:	f7fa fd04 	bl	80001f0 <memchr>
 80057e8:	b138      	cbz	r0, 80057fa <_vfiprintf_r+0x17a>
 80057ea:	9b04      	ldr	r3, [sp, #16]
 80057ec:	eba0 000a 	sub.w	r0, r0, sl
 80057f0:	2240      	movs	r2, #64	; 0x40
 80057f2:	4082      	lsls	r2, r0
 80057f4:	4313      	orrs	r3, r2
 80057f6:	3401      	adds	r4, #1
 80057f8:	9304      	str	r3, [sp, #16]
 80057fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057fe:	4829      	ldr	r0, [pc, #164]	; (80058a4 <_vfiprintf_r+0x224>)
 8005800:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005804:	2206      	movs	r2, #6
 8005806:	f7fa fcf3 	bl	80001f0 <memchr>
 800580a:	2800      	cmp	r0, #0
 800580c:	d03f      	beq.n	800588e <_vfiprintf_r+0x20e>
 800580e:	4b26      	ldr	r3, [pc, #152]	; (80058a8 <_vfiprintf_r+0x228>)
 8005810:	bb1b      	cbnz	r3, 800585a <_vfiprintf_r+0x1da>
 8005812:	9b03      	ldr	r3, [sp, #12]
 8005814:	3307      	adds	r3, #7
 8005816:	f023 0307 	bic.w	r3, r3, #7
 800581a:	3308      	adds	r3, #8
 800581c:	9303      	str	r3, [sp, #12]
 800581e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005820:	443b      	add	r3, r7
 8005822:	9309      	str	r3, [sp, #36]	; 0x24
 8005824:	e768      	b.n	80056f8 <_vfiprintf_r+0x78>
 8005826:	fb0c 3202 	mla	r2, ip, r2, r3
 800582a:	460c      	mov	r4, r1
 800582c:	2001      	movs	r0, #1
 800582e:	e7a6      	b.n	800577e <_vfiprintf_r+0xfe>
 8005830:	2300      	movs	r3, #0
 8005832:	3401      	adds	r4, #1
 8005834:	9305      	str	r3, [sp, #20]
 8005836:	4619      	mov	r1, r3
 8005838:	f04f 0c0a 	mov.w	ip, #10
 800583c:	4620      	mov	r0, r4
 800583e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005842:	3a30      	subs	r2, #48	; 0x30
 8005844:	2a09      	cmp	r2, #9
 8005846:	d903      	bls.n	8005850 <_vfiprintf_r+0x1d0>
 8005848:	2b00      	cmp	r3, #0
 800584a:	d0c6      	beq.n	80057da <_vfiprintf_r+0x15a>
 800584c:	9105      	str	r1, [sp, #20]
 800584e:	e7c4      	b.n	80057da <_vfiprintf_r+0x15a>
 8005850:	fb0c 2101 	mla	r1, ip, r1, r2
 8005854:	4604      	mov	r4, r0
 8005856:	2301      	movs	r3, #1
 8005858:	e7f0      	b.n	800583c <_vfiprintf_r+0x1bc>
 800585a:	ab03      	add	r3, sp, #12
 800585c:	9300      	str	r3, [sp, #0]
 800585e:	462a      	mov	r2, r5
 8005860:	4b12      	ldr	r3, [pc, #72]	; (80058ac <_vfiprintf_r+0x22c>)
 8005862:	a904      	add	r1, sp, #16
 8005864:	4630      	mov	r0, r6
 8005866:	f3af 8000 	nop.w
 800586a:	4607      	mov	r7, r0
 800586c:	1c78      	adds	r0, r7, #1
 800586e:	d1d6      	bne.n	800581e <_vfiprintf_r+0x19e>
 8005870:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005872:	07d9      	lsls	r1, r3, #31
 8005874:	d405      	bmi.n	8005882 <_vfiprintf_r+0x202>
 8005876:	89ab      	ldrh	r3, [r5, #12]
 8005878:	059a      	lsls	r2, r3, #22
 800587a:	d402      	bmi.n	8005882 <_vfiprintf_r+0x202>
 800587c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800587e:	f7ff fdb5 	bl	80053ec <__retarget_lock_release_recursive>
 8005882:	89ab      	ldrh	r3, [r5, #12]
 8005884:	065b      	lsls	r3, r3, #25
 8005886:	f53f af1d 	bmi.w	80056c4 <_vfiprintf_r+0x44>
 800588a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800588c:	e71c      	b.n	80056c8 <_vfiprintf_r+0x48>
 800588e:	ab03      	add	r3, sp, #12
 8005890:	9300      	str	r3, [sp, #0]
 8005892:	462a      	mov	r2, r5
 8005894:	4b05      	ldr	r3, [pc, #20]	; (80058ac <_vfiprintf_r+0x22c>)
 8005896:	a904      	add	r1, sp, #16
 8005898:	4630      	mov	r0, r6
 800589a:	f000 f879 	bl	8005990 <_printf_i>
 800589e:	e7e4      	b.n	800586a <_vfiprintf_r+0x1ea>
 80058a0:	0800650e 	.word	0x0800650e
 80058a4:	08006518 	.word	0x08006518
 80058a8:	00000000 	.word	0x00000000
 80058ac:	0800565b 	.word	0x0800565b
 80058b0:	08006514 	.word	0x08006514

080058b4 <_printf_common>:
 80058b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058b8:	4616      	mov	r6, r2
 80058ba:	4699      	mov	r9, r3
 80058bc:	688a      	ldr	r2, [r1, #8]
 80058be:	690b      	ldr	r3, [r1, #16]
 80058c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80058c4:	4293      	cmp	r3, r2
 80058c6:	bfb8      	it	lt
 80058c8:	4613      	movlt	r3, r2
 80058ca:	6033      	str	r3, [r6, #0]
 80058cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80058d0:	4607      	mov	r7, r0
 80058d2:	460c      	mov	r4, r1
 80058d4:	b10a      	cbz	r2, 80058da <_printf_common+0x26>
 80058d6:	3301      	adds	r3, #1
 80058d8:	6033      	str	r3, [r6, #0]
 80058da:	6823      	ldr	r3, [r4, #0]
 80058dc:	0699      	lsls	r1, r3, #26
 80058de:	bf42      	ittt	mi
 80058e0:	6833      	ldrmi	r3, [r6, #0]
 80058e2:	3302      	addmi	r3, #2
 80058e4:	6033      	strmi	r3, [r6, #0]
 80058e6:	6825      	ldr	r5, [r4, #0]
 80058e8:	f015 0506 	ands.w	r5, r5, #6
 80058ec:	d106      	bne.n	80058fc <_printf_common+0x48>
 80058ee:	f104 0a19 	add.w	sl, r4, #25
 80058f2:	68e3      	ldr	r3, [r4, #12]
 80058f4:	6832      	ldr	r2, [r6, #0]
 80058f6:	1a9b      	subs	r3, r3, r2
 80058f8:	42ab      	cmp	r3, r5
 80058fa:	dc26      	bgt.n	800594a <_printf_common+0x96>
 80058fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005900:	1e13      	subs	r3, r2, #0
 8005902:	6822      	ldr	r2, [r4, #0]
 8005904:	bf18      	it	ne
 8005906:	2301      	movne	r3, #1
 8005908:	0692      	lsls	r2, r2, #26
 800590a:	d42b      	bmi.n	8005964 <_printf_common+0xb0>
 800590c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005910:	4649      	mov	r1, r9
 8005912:	4638      	mov	r0, r7
 8005914:	47c0      	blx	r8
 8005916:	3001      	adds	r0, #1
 8005918:	d01e      	beq.n	8005958 <_printf_common+0xa4>
 800591a:	6823      	ldr	r3, [r4, #0]
 800591c:	6922      	ldr	r2, [r4, #16]
 800591e:	f003 0306 	and.w	r3, r3, #6
 8005922:	2b04      	cmp	r3, #4
 8005924:	bf02      	ittt	eq
 8005926:	68e5      	ldreq	r5, [r4, #12]
 8005928:	6833      	ldreq	r3, [r6, #0]
 800592a:	1aed      	subeq	r5, r5, r3
 800592c:	68a3      	ldr	r3, [r4, #8]
 800592e:	bf0c      	ite	eq
 8005930:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005934:	2500      	movne	r5, #0
 8005936:	4293      	cmp	r3, r2
 8005938:	bfc4      	itt	gt
 800593a:	1a9b      	subgt	r3, r3, r2
 800593c:	18ed      	addgt	r5, r5, r3
 800593e:	2600      	movs	r6, #0
 8005940:	341a      	adds	r4, #26
 8005942:	42b5      	cmp	r5, r6
 8005944:	d11a      	bne.n	800597c <_printf_common+0xc8>
 8005946:	2000      	movs	r0, #0
 8005948:	e008      	b.n	800595c <_printf_common+0xa8>
 800594a:	2301      	movs	r3, #1
 800594c:	4652      	mov	r2, sl
 800594e:	4649      	mov	r1, r9
 8005950:	4638      	mov	r0, r7
 8005952:	47c0      	blx	r8
 8005954:	3001      	adds	r0, #1
 8005956:	d103      	bne.n	8005960 <_printf_common+0xac>
 8005958:	f04f 30ff 	mov.w	r0, #4294967295
 800595c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005960:	3501      	adds	r5, #1
 8005962:	e7c6      	b.n	80058f2 <_printf_common+0x3e>
 8005964:	18e1      	adds	r1, r4, r3
 8005966:	1c5a      	adds	r2, r3, #1
 8005968:	2030      	movs	r0, #48	; 0x30
 800596a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800596e:	4422      	add	r2, r4
 8005970:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005974:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005978:	3302      	adds	r3, #2
 800597a:	e7c7      	b.n	800590c <_printf_common+0x58>
 800597c:	2301      	movs	r3, #1
 800597e:	4622      	mov	r2, r4
 8005980:	4649      	mov	r1, r9
 8005982:	4638      	mov	r0, r7
 8005984:	47c0      	blx	r8
 8005986:	3001      	adds	r0, #1
 8005988:	d0e6      	beq.n	8005958 <_printf_common+0xa4>
 800598a:	3601      	adds	r6, #1
 800598c:	e7d9      	b.n	8005942 <_printf_common+0x8e>
	...

08005990 <_printf_i>:
 8005990:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005994:	7e0f      	ldrb	r7, [r1, #24]
 8005996:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005998:	2f78      	cmp	r7, #120	; 0x78
 800599a:	4691      	mov	r9, r2
 800599c:	4680      	mov	r8, r0
 800599e:	460c      	mov	r4, r1
 80059a0:	469a      	mov	sl, r3
 80059a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80059a6:	d807      	bhi.n	80059b8 <_printf_i+0x28>
 80059a8:	2f62      	cmp	r7, #98	; 0x62
 80059aa:	d80a      	bhi.n	80059c2 <_printf_i+0x32>
 80059ac:	2f00      	cmp	r7, #0
 80059ae:	f000 80d4 	beq.w	8005b5a <_printf_i+0x1ca>
 80059b2:	2f58      	cmp	r7, #88	; 0x58
 80059b4:	f000 80c0 	beq.w	8005b38 <_printf_i+0x1a8>
 80059b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80059c0:	e03a      	b.n	8005a38 <_printf_i+0xa8>
 80059c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80059c6:	2b15      	cmp	r3, #21
 80059c8:	d8f6      	bhi.n	80059b8 <_printf_i+0x28>
 80059ca:	a101      	add	r1, pc, #4	; (adr r1, 80059d0 <_printf_i+0x40>)
 80059cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80059d0:	08005a29 	.word	0x08005a29
 80059d4:	08005a3d 	.word	0x08005a3d
 80059d8:	080059b9 	.word	0x080059b9
 80059dc:	080059b9 	.word	0x080059b9
 80059e0:	080059b9 	.word	0x080059b9
 80059e4:	080059b9 	.word	0x080059b9
 80059e8:	08005a3d 	.word	0x08005a3d
 80059ec:	080059b9 	.word	0x080059b9
 80059f0:	080059b9 	.word	0x080059b9
 80059f4:	080059b9 	.word	0x080059b9
 80059f8:	080059b9 	.word	0x080059b9
 80059fc:	08005b41 	.word	0x08005b41
 8005a00:	08005a69 	.word	0x08005a69
 8005a04:	08005afb 	.word	0x08005afb
 8005a08:	080059b9 	.word	0x080059b9
 8005a0c:	080059b9 	.word	0x080059b9
 8005a10:	08005b63 	.word	0x08005b63
 8005a14:	080059b9 	.word	0x080059b9
 8005a18:	08005a69 	.word	0x08005a69
 8005a1c:	080059b9 	.word	0x080059b9
 8005a20:	080059b9 	.word	0x080059b9
 8005a24:	08005b03 	.word	0x08005b03
 8005a28:	682b      	ldr	r3, [r5, #0]
 8005a2a:	1d1a      	adds	r2, r3, #4
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	602a      	str	r2, [r5, #0]
 8005a30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e09f      	b.n	8005b7c <_printf_i+0x1ec>
 8005a3c:	6820      	ldr	r0, [r4, #0]
 8005a3e:	682b      	ldr	r3, [r5, #0]
 8005a40:	0607      	lsls	r7, r0, #24
 8005a42:	f103 0104 	add.w	r1, r3, #4
 8005a46:	6029      	str	r1, [r5, #0]
 8005a48:	d501      	bpl.n	8005a4e <_printf_i+0xbe>
 8005a4a:	681e      	ldr	r6, [r3, #0]
 8005a4c:	e003      	b.n	8005a56 <_printf_i+0xc6>
 8005a4e:	0646      	lsls	r6, r0, #25
 8005a50:	d5fb      	bpl.n	8005a4a <_printf_i+0xba>
 8005a52:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005a56:	2e00      	cmp	r6, #0
 8005a58:	da03      	bge.n	8005a62 <_printf_i+0xd2>
 8005a5a:	232d      	movs	r3, #45	; 0x2d
 8005a5c:	4276      	negs	r6, r6
 8005a5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a62:	485a      	ldr	r0, [pc, #360]	; (8005bcc <_printf_i+0x23c>)
 8005a64:	230a      	movs	r3, #10
 8005a66:	e012      	b.n	8005a8e <_printf_i+0xfe>
 8005a68:	682b      	ldr	r3, [r5, #0]
 8005a6a:	6820      	ldr	r0, [r4, #0]
 8005a6c:	1d19      	adds	r1, r3, #4
 8005a6e:	6029      	str	r1, [r5, #0]
 8005a70:	0605      	lsls	r5, r0, #24
 8005a72:	d501      	bpl.n	8005a78 <_printf_i+0xe8>
 8005a74:	681e      	ldr	r6, [r3, #0]
 8005a76:	e002      	b.n	8005a7e <_printf_i+0xee>
 8005a78:	0641      	lsls	r1, r0, #25
 8005a7a:	d5fb      	bpl.n	8005a74 <_printf_i+0xe4>
 8005a7c:	881e      	ldrh	r6, [r3, #0]
 8005a7e:	4853      	ldr	r0, [pc, #332]	; (8005bcc <_printf_i+0x23c>)
 8005a80:	2f6f      	cmp	r7, #111	; 0x6f
 8005a82:	bf0c      	ite	eq
 8005a84:	2308      	moveq	r3, #8
 8005a86:	230a      	movne	r3, #10
 8005a88:	2100      	movs	r1, #0
 8005a8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a8e:	6865      	ldr	r5, [r4, #4]
 8005a90:	60a5      	str	r5, [r4, #8]
 8005a92:	2d00      	cmp	r5, #0
 8005a94:	bfa2      	ittt	ge
 8005a96:	6821      	ldrge	r1, [r4, #0]
 8005a98:	f021 0104 	bicge.w	r1, r1, #4
 8005a9c:	6021      	strge	r1, [r4, #0]
 8005a9e:	b90e      	cbnz	r6, 8005aa4 <_printf_i+0x114>
 8005aa0:	2d00      	cmp	r5, #0
 8005aa2:	d04b      	beq.n	8005b3c <_printf_i+0x1ac>
 8005aa4:	4615      	mov	r5, r2
 8005aa6:	fbb6 f1f3 	udiv	r1, r6, r3
 8005aaa:	fb03 6711 	mls	r7, r3, r1, r6
 8005aae:	5dc7      	ldrb	r7, [r0, r7]
 8005ab0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005ab4:	4637      	mov	r7, r6
 8005ab6:	42bb      	cmp	r3, r7
 8005ab8:	460e      	mov	r6, r1
 8005aba:	d9f4      	bls.n	8005aa6 <_printf_i+0x116>
 8005abc:	2b08      	cmp	r3, #8
 8005abe:	d10b      	bne.n	8005ad8 <_printf_i+0x148>
 8005ac0:	6823      	ldr	r3, [r4, #0]
 8005ac2:	07de      	lsls	r6, r3, #31
 8005ac4:	d508      	bpl.n	8005ad8 <_printf_i+0x148>
 8005ac6:	6923      	ldr	r3, [r4, #16]
 8005ac8:	6861      	ldr	r1, [r4, #4]
 8005aca:	4299      	cmp	r1, r3
 8005acc:	bfde      	ittt	le
 8005ace:	2330      	movle	r3, #48	; 0x30
 8005ad0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005ad4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005ad8:	1b52      	subs	r2, r2, r5
 8005ada:	6122      	str	r2, [r4, #16]
 8005adc:	f8cd a000 	str.w	sl, [sp]
 8005ae0:	464b      	mov	r3, r9
 8005ae2:	aa03      	add	r2, sp, #12
 8005ae4:	4621      	mov	r1, r4
 8005ae6:	4640      	mov	r0, r8
 8005ae8:	f7ff fee4 	bl	80058b4 <_printf_common>
 8005aec:	3001      	adds	r0, #1
 8005aee:	d14a      	bne.n	8005b86 <_printf_i+0x1f6>
 8005af0:	f04f 30ff 	mov.w	r0, #4294967295
 8005af4:	b004      	add	sp, #16
 8005af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005afa:	6823      	ldr	r3, [r4, #0]
 8005afc:	f043 0320 	orr.w	r3, r3, #32
 8005b00:	6023      	str	r3, [r4, #0]
 8005b02:	4833      	ldr	r0, [pc, #204]	; (8005bd0 <_printf_i+0x240>)
 8005b04:	2778      	movs	r7, #120	; 0x78
 8005b06:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005b0a:	6823      	ldr	r3, [r4, #0]
 8005b0c:	6829      	ldr	r1, [r5, #0]
 8005b0e:	061f      	lsls	r7, r3, #24
 8005b10:	f851 6b04 	ldr.w	r6, [r1], #4
 8005b14:	d402      	bmi.n	8005b1c <_printf_i+0x18c>
 8005b16:	065f      	lsls	r7, r3, #25
 8005b18:	bf48      	it	mi
 8005b1a:	b2b6      	uxthmi	r6, r6
 8005b1c:	07df      	lsls	r7, r3, #31
 8005b1e:	bf48      	it	mi
 8005b20:	f043 0320 	orrmi.w	r3, r3, #32
 8005b24:	6029      	str	r1, [r5, #0]
 8005b26:	bf48      	it	mi
 8005b28:	6023      	strmi	r3, [r4, #0]
 8005b2a:	b91e      	cbnz	r6, 8005b34 <_printf_i+0x1a4>
 8005b2c:	6823      	ldr	r3, [r4, #0]
 8005b2e:	f023 0320 	bic.w	r3, r3, #32
 8005b32:	6023      	str	r3, [r4, #0]
 8005b34:	2310      	movs	r3, #16
 8005b36:	e7a7      	b.n	8005a88 <_printf_i+0xf8>
 8005b38:	4824      	ldr	r0, [pc, #144]	; (8005bcc <_printf_i+0x23c>)
 8005b3a:	e7e4      	b.n	8005b06 <_printf_i+0x176>
 8005b3c:	4615      	mov	r5, r2
 8005b3e:	e7bd      	b.n	8005abc <_printf_i+0x12c>
 8005b40:	682b      	ldr	r3, [r5, #0]
 8005b42:	6826      	ldr	r6, [r4, #0]
 8005b44:	6961      	ldr	r1, [r4, #20]
 8005b46:	1d18      	adds	r0, r3, #4
 8005b48:	6028      	str	r0, [r5, #0]
 8005b4a:	0635      	lsls	r5, r6, #24
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	d501      	bpl.n	8005b54 <_printf_i+0x1c4>
 8005b50:	6019      	str	r1, [r3, #0]
 8005b52:	e002      	b.n	8005b5a <_printf_i+0x1ca>
 8005b54:	0670      	lsls	r0, r6, #25
 8005b56:	d5fb      	bpl.n	8005b50 <_printf_i+0x1c0>
 8005b58:	8019      	strh	r1, [r3, #0]
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	6123      	str	r3, [r4, #16]
 8005b5e:	4615      	mov	r5, r2
 8005b60:	e7bc      	b.n	8005adc <_printf_i+0x14c>
 8005b62:	682b      	ldr	r3, [r5, #0]
 8005b64:	1d1a      	adds	r2, r3, #4
 8005b66:	602a      	str	r2, [r5, #0]
 8005b68:	681d      	ldr	r5, [r3, #0]
 8005b6a:	6862      	ldr	r2, [r4, #4]
 8005b6c:	2100      	movs	r1, #0
 8005b6e:	4628      	mov	r0, r5
 8005b70:	f7fa fb3e 	bl	80001f0 <memchr>
 8005b74:	b108      	cbz	r0, 8005b7a <_printf_i+0x1ea>
 8005b76:	1b40      	subs	r0, r0, r5
 8005b78:	6060      	str	r0, [r4, #4]
 8005b7a:	6863      	ldr	r3, [r4, #4]
 8005b7c:	6123      	str	r3, [r4, #16]
 8005b7e:	2300      	movs	r3, #0
 8005b80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b84:	e7aa      	b.n	8005adc <_printf_i+0x14c>
 8005b86:	6923      	ldr	r3, [r4, #16]
 8005b88:	462a      	mov	r2, r5
 8005b8a:	4649      	mov	r1, r9
 8005b8c:	4640      	mov	r0, r8
 8005b8e:	47d0      	blx	sl
 8005b90:	3001      	adds	r0, #1
 8005b92:	d0ad      	beq.n	8005af0 <_printf_i+0x160>
 8005b94:	6823      	ldr	r3, [r4, #0]
 8005b96:	079b      	lsls	r3, r3, #30
 8005b98:	d413      	bmi.n	8005bc2 <_printf_i+0x232>
 8005b9a:	68e0      	ldr	r0, [r4, #12]
 8005b9c:	9b03      	ldr	r3, [sp, #12]
 8005b9e:	4298      	cmp	r0, r3
 8005ba0:	bfb8      	it	lt
 8005ba2:	4618      	movlt	r0, r3
 8005ba4:	e7a6      	b.n	8005af4 <_printf_i+0x164>
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	4632      	mov	r2, r6
 8005baa:	4649      	mov	r1, r9
 8005bac:	4640      	mov	r0, r8
 8005bae:	47d0      	blx	sl
 8005bb0:	3001      	adds	r0, #1
 8005bb2:	d09d      	beq.n	8005af0 <_printf_i+0x160>
 8005bb4:	3501      	adds	r5, #1
 8005bb6:	68e3      	ldr	r3, [r4, #12]
 8005bb8:	9903      	ldr	r1, [sp, #12]
 8005bba:	1a5b      	subs	r3, r3, r1
 8005bbc:	42ab      	cmp	r3, r5
 8005bbe:	dcf2      	bgt.n	8005ba6 <_printf_i+0x216>
 8005bc0:	e7eb      	b.n	8005b9a <_printf_i+0x20a>
 8005bc2:	2500      	movs	r5, #0
 8005bc4:	f104 0619 	add.w	r6, r4, #25
 8005bc8:	e7f5      	b.n	8005bb6 <_printf_i+0x226>
 8005bca:	bf00      	nop
 8005bcc:	0800651f 	.word	0x0800651f
 8005bd0:	08006530 	.word	0x08006530

08005bd4 <__sflush_r>:
 8005bd4:	898a      	ldrh	r2, [r1, #12]
 8005bd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bda:	4605      	mov	r5, r0
 8005bdc:	0710      	lsls	r0, r2, #28
 8005bde:	460c      	mov	r4, r1
 8005be0:	d458      	bmi.n	8005c94 <__sflush_r+0xc0>
 8005be2:	684b      	ldr	r3, [r1, #4]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	dc05      	bgt.n	8005bf4 <__sflush_r+0x20>
 8005be8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	dc02      	bgt.n	8005bf4 <__sflush_r+0x20>
 8005bee:	2000      	movs	r0, #0
 8005bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bf4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005bf6:	2e00      	cmp	r6, #0
 8005bf8:	d0f9      	beq.n	8005bee <__sflush_r+0x1a>
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005c00:	682f      	ldr	r7, [r5, #0]
 8005c02:	6a21      	ldr	r1, [r4, #32]
 8005c04:	602b      	str	r3, [r5, #0]
 8005c06:	d032      	beq.n	8005c6e <__sflush_r+0x9a>
 8005c08:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005c0a:	89a3      	ldrh	r3, [r4, #12]
 8005c0c:	075a      	lsls	r2, r3, #29
 8005c0e:	d505      	bpl.n	8005c1c <__sflush_r+0x48>
 8005c10:	6863      	ldr	r3, [r4, #4]
 8005c12:	1ac0      	subs	r0, r0, r3
 8005c14:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005c16:	b10b      	cbz	r3, 8005c1c <__sflush_r+0x48>
 8005c18:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c1a:	1ac0      	subs	r0, r0, r3
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	4602      	mov	r2, r0
 8005c20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c22:	6a21      	ldr	r1, [r4, #32]
 8005c24:	4628      	mov	r0, r5
 8005c26:	47b0      	blx	r6
 8005c28:	1c43      	adds	r3, r0, #1
 8005c2a:	89a3      	ldrh	r3, [r4, #12]
 8005c2c:	d106      	bne.n	8005c3c <__sflush_r+0x68>
 8005c2e:	6829      	ldr	r1, [r5, #0]
 8005c30:	291d      	cmp	r1, #29
 8005c32:	d82b      	bhi.n	8005c8c <__sflush_r+0xb8>
 8005c34:	4a29      	ldr	r2, [pc, #164]	; (8005cdc <__sflush_r+0x108>)
 8005c36:	410a      	asrs	r2, r1
 8005c38:	07d6      	lsls	r6, r2, #31
 8005c3a:	d427      	bmi.n	8005c8c <__sflush_r+0xb8>
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	6062      	str	r2, [r4, #4]
 8005c40:	04d9      	lsls	r1, r3, #19
 8005c42:	6922      	ldr	r2, [r4, #16]
 8005c44:	6022      	str	r2, [r4, #0]
 8005c46:	d504      	bpl.n	8005c52 <__sflush_r+0x7e>
 8005c48:	1c42      	adds	r2, r0, #1
 8005c4a:	d101      	bne.n	8005c50 <__sflush_r+0x7c>
 8005c4c:	682b      	ldr	r3, [r5, #0]
 8005c4e:	b903      	cbnz	r3, 8005c52 <__sflush_r+0x7e>
 8005c50:	6560      	str	r0, [r4, #84]	; 0x54
 8005c52:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c54:	602f      	str	r7, [r5, #0]
 8005c56:	2900      	cmp	r1, #0
 8005c58:	d0c9      	beq.n	8005bee <__sflush_r+0x1a>
 8005c5a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c5e:	4299      	cmp	r1, r3
 8005c60:	d002      	beq.n	8005c68 <__sflush_r+0x94>
 8005c62:	4628      	mov	r0, r5
 8005c64:	f7ff fbe2 	bl	800542c <_free_r>
 8005c68:	2000      	movs	r0, #0
 8005c6a:	6360      	str	r0, [r4, #52]	; 0x34
 8005c6c:	e7c0      	b.n	8005bf0 <__sflush_r+0x1c>
 8005c6e:	2301      	movs	r3, #1
 8005c70:	4628      	mov	r0, r5
 8005c72:	47b0      	blx	r6
 8005c74:	1c41      	adds	r1, r0, #1
 8005c76:	d1c8      	bne.n	8005c0a <__sflush_r+0x36>
 8005c78:	682b      	ldr	r3, [r5, #0]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d0c5      	beq.n	8005c0a <__sflush_r+0x36>
 8005c7e:	2b1d      	cmp	r3, #29
 8005c80:	d001      	beq.n	8005c86 <__sflush_r+0xb2>
 8005c82:	2b16      	cmp	r3, #22
 8005c84:	d101      	bne.n	8005c8a <__sflush_r+0xb6>
 8005c86:	602f      	str	r7, [r5, #0]
 8005c88:	e7b1      	b.n	8005bee <__sflush_r+0x1a>
 8005c8a:	89a3      	ldrh	r3, [r4, #12]
 8005c8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c90:	81a3      	strh	r3, [r4, #12]
 8005c92:	e7ad      	b.n	8005bf0 <__sflush_r+0x1c>
 8005c94:	690f      	ldr	r7, [r1, #16]
 8005c96:	2f00      	cmp	r7, #0
 8005c98:	d0a9      	beq.n	8005bee <__sflush_r+0x1a>
 8005c9a:	0793      	lsls	r3, r2, #30
 8005c9c:	680e      	ldr	r6, [r1, #0]
 8005c9e:	bf08      	it	eq
 8005ca0:	694b      	ldreq	r3, [r1, #20]
 8005ca2:	600f      	str	r7, [r1, #0]
 8005ca4:	bf18      	it	ne
 8005ca6:	2300      	movne	r3, #0
 8005ca8:	eba6 0807 	sub.w	r8, r6, r7
 8005cac:	608b      	str	r3, [r1, #8]
 8005cae:	f1b8 0f00 	cmp.w	r8, #0
 8005cb2:	dd9c      	ble.n	8005bee <__sflush_r+0x1a>
 8005cb4:	6a21      	ldr	r1, [r4, #32]
 8005cb6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005cb8:	4643      	mov	r3, r8
 8005cba:	463a      	mov	r2, r7
 8005cbc:	4628      	mov	r0, r5
 8005cbe:	47b0      	blx	r6
 8005cc0:	2800      	cmp	r0, #0
 8005cc2:	dc06      	bgt.n	8005cd2 <__sflush_r+0xfe>
 8005cc4:	89a3      	ldrh	r3, [r4, #12]
 8005cc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cca:	81a3      	strh	r3, [r4, #12]
 8005ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8005cd0:	e78e      	b.n	8005bf0 <__sflush_r+0x1c>
 8005cd2:	4407      	add	r7, r0
 8005cd4:	eba8 0800 	sub.w	r8, r8, r0
 8005cd8:	e7e9      	b.n	8005cae <__sflush_r+0xda>
 8005cda:	bf00      	nop
 8005cdc:	dfbffffe 	.word	0xdfbffffe

08005ce0 <_fflush_r>:
 8005ce0:	b538      	push	{r3, r4, r5, lr}
 8005ce2:	690b      	ldr	r3, [r1, #16]
 8005ce4:	4605      	mov	r5, r0
 8005ce6:	460c      	mov	r4, r1
 8005ce8:	b913      	cbnz	r3, 8005cf0 <_fflush_r+0x10>
 8005cea:	2500      	movs	r5, #0
 8005cec:	4628      	mov	r0, r5
 8005cee:	bd38      	pop	{r3, r4, r5, pc}
 8005cf0:	b118      	cbz	r0, 8005cfa <_fflush_r+0x1a>
 8005cf2:	6a03      	ldr	r3, [r0, #32]
 8005cf4:	b90b      	cbnz	r3, 8005cfa <_fflush_r+0x1a>
 8005cf6:	f7ff f959 	bl	8004fac <__sinit>
 8005cfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d0f3      	beq.n	8005cea <_fflush_r+0xa>
 8005d02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005d04:	07d0      	lsls	r0, r2, #31
 8005d06:	d404      	bmi.n	8005d12 <_fflush_r+0x32>
 8005d08:	0599      	lsls	r1, r3, #22
 8005d0a:	d402      	bmi.n	8005d12 <_fflush_r+0x32>
 8005d0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d0e:	f7ff fb6c 	bl	80053ea <__retarget_lock_acquire_recursive>
 8005d12:	4628      	mov	r0, r5
 8005d14:	4621      	mov	r1, r4
 8005d16:	f7ff ff5d 	bl	8005bd4 <__sflush_r>
 8005d1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d1c:	07da      	lsls	r2, r3, #31
 8005d1e:	4605      	mov	r5, r0
 8005d20:	d4e4      	bmi.n	8005cec <_fflush_r+0xc>
 8005d22:	89a3      	ldrh	r3, [r4, #12]
 8005d24:	059b      	lsls	r3, r3, #22
 8005d26:	d4e1      	bmi.n	8005cec <_fflush_r+0xc>
 8005d28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d2a:	f7ff fb5f 	bl	80053ec <__retarget_lock_release_recursive>
 8005d2e:	e7dd      	b.n	8005cec <_fflush_r+0xc>

08005d30 <fiprintf>:
 8005d30:	b40e      	push	{r1, r2, r3}
 8005d32:	b503      	push	{r0, r1, lr}
 8005d34:	4601      	mov	r1, r0
 8005d36:	ab03      	add	r3, sp, #12
 8005d38:	4805      	ldr	r0, [pc, #20]	; (8005d50 <fiprintf+0x20>)
 8005d3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d3e:	6800      	ldr	r0, [r0, #0]
 8005d40:	9301      	str	r3, [sp, #4]
 8005d42:	f7ff fc9d 	bl	8005680 <_vfiprintf_r>
 8005d46:	b002      	add	sp, #8
 8005d48:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d4c:	b003      	add	sp, #12
 8005d4e:	4770      	bx	lr
 8005d50:	200000a0 	.word	0x200000a0

08005d54 <_getc_r>:
 8005d54:	b538      	push	{r3, r4, r5, lr}
 8005d56:	460c      	mov	r4, r1
 8005d58:	4605      	mov	r5, r0
 8005d5a:	b118      	cbz	r0, 8005d64 <_getc_r+0x10>
 8005d5c:	6a03      	ldr	r3, [r0, #32]
 8005d5e:	b90b      	cbnz	r3, 8005d64 <_getc_r+0x10>
 8005d60:	f7ff f924 	bl	8004fac <__sinit>
 8005d64:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d66:	07d8      	lsls	r0, r3, #31
 8005d68:	d405      	bmi.n	8005d76 <_getc_r+0x22>
 8005d6a:	89a3      	ldrh	r3, [r4, #12]
 8005d6c:	0599      	lsls	r1, r3, #22
 8005d6e:	d402      	bmi.n	8005d76 <_getc_r+0x22>
 8005d70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d72:	f7ff fb3a 	bl	80053ea <__retarget_lock_acquire_recursive>
 8005d76:	6863      	ldr	r3, [r4, #4]
 8005d78:	3b01      	subs	r3, #1
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	6063      	str	r3, [r4, #4]
 8005d7e:	da0f      	bge.n	8005da0 <_getc_r+0x4c>
 8005d80:	4628      	mov	r0, r5
 8005d82:	4621      	mov	r1, r4
 8005d84:	f000 f8a7 	bl	8005ed6 <__srget_r>
 8005d88:	4605      	mov	r5, r0
 8005d8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d8c:	07da      	lsls	r2, r3, #31
 8005d8e:	d405      	bmi.n	8005d9c <_getc_r+0x48>
 8005d90:	89a3      	ldrh	r3, [r4, #12]
 8005d92:	059b      	lsls	r3, r3, #22
 8005d94:	d402      	bmi.n	8005d9c <_getc_r+0x48>
 8005d96:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d98:	f7ff fb28 	bl	80053ec <__retarget_lock_release_recursive>
 8005d9c:	4628      	mov	r0, r5
 8005d9e:	bd38      	pop	{r3, r4, r5, pc}
 8005da0:	6823      	ldr	r3, [r4, #0]
 8005da2:	1c5a      	adds	r2, r3, #1
 8005da4:	6022      	str	r2, [r4, #0]
 8005da6:	781d      	ldrb	r5, [r3, #0]
 8005da8:	e7ef      	b.n	8005d8a <_getc_r+0x36>

08005daa <__swhatbuf_r>:
 8005daa:	b570      	push	{r4, r5, r6, lr}
 8005dac:	460c      	mov	r4, r1
 8005dae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005db2:	2900      	cmp	r1, #0
 8005db4:	b096      	sub	sp, #88	; 0x58
 8005db6:	4615      	mov	r5, r2
 8005db8:	461e      	mov	r6, r3
 8005dba:	da0d      	bge.n	8005dd8 <__swhatbuf_r+0x2e>
 8005dbc:	89a3      	ldrh	r3, [r4, #12]
 8005dbe:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005dc2:	f04f 0100 	mov.w	r1, #0
 8005dc6:	bf0c      	ite	eq
 8005dc8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005dcc:	2340      	movne	r3, #64	; 0x40
 8005dce:	2000      	movs	r0, #0
 8005dd0:	6031      	str	r1, [r6, #0]
 8005dd2:	602b      	str	r3, [r5, #0]
 8005dd4:	b016      	add	sp, #88	; 0x58
 8005dd6:	bd70      	pop	{r4, r5, r6, pc}
 8005dd8:	466a      	mov	r2, sp
 8005dda:	f000 f929 	bl	8006030 <_fstat_r>
 8005dde:	2800      	cmp	r0, #0
 8005de0:	dbec      	blt.n	8005dbc <__swhatbuf_r+0x12>
 8005de2:	9901      	ldr	r1, [sp, #4]
 8005de4:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005de8:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005dec:	4259      	negs	r1, r3
 8005dee:	4159      	adcs	r1, r3
 8005df0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005df4:	e7eb      	b.n	8005dce <__swhatbuf_r+0x24>

08005df6 <__smakebuf_r>:
 8005df6:	898b      	ldrh	r3, [r1, #12]
 8005df8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005dfa:	079d      	lsls	r5, r3, #30
 8005dfc:	4606      	mov	r6, r0
 8005dfe:	460c      	mov	r4, r1
 8005e00:	d507      	bpl.n	8005e12 <__smakebuf_r+0x1c>
 8005e02:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005e06:	6023      	str	r3, [r4, #0]
 8005e08:	6123      	str	r3, [r4, #16]
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	6163      	str	r3, [r4, #20]
 8005e0e:	b002      	add	sp, #8
 8005e10:	bd70      	pop	{r4, r5, r6, pc}
 8005e12:	ab01      	add	r3, sp, #4
 8005e14:	466a      	mov	r2, sp
 8005e16:	f7ff ffc8 	bl	8005daa <__swhatbuf_r>
 8005e1a:	9900      	ldr	r1, [sp, #0]
 8005e1c:	4605      	mov	r5, r0
 8005e1e:	4630      	mov	r0, r6
 8005e20:	f7ff fb78 	bl	8005514 <_malloc_r>
 8005e24:	b948      	cbnz	r0, 8005e3a <__smakebuf_r+0x44>
 8005e26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e2a:	059a      	lsls	r2, r3, #22
 8005e2c:	d4ef      	bmi.n	8005e0e <__smakebuf_r+0x18>
 8005e2e:	f023 0303 	bic.w	r3, r3, #3
 8005e32:	f043 0302 	orr.w	r3, r3, #2
 8005e36:	81a3      	strh	r3, [r4, #12]
 8005e38:	e7e3      	b.n	8005e02 <__smakebuf_r+0xc>
 8005e3a:	89a3      	ldrh	r3, [r4, #12]
 8005e3c:	6020      	str	r0, [r4, #0]
 8005e3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e42:	81a3      	strh	r3, [r4, #12]
 8005e44:	9b00      	ldr	r3, [sp, #0]
 8005e46:	6163      	str	r3, [r4, #20]
 8005e48:	9b01      	ldr	r3, [sp, #4]
 8005e4a:	6120      	str	r0, [r4, #16]
 8005e4c:	b15b      	cbz	r3, 8005e66 <__smakebuf_r+0x70>
 8005e4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e52:	4630      	mov	r0, r6
 8005e54:	f000 f8fe 	bl	8006054 <_isatty_r>
 8005e58:	b128      	cbz	r0, 8005e66 <__smakebuf_r+0x70>
 8005e5a:	89a3      	ldrh	r3, [r4, #12]
 8005e5c:	f023 0303 	bic.w	r3, r3, #3
 8005e60:	f043 0301 	orr.w	r3, r3, #1
 8005e64:	81a3      	strh	r3, [r4, #12]
 8005e66:	89a3      	ldrh	r3, [r4, #12]
 8005e68:	431d      	orrs	r5, r3
 8005e6a:	81a5      	strh	r5, [r4, #12]
 8005e6c:	e7cf      	b.n	8005e0e <__smakebuf_r+0x18>

08005e6e <_putc_r>:
 8005e6e:	b570      	push	{r4, r5, r6, lr}
 8005e70:	460d      	mov	r5, r1
 8005e72:	4614      	mov	r4, r2
 8005e74:	4606      	mov	r6, r0
 8005e76:	b118      	cbz	r0, 8005e80 <_putc_r+0x12>
 8005e78:	6a03      	ldr	r3, [r0, #32]
 8005e7a:	b90b      	cbnz	r3, 8005e80 <_putc_r+0x12>
 8005e7c:	f7ff f896 	bl	8004fac <__sinit>
 8005e80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e82:	07d8      	lsls	r0, r3, #31
 8005e84:	d405      	bmi.n	8005e92 <_putc_r+0x24>
 8005e86:	89a3      	ldrh	r3, [r4, #12]
 8005e88:	0599      	lsls	r1, r3, #22
 8005e8a:	d402      	bmi.n	8005e92 <_putc_r+0x24>
 8005e8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e8e:	f7ff faac 	bl	80053ea <__retarget_lock_acquire_recursive>
 8005e92:	68a3      	ldr	r3, [r4, #8]
 8005e94:	3b01      	subs	r3, #1
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	60a3      	str	r3, [r4, #8]
 8005e9a:	da05      	bge.n	8005ea8 <_putc_r+0x3a>
 8005e9c:	69a2      	ldr	r2, [r4, #24]
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	db12      	blt.n	8005ec8 <_putc_r+0x5a>
 8005ea2:	b2eb      	uxtb	r3, r5
 8005ea4:	2b0a      	cmp	r3, #10
 8005ea6:	d00f      	beq.n	8005ec8 <_putc_r+0x5a>
 8005ea8:	6823      	ldr	r3, [r4, #0]
 8005eaa:	1c5a      	adds	r2, r3, #1
 8005eac:	6022      	str	r2, [r4, #0]
 8005eae:	701d      	strb	r5, [r3, #0]
 8005eb0:	b2ed      	uxtb	r5, r5
 8005eb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005eb4:	07da      	lsls	r2, r3, #31
 8005eb6:	d405      	bmi.n	8005ec4 <_putc_r+0x56>
 8005eb8:	89a3      	ldrh	r3, [r4, #12]
 8005eba:	059b      	lsls	r3, r3, #22
 8005ebc:	d402      	bmi.n	8005ec4 <_putc_r+0x56>
 8005ebe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ec0:	f7ff fa94 	bl	80053ec <__retarget_lock_release_recursive>
 8005ec4:	4628      	mov	r0, r5
 8005ec6:	bd70      	pop	{r4, r5, r6, pc}
 8005ec8:	4629      	mov	r1, r5
 8005eca:	4622      	mov	r2, r4
 8005ecc:	4630      	mov	r0, r6
 8005ece:	f000 f81a 	bl	8005f06 <__swbuf_r>
 8005ed2:	4605      	mov	r5, r0
 8005ed4:	e7ed      	b.n	8005eb2 <_putc_r+0x44>

08005ed6 <__srget_r>:
 8005ed6:	b538      	push	{r3, r4, r5, lr}
 8005ed8:	460c      	mov	r4, r1
 8005eda:	4605      	mov	r5, r0
 8005edc:	b118      	cbz	r0, 8005ee6 <__srget_r+0x10>
 8005ede:	6a03      	ldr	r3, [r0, #32]
 8005ee0:	b90b      	cbnz	r3, 8005ee6 <__srget_r+0x10>
 8005ee2:	f7ff f863 	bl	8004fac <__sinit>
 8005ee6:	4621      	mov	r1, r4
 8005ee8:	4628      	mov	r0, r5
 8005eea:	f000 f8e9 	bl	80060c0 <__srefill_r>
 8005eee:	b938      	cbnz	r0, 8005f00 <__srget_r+0x2a>
 8005ef0:	6863      	ldr	r3, [r4, #4]
 8005ef2:	3b01      	subs	r3, #1
 8005ef4:	6063      	str	r3, [r4, #4]
 8005ef6:	6823      	ldr	r3, [r4, #0]
 8005ef8:	1c5a      	adds	r2, r3, #1
 8005efa:	6022      	str	r2, [r4, #0]
 8005efc:	7818      	ldrb	r0, [r3, #0]
 8005efe:	bd38      	pop	{r3, r4, r5, pc}
 8005f00:	f04f 30ff 	mov.w	r0, #4294967295
 8005f04:	e7fb      	b.n	8005efe <__srget_r+0x28>

08005f06 <__swbuf_r>:
 8005f06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f08:	460e      	mov	r6, r1
 8005f0a:	4614      	mov	r4, r2
 8005f0c:	4605      	mov	r5, r0
 8005f0e:	b118      	cbz	r0, 8005f18 <__swbuf_r+0x12>
 8005f10:	6a03      	ldr	r3, [r0, #32]
 8005f12:	b90b      	cbnz	r3, 8005f18 <__swbuf_r+0x12>
 8005f14:	f7ff f84a 	bl	8004fac <__sinit>
 8005f18:	69a3      	ldr	r3, [r4, #24]
 8005f1a:	60a3      	str	r3, [r4, #8]
 8005f1c:	89a3      	ldrh	r3, [r4, #12]
 8005f1e:	071a      	lsls	r2, r3, #28
 8005f20:	d525      	bpl.n	8005f6e <__swbuf_r+0x68>
 8005f22:	6923      	ldr	r3, [r4, #16]
 8005f24:	b31b      	cbz	r3, 8005f6e <__swbuf_r+0x68>
 8005f26:	6823      	ldr	r3, [r4, #0]
 8005f28:	6922      	ldr	r2, [r4, #16]
 8005f2a:	1a98      	subs	r0, r3, r2
 8005f2c:	6963      	ldr	r3, [r4, #20]
 8005f2e:	b2f6      	uxtb	r6, r6
 8005f30:	4283      	cmp	r3, r0
 8005f32:	4637      	mov	r7, r6
 8005f34:	dc04      	bgt.n	8005f40 <__swbuf_r+0x3a>
 8005f36:	4621      	mov	r1, r4
 8005f38:	4628      	mov	r0, r5
 8005f3a:	f7ff fed1 	bl	8005ce0 <_fflush_r>
 8005f3e:	b9e0      	cbnz	r0, 8005f7a <__swbuf_r+0x74>
 8005f40:	68a3      	ldr	r3, [r4, #8]
 8005f42:	3b01      	subs	r3, #1
 8005f44:	60a3      	str	r3, [r4, #8]
 8005f46:	6823      	ldr	r3, [r4, #0]
 8005f48:	1c5a      	adds	r2, r3, #1
 8005f4a:	6022      	str	r2, [r4, #0]
 8005f4c:	701e      	strb	r6, [r3, #0]
 8005f4e:	6962      	ldr	r2, [r4, #20]
 8005f50:	1c43      	adds	r3, r0, #1
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d004      	beq.n	8005f60 <__swbuf_r+0x5a>
 8005f56:	89a3      	ldrh	r3, [r4, #12]
 8005f58:	07db      	lsls	r3, r3, #31
 8005f5a:	d506      	bpl.n	8005f6a <__swbuf_r+0x64>
 8005f5c:	2e0a      	cmp	r6, #10
 8005f5e:	d104      	bne.n	8005f6a <__swbuf_r+0x64>
 8005f60:	4621      	mov	r1, r4
 8005f62:	4628      	mov	r0, r5
 8005f64:	f7ff febc 	bl	8005ce0 <_fflush_r>
 8005f68:	b938      	cbnz	r0, 8005f7a <__swbuf_r+0x74>
 8005f6a:	4638      	mov	r0, r7
 8005f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f6e:	4621      	mov	r1, r4
 8005f70:	4628      	mov	r0, r5
 8005f72:	f000 f805 	bl	8005f80 <__swsetup_r>
 8005f76:	2800      	cmp	r0, #0
 8005f78:	d0d5      	beq.n	8005f26 <__swbuf_r+0x20>
 8005f7a:	f04f 37ff 	mov.w	r7, #4294967295
 8005f7e:	e7f4      	b.n	8005f6a <__swbuf_r+0x64>

08005f80 <__swsetup_r>:
 8005f80:	b538      	push	{r3, r4, r5, lr}
 8005f82:	4b2a      	ldr	r3, [pc, #168]	; (800602c <__swsetup_r+0xac>)
 8005f84:	4605      	mov	r5, r0
 8005f86:	6818      	ldr	r0, [r3, #0]
 8005f88:	460c      	mov	r4, r1
 8005f8a:	b118      	cbz	r0, 8005f94 <__swsetup_r+0x14>
 8005f8c:	6a03      	ldr	r3, [r0, #32]
 8005f8e:	b90b      	cbnz	r3, 8005f94 <__swsetup_r+0x14>
 8005f90:	f7ff f80c 	bl	8004fac <__sinit>
 8005f94:	89a3      	ldrh	r3, [r4, #12]
 8005f96:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f9a:	0718      	lsls	r0, r3, #28
 8005f9c:	d422      	bmi.n	8005fe4 <__swsetup_r+0x64>
 8005f9e:	06d9      	lsls	r1, r3, #27
 8005fa0:	d407      	bmi.n	8005fb2 <__swsetup_r+0x32>
 8005fa2:	2309      	movs	r3, #9
 8005fa4:	602b      	str	r3, [r5, #0]
 8005fa6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005faa:	81a3      	strh	r3, [r4, #12]
 8005fac:	f04f 30ff 	mov.w	r0, #4294967295
 8005fb0:	e034      	b.n	800601c <__swsetup_r+0x9c>
 8005fb2:	0758      	lsls	r0, r3, #29
 8005fb4:	d512      	bpl.n	8005fdc <__swsetup_r+0x5c>
 8005fb6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005fb8:	b141      	cbz	r1, 8005fcc <__swsetup_r+0x4c>
 8005fba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005fbe:	4299      	cmp	r1, r3
 8005fc0:	d002      	beq.n	8005fc8 <__swsetup_r+0x48>
 8005fc2:	4628      	mov	r0, r5
 8005fc4:	f7ff fa32 	bl	800542c <_free_r>
 8005fc8:	2300      	movs	r3, #0
 8005fca:	6363      	str	r3, [r4, #52]	; 0x34
 8005fcc:	89a3      	ldrh	r3, [r4, #12]
 8005fce:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005fd2:	81a3      	strh	r3, [r4, #12]
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	6063      	str	r3, [r4, #4]
 8005fd8:	6923      	ldr	r3, [r4, #16]
 8005fda:	6023      	str	r3, [r4, #0]
 8005fdc:	89a3      	ldrh	r3, [r4, #12]
 8005fde:	f043 0308 	orr.w	r3, r3, #8
 8005fe2:	81a3      	strh	r3, [r4, #12]
 8005fe4:	6923      	ldr	r3, [r4, #16]
 8005fe6:	b94b      	cbnz	r3, 8005ffc <__swsetup_r+0x7c>
 8005fe8:	89a3      	ldrh	r3, [r4, #12]
 8005fea:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005fee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ff2:	d003      	beq.n	8005ffc <__swsetup_r+0x7c>
 8005ff4:	4621      	mov	r1, r4
 8005ff6:	4628      	mov	r0, r5
 8005ff8:	f7ff fefd 	bl	8005df6 <__smakebuf_r>
 8005ffc:	89a0      	ldrh	r0, [r4, #12]
 8005ffe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006002:	f010 0301 	ands.w	r3, r0, #1
 8006006:	d00a      	beq.n	800601e <__swsetup_r+0x9e>
 8006008:	2300      	movs	r3, #0
 800600a:	60a3      	str	r3, [r4, #8]
 800600c:	6963      	ldr	r3, [r4, #20]
 800600e:	425b      	negs	r3, r3
 8006010:	61a3      	str	r3, [r4, #24]
 8006012:	6923      	ldr	r3, [r4, #16]
 8006014:	b943      	cbnz	r3, 8006028 <__swsetup_r+0xa8>
 8006016:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800601a:	d1c4      	bne.n	8005fa6 <__swsetup_r+0x26>
 800601c:	bd38      	pop	{r3, r4, r5, pc}
 800601e:	0781      	lsls	r1, r0, #30
 8006020:	bf58      	it	pl
 8006022:	6963      	ldrpl	r3, [r4, #20]
 8006024:	60a3      	str	r3, [r4, #8]
 8006026:	e7f4      	b.n	8006012 <__swsetup_r+0x92>
 8006028:	2000      	movs	r0, #0
 800602a:	e7f7      	b.n	800601c <__swsetup_r+0x9c>
 800602c:	200000a0 	.word	0x200000a0

08006030 <_fstat_r>:
 8006030:	b538      	push	{r3, r4, r5, lr}
 8006032:	4d07      	ldr	r5, [pc, #28]	; (8006050 <_fstat_r+0x20>)
 8006034:	2300      	movs	r3, #0
 8006036:	4604      	mov	r4, r0
 8006038:	4608      	mov	r0, r1
 800603a:	4611      	mov	r1, r2
 800603c:	602b      	str	r3, [r5, #0]
 800603e:	f7fb f96f 	bl	8001320 <_fstat>
 8006042:	1c43      	adds	r3, r0, #1
 8006044:	d102      	bne.n	800604c <_fstat_r+0x1c>
 8006046:	682b      	ldr	r3, [r5, #0]
 8006048:	b103      	cbz	r3, 800604c <_fstat_r+0x1c>
 800604a:	6023      	str	r3, [r4, #0]
 800604c:	bd38      	pop	{r3, r4, r5, pc}
 800604e:	bf00      	nop
 8006050:	200002e4 	.word	0x200002e4

08006054 <_isatty_r>:
 8006054:	b538      	push	{r3, r4, r5, lr}
 8006056:	4d06      	ldr	r5, [pc, #24]	; (8006070 <_isatty_r+0x1c>)
 8006058:	2300      	movs	r3, #0
 800605a:	4604      	mov	r4, r0
 800605c:	4608      	mov	r0, r1
 800605e:	602b      	str	r3, [r5, #0]
 8006060:	f7fb f8cc 	bl	80011fc <_isatty>
 8006064:	1c43      	adds	r3, r0, #1
 8006066:	d102      	bne.n	800606e <_isatty_r+0x1a>
 8006068:	682b      	ldr	r3, [r5, #0]
 800606a:	b103      	cbz	r3, 800606e <_isatty_r+0x1a>
 800606c:	6023      	str	r3, [r4, #0]
 800606e:	bd38      	pop	{r3, r4, r5, pc}
 8006070:	200002e4 	.word	0x200002e4

08006074 <_sbrk_r>:
 8006074:	b538      	push	{r3, r4, r5, lr}
 8006076:	4d06      	ldr	r5, [pc, #24]	; (8006090 <_sbrk_r+0x1c>)
 8006078:	2300      	movs	r3, #0
 800607a:	4604      	mov	r4, r0
 800607c:	4608      	mov	r0, r1
 800607e:	602b      	str	r3, [r5, #0]
 8006080:	f7fb faaa 	bl	80015d8 <_sbrk>
 8006084:	1c43      	adds	r3, r0, #1
 8006086:	d102      	bne.n	800608e <_sbrk_r+0x1a>
 8006088:	682b      	ldr	r3, [r5, #0]
 800608a:	b103      	cbz	r3, 800608e <_sbrk_r+0x1a>
 800608c:	6023      	str	r3, [r4, #0]
 800608e:	bd38      	pop	{r3, r4, r5, pc}
 8006090:	200002e4 	.word	0x200002e4

08006094 <abort>:
 8006094:	b508      	push	{r3, lr}
 8006096:	2006      	movs	r0, #6
 8006098:	f000 f8b2 	bl	8006200 <raise>
 800609c:	2001      	movs	r0, #1
 800609e:	f7fb fa91 	bl	80015c4 <_exit>
	...

080060a4 <lflush>:
 80060a4:	898b      	ldrh	r3, [r1, #12]
 80060a6:	f003 0309 	and.w	r3, r3, #9
 80060aa:	2b09      	cmp	r3, #9
 80060ac:	d103      	bne.n	80060b6 <lflush+0x12>
 80060ae:	4b03      	ldr	r3, [pc, #12]	; (80060bc <lflush+0x18>)
 80060b0:	6818      	ldr	r0, [r3, #0]
 80060b2:	f7ff be15 	b.w	8005ce0 <_fflush_r>
 80060b6:	2000      	movs	r0, #0
 80060b8:	4770      	bx	lr
 80060ba:	bf00      	nop
 80060bc:	200000a0 	.word	0x200000a0

080060c0 <__srefill_r>:
 80060c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060c2:	460c      	mov	r4, r1
 80060c4:	4605      	mov	r5, r0
 80060c6:	b118      	cbz	r0, 80060d0 <__srefill_r+0x10>
 80060c8:	6a03      	ldr	r3, [r0, #32]
 80060ca:	b90b      	cbnz	r3, 80060d0 <__srefill_r+0x10>
 80060cc:	f7fe ff6e 	bl	8004fac <__sinit>
 80060d0:	2300      	movs	r3, #0
 80060d2:	6063      	str	r3, [r4, #4]
 80060d4:	89a3      	ldrh	r3, [r4, #12]
 80060d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80060da:	069e      	lsls	r6, r3, #26
 80060dc:	d502      	bpl.n	80060e4 <__srefill_r+0x24>
 80060de:	f04f 30ff 	mov.w	r0, #4294967295
 80060e2:	e05c      	b.n	800619e <__srefill_r+0xde>
 80060e4:	0758      	lsls	r0, r3, #29
 80060e6:	d448      	bmi.n	800617a <__srefill_r+0xba>
 80060e8:	06d9      	lsls	r1, r3, #27
 80060ea:	d405      	bmi.n	80060f8 <__srefill_r+0x38>
 80060ec:	2309      	movs	r3, #9
 80060ee:	602b      	str	r3, [r5, #0]
 80060f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80060f4:	81a3      	strh	r3, [r4, #12]
 80060f6:	e7f2      	b.n	80060de <__srefill_r+0x1e>
 80060f8:	071a      	lsls	r2, r3, #28
 80060fa:	d50b      	bpl.n	8006114 <__srefill_r+0x54>
 80060fc:	4621      	mov	r1, r4
 80060fe:	4628      	mov	r0, r5
 8006100:	f7ff fdee 	bl	8005ce0 <_fflush_r>
 8006104:	2800      	cmp	r0, #0
 8006106:	d1ea      	bne.n	80060de <__srefill_r+0x1e>
 8006108:	89a3      	ldrh	r3, [r4, #12]
 800610a:	60a0      	str	r0, [r4, #8]
 800610c:	f023 0308 	bic.w	r3, r3, #8
 8006110:	81a3      	strh	r3, [r4, #12]
 8006112:	61a0      	str	r0, [r4, #24]
 8006114:	89a3      	ldrh	r3, [r4, #12]
 8006116:	f043 0304 	orr.w	r3, r3, #4
 800611a:	81a3      	strh	r3, [r4, #12]
 800611c:	6923      	ldr	r3, [r4, #16]
 800611e:	b91b      	cbnz	r3, 8006128 <__srefill_r+0x68>
 8006120:	4621      	mov	r1, r4
 8006122:	4628      	mov	r0, r5
 8006124:	f7ff fe67 	bl	8005df6 <__smakebuf_r>
 8006128:	89a6      	ldrh	r6, [r4, #12]
 800612a:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 800612e:	07b3      	lsls	r3, r6, #30
 8006130:	d00f      	beq.n	8006152 <__srefill_r+0x92>
 8006132:	2301      	movs	r3, #1
 8006134:	4a1b      	ldr	r2, [pc, #108]	; (80061a4 <__srefill_r+0xe4>)
 8006136:	491c      	ldr	r1, [pc, #112]	; (80061a8 <__srefill_r+0xe8>)
 8006138:	481c      	ldr	r0, [pc, #112]	; (80061ac <__srefill_r+0xec>)
 800613a:	81a3      	strh	r3, [r4, #12]
 800613c:	f006 0609 	and.w	r6, r6, #9
 8006140:	f7fe ff4c 	bl	8004fdc <_fwalk_sglue>
 8006144:	2e09      	cmp	r6, #9
 8006146:	81a7      	strh	r7, [r4, #12]
 8006148:	d103      	bne.n	8006152 <__srefill_r+0x92>
 800614a:	4621      	mov	r1, r4
 800614c:	4628      	mov	r0, r5
 800614e:	f7ff fd41 	bl	8005bd4 <__sflush_r>
 8006152:	6922      	ldr	r2, [r4, #16]
 8006154:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006156:	6963      	ldr	r3, [r4, #20]
 8006158:	6a21      	ldr	r1, [r4, #32]
 800615a:	6022      	str	r2, [r4, #0]
 800615c:	4628      	mov	r0, r5
 800615e:	47b0      	blx	r6
 8006160:	2800      	cmp	r0, #0
 8006162:	6060      	str	r0, [r4, #4]
 8006164:	dc1c      	bgt.n	80061a0 <__srefill_r+0xe0>
 8006166:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800616a:	bf17      	itett	ne
 800616c:	2200      	movne	r2, #0
 800616e:	f043 0320 	orreq.w	r3, r3, #32
 8006172:	6062      	strne	r2, [r4, #4]
 8006174:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8006178:	e7bc      	b.n	80060f4 <__srefill_r+0x34>
 800617a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800617c:	2900      	cmp	r1, #0
 800617e:	d0cd      	beq.n	800611c <__srefill_r+0x5c>
 8006180:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006184:	4299      	cmp	r1, r3
 8006186:	d002      	beq.n	800618e <__srefill_r+0xce>
 8006188:	4628      	mov	r0, r5
 800618a:	f7ff f94f 	bl	800542c <_free_r>
 800618e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006190:	6063      	str	r3, [r4, #4]
 8006192:	2000      	movs	r0, #0
 8006194:	6360      	str	r0, [r4, #52]	; 0x34
 8006196:	2b00      	cmp	r3, #0
 8006198:	d0c0      	beq.n	800611c <__srefill_r+0x5c>
 800619a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800619c:	6023      	str	r3, [r4, #0]
 800619e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061a0:	2000      	movs	r0, #0
 80061a2:	e7fc      	b.n	800619e <__srefill_r+0xde>
 80061a4:	20000048 	.word	0x20000048
 80061a8:	080060a5 	.word	0x080060a5
 80061ac:	20000054 	.word	0x20000054

080061b0 <_raise_r>:
 80061b0:	291f      	cmp	r1, #31
 80061b2:	b538      	push	{r3, r4, r5, lr}
 80061b4:	4604      	mov	r4, r0
 80061b6:	460d      	mov	r5, r1
 80061b8:	d904      	bls.n	80061c4 <_raise_r+0x14>
 80061ba:	2316      	movs	r3, #22
 80061bc:	6003      	str	r3, [r0, #0]
 80061be:	f04f 30ff 	mov.w	r0, #4294967295
 80061c2:	bd38      	pop	{r3, r4, r5, pc}
 80061c4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80061c6:	b112      	cbz	r2, 80061ce <_raise_r+0x1e>
 80061c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80061cc:	b94b      	cbnz	r3, 80061e2 <_raise_r+0x32>
 80061ce:	4620      	mov	r0, r4
 80061d0:	f000 f830 	bl	8006234 <_getpid_r>
 80061d4:	462a      	mov	r2, r5
 80061d6:	4601      	mov	r1, r0
 80061d8:	4620      	mov	r0, r4
 80061da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061de:	f000 b817 	b.w	8006210 <_kill_r>
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d00a      	beq.n	80061fc <_raise_r+0x4c>
 80061e6:	1c59      	adds	r1, r3, #1
 80061e8:	d103      	bne.n	80061f2 <_raise_r+0x42>
 80061ea:	2316      	movs	r3, #22
 80061ec:	6003      	str	r3, [r0, #0]
 80061ee:	2001      	movs	r0, #1
 80061f0:	e7e7      	b.n	80061c2 <_raise_r+0x12>
 80061f2:	2400      	movs	r4, #0
 80061f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80061f8:	4628      	mov	r0, r5
 80061fa:	4798      	blx	r3
 80061fc:	2000      	movs	r0, #0
 80061fe:	e7e0      	b.n	80061c2 <_raise_r+0x12>

08006200 <raise>:
 8006200:	4b02      	ldr	r3, [pc, #8]	; (800620c <raise+0xc>)
 8006202:	4601      	mov	r1, r0
 8006204:	6818      	ldr	r0, [r3, #0]
 8006206:	f7ff bfd3 	b.w	80061b0 <_raise_r>
 800620a:	bf00      	nop
 800620c:	200000a0 	.word	0x200000a0

08006210 <_kill_r>:
 8006210:	b538      	push	{r3, r4, r5, lr}
 8006212:	4d07      	ldr	r5, [pc, #28]	; (8006230 <_kill_r+0x20>)
 8006214:	2300      	movs	r3, #0
 8006216:	4604      	mov	r4, r0
 8006218:	4608      	mov	r0, r1
 800621a:	4611      	mov	r1, r2
 800621c:	602b      	str	r3, [r5, #0]
 800621e:	f7fb f9c1 	bl	80015a4 <_kill>
 8006222:	1c43      	adds	r3, r0, #1
 8006224:	d102      	bne.n	800622c <_kill_r+0x1c>
 8006226:	682b      	ldr	r3, [r5, #0]
 8006228:	b103      	cbz	r3, 800622c <_kill_r+0x1c>
 800622a:	6023      	str	r3, [r4, #0]
 800622c:	bd38      	pop	{r3, r4, r5, pc}
 800622e:	bf00      	nop
 8006230:	200002e4 	.word	0x200002e4

08006234 <_getpid_r>:
 8006234:	f7fb b9ae 	b.w	8001594 <_getpid>

08006238 <_init>:
 8006238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800623a:	bf00      	nop
 800623c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800623e:	bc08      	pop	{r3}
 8006240:	469e      	mov	lr, r3
 8006242:	4770      	bx	lr

08006244 <_fini>:
 8006244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006246:	bf00      	nop
 8006248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800624a:	bc08      	pop	{r3}
 800624c:	469e      	mov	lr, r3
 800624e:	4770      	bx	lr
