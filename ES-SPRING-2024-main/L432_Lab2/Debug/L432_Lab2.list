
L432_Lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004194  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08004324  08004324  00014324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043f4  080043f4  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080043f4  080043f4  000143f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080043fc  080043fc  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043fc  080043fc  000143fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004400  08004400  00014400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004404  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  20000068  0800446c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  0800446c  00020264  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ba48  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c4d  00000000  00000000  0002bb23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000970  00000000  00000000  0002d770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000072b  00000000  00000000  0002e0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020ae9  00000000  00000000  0002e80b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bea4  00000000  00000000  0004f2f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c1155  00000000  00000000  0005b198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002e64  00000000  00000000  0011c2f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0011f154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800430c 	.word	0x0800430c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	0800430c 	.word	0x0800430c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000590:	b086      	sub	sp, #24
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000594:	f000 fb5b 	bl	8000c4e <HAL_Init>
  /* USER CODE BEGIN Init */
  char ch;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000598:	f000 f888 	bl	80006ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059c:	f000 f918 	bl	80007d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005a0:	f000 f8e6 	bl	8000770 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart2);
 80005a4:	4838      	ldr	r0, [pc, #224]	; (8000688 <main+0xfc>)
 80005a6:	f000 f963 	bl	8000870 <RetargetInit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("System up and running!\n\r");
 80005aa:	4838      	ldr	r0, [pc, #224]	; (800068c <main+0x100>)
 80005ac:	f002 fe7e 	bl	80032ac <iprintf>

  int bufferSize = 50;
 80005b0:	2332      	movs	r3, #50	; 0x32
 80005b2:	613b      	str	r3, [r7, #16]
  char buffer[bufferSize];
 80005b4:	6939      	ldr	r1, [r7, #16]
 80005b6:	1e4b      	subs	r3, r1, #1
 80005b8:	60fb      	str	r3, [r7, #12]
 80005ba:	460a      	mov	r2, r1
 80005bc:	2300      	movs	r3, #0
 80005be:	4690      	mov	r8, r2
 80005c0:	4699      	mov	r9, r3
 80005c2:	f04f 0200 	mov.w	r2, #0
 80005c6:	f04f 0300 	mov.w	r3, #0
 80005ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80005ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80005d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80005d6:	460a      	mov	r2, r1
 80005d8:	2300      	movs	r3, #0
 80005da:	4614      	mov	r4, r2
 80005dc:	461d      	mov	r5, r3
 80005de:	f04f 0200 	mov.w	r2, #0
 80005e2:	f04f 0300 	mov.w	r3, #0
 80005e6:	00eb      	lsls	r3, r5, #3
 80005e8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80005ec:	00e2      	lsls	r2, r4, #3
 80005ee:	460b      	mov	r3, r1
 80005f0:	3307      	adds	r3, #7
 80005f2:	08db      	lsrs	r3, r3, #3
 80005f4:	00db      	lsls	r3, r3, #3
 80005f6:	ebad 0d03 	sub.w	sp, sp, r3
 80005fa:	466b      	mov	r3, sp
 80005fc:	3300      	adds	r3, #0
 80005fe:	60bb      	str	r3, [r7, #8]
  int index = 0;
 8000600:	2300      	movs	r3, #0
 8000602:	617b      	str	r3, [r7, #20]

  while (1)
  {
    /* USER CODE END WHILE */
	ch = getchar();
 8000604:	f002 fe4a 	bl	800329c <getchar>
 8000608:	4603      	mov	r3, r0
 800060a:	71fb      	strb	r3, [r7, #7]
	if(ch == '\r')
 800060c:	79fb      	ldrb	r3, [r7, #7]
 800060e:	2b0d      	cmp	r3, #13
 8000610:	d12d      	bne.n	800066e <main+0xe2>
	{
		buffer[index] = 0;
 8000612:	68ba      	ldr	r2, [r7, #8]
 8000614:	697b      	ldr	r3, [r7, #20]
 8000616:	4413      	add	r3, r2
 8000618:	2200      	movs	r2, #0
 800061a:	701a      	strb	r2, [r3, #0]
		printf("\n\r");
 800061c:	481c      	ldr	r0, [pc, #112]	; (8000690 <main+0x104>)
 800061e:	f002 fe45 	bl	80032ac <iprintf>

		if(strcmp(buffer, "LON") == 0)
 8000622:	491c      	ldr	r1, [pc, #112]	; (8000694 <main+0x108>)
 8000624:	68b8      	ldr	r0, [r7, #8]
 8000626:	f7ff fdd3 	bl	80001d0 <strcmp>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d108      	bne.n	8000642 <main+0xb6>
		{
			printf("I am on!\n\r");
 8000630:	4819      	ldr	r0, [pc, #100]	; (8000698 <main+0x10c>)
 8000632:	f002 fe3b 	bl	80032ac <iprintf>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000636:	2201      	movs	r2, #1
 8000638:	2108      	movs	r1, #8
 800063a:	4818      	ldr	r0, [pc, #96]	; (800069c <main+0x110>)
 800063c:	f000 fdcc 	bl	80011d8 <HAL_GPIO_WritePin>
 8000640:	e012      	b.n	8000668 <main+0xdc>
		}
		else if(strcmp(buffer, "LOF") == 0)
 8000642:	4917      	ldr	r1, [pc, #92]	; (80006a0 <main+0x114>)
 8000644:	68b8      	ldr	r0, [r7, #8]
 8000646:	f7ff fdc3 	bl	80001d0 <strcmp>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d108      	bne.n	8000662 <main+0xd6>
		{
			printf("I am off!\n\r");
 8000650:	4814      	ldr	r0, [pc, #80]	; (80006a4 <main+0x118>)
 8000652:	f002 fe2b 	bl	80032ac <iprintf>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000656:	2200      	movs	r2, #0
 8000658:	2108      	movs	r1, #8
 800065a:	4810      	ldr	r0, [pc, #64]	; (800069c <main+0x110>)
 800065c:	f000 fdbc 	bl	80011d8 <HAL_GPIO_WritePin>
 8000660:	e002      	b.n	8000668 <main+0xdc>
		}
		else
		{
			printf("Unknown Command!\n\r");
 8000662:	4811      	ldr	r0, [pc, #68]	; (80006a8 <main+0x11c>)
 8000664:	f002 fe22 	bl	80032ac <iprintf>
		}

		index = 0;
 8000668:	2300      	movs	r3, #0
 800066a:	617b      	str	r3, [r7, #20]
 800066c:	e7ca      	b.n	8000604 <main+0x78>
	}
	else {
		putchar(ch);
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	4618      	mov	r0, r3
 8000672:	f002 fe2d 	bl	80032d0 <putchar>
		buffer[index] = ch;
 8000676:	68ba      	ldr	r2, [r7, #8]
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	4413      	add	r3, r2
 800067c:	79fa      	ldrb	r2, [r7, #7]
 800067e:	701a      	strb	r2, [r3, #0]
		index++;
 8000680:	697b      	ldr	r3, [r7, #20]
 8000682:	3301      	adds	r3, #1
 8000684:	617b      	str	r3, [r7, #20]
	ch = getchar();
 8000686:	e7bd      	b.n	8000604 <main+0x78>
 8000688:	20000084 	.word	0x20000084
 800068c:	08004324 	.word	0x08004324
 8000690:	08004340 	.word	0x08004340
 8000694:	08004344 	.word	0x08004344
 8000698:	08004348 	.word	0x08004348
 800069c:	48000400 	.word	0x48000400
 80006a0:	08004354 	.word	0x08004354
 80006a4:	08004358 	.word	0x08004358
 80006a8:	08004364 	.word	0x08004364

080006ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b096      	sub	sp, #88	; 0x58
 80006b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b2:	f107 0314 	add.w	r3, r7, #20
 80006b6:	2244      	movs	r2, #68	; 0x44
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f002 ff01 	bl	80034c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c0:	463b      	mov	r3, r7
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
 80006ca:	60da      	str	r2, [r3, #12]
 80006cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006ce:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006d2:	f000 fdb7 	bl	8001244 <HAL_PWREx_ControlVoltageScaling>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006dc:	f000 f8c2 	bl	8000864 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006e0:	f000 fd92 	bl	8001208 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006e4:	4b21      	ldr	r3, [pc, #132]	; (800076c <SystemClock_Config+0xc0>)
 80006e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80006ea:	4a20      	ldr	r2, [pc, #128]	; (800076c <SystemClock_Config+0xc0>)
 80006ec:	f023 0318 	bic.w	r3, r3, #24
 80006f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80006f4:	2314      	movs	r3, #20
 80006f6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006f8:	2301      	movs	r3, #1
 80006fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006fc:	2301      	movs	r3, #1
 80006fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000700:	2300      	movs	r3, #0
 8000702:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000704:	2360      	movs	r3, #96	; 0x60
 8000706:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000708:	2302      	movs	r3, #2
 800070a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800070c:	2301      	movs	r3, #1
 800070e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000710:	2301      	movs	r3, #1
 8000712:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000714:	2310      	movs	r3, #16
 8000716:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000718:	2307      	movs	r3, #7
 800071a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800071c:	2302      	movs	r3, #2
 800071e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000720:	2302      	movs	r3, #2
 8000722:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000724:	f107 0314 	add.w	r3, r7, #20
 8000728:	4618      	mov	r0, r3
 800072a:	f000 fde1 	bl	80012f0 <HAL_RCC_OscConfig>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000734:	f000 f896 	bl	8000864 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000738:	230f      	movs	r3, #15
 800073a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073c:	2303      	movs	r3, #3
 800073e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800074c:	463b      	mov	r3, r7
 800074e:	2101      	movs	r1, #1
 8000750:	4618      	mov	r0, r3
 8000752:	f001 f9e1 	bl	8001b18 <HAL_RCC_ClockConfig>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800075c:	f000 f882 	bl	8000864 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000760:	f001 fdf4 	bl	800234c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000764:	bf00      	nop
 8000766:	3758      	adds	r7, #88	; 0x58
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40021000 	.word	0x40021000

08000770 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000774:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <MX_USART2_UART_Init+0x58>)
 8000776:	4a15      	ldr	r2, [pc, #84]	; (80007cc <MX_USART2_UART_Init+0x5c>)
 8000778:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800077a:	4b13      	ldr	r3, [pc, #76]	; (80007c8 <MX_USART2_UART_Init+0x58>)
 800077c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000780:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000782:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <MX_USART2_UART_Init+0x58>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000788:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <MX_USART2_UART_Init+0x58>)
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800078e:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <MX_USART2_UART_Init+0x58>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000794:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <MX_USART2_UART_Init+0x58>)
 8000796:	220c      	movs	r2, #12
 8000798:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079a:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <MX_USART2_UART_Init+0x58>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a0:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <MX_USART2_UART_Init+0x58>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007a6:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <MX_USART2_UART_Init+0x58>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <MX_USART2_UART_Init+0x58>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007b2:	4805      	ldr	r0, [pc, #20]	; (80007c8 <MX_USART2_UART_Init+0x58>)
 80007b4:	f001 fecc 	bl	8002550 <HAL_UART_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007be:	f000 f851 	bl	8000864 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000084 	.word	0x20000084
 80007cc:	40004400 	.word	0x40004400

080007d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b088      	sub	sp, #32
 80007d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d6:	f107 030c 	add.w	r3, r7, #12
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
 80007e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e6:	4b1d      	ldr	r3, [pc, #116]	; (800085c <MX_GPIO_Init+0x8c>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ea:	4a1c      	ldr	r2, [pc, #112]	; (800085c <MX_GPIO_Init+0x8c>)
 80007ec:	f043 0304 	orr.w	r3, r3, #4
 80007f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007f2:	4b1a      	ldr	r3, [pc, #104]	; (800085c <MX_GPIO_Init+0x8c>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f6:	f003 0304 	and.w	r3, r3, #4
 80007fa:	60bb      	str	r3, [r7, #8]
 80007fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fe:	4b17      	ldr	r3, [pc, #92]	; (800085c <MX_GPIO_Init+0x8c>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000802:	4a16      	ldr	r2, [pc, #88]	; (800085c <MX_GPIO_Init+0x8c>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	64d3      	str	r3, [r2, #76]	; 0x4c
 800080a:	4b14      	ldr	r3, [pc, #80]	; (800085c <MX_GPIO_Init+0x8c>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	4b11      	ldr	r3, [pc, #68]	; (800085c <MX_GPIO_Init+0x8c>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081a:	4a10      	ldr	r2, [pc, #64]	; (800085c <MX_GPIO_Init+0x8c>)
 800081c:	f043 0302 	orr.w	r3, r3, #2
 8000820:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000822:	4b0e      	ldr	r3, [pc, #56]	; (800085c <MX_GPIO_Init+0x8c>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000826:	f003 0302 	and.w	r3, r3, #2
 800082a:	603b      	str	r3, [r7, #0]
 800082c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	2108      	movs	r1, #8
 8000832:	480b      	ldr	r0, [pc, #44]	; (8000860 <MX_GPIO_Init+0x90>)
 8000834:	f000 fcd0 	bl	80011d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000838:	2308      	movs	r3, #8
 800083a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083c:	2301      	movs	r3, #1
 800083e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000844:	2300      	movs	r3, #0
 8000846:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000848:	f107 030c 	add.w	r3, r7, #12
 800084c:	4619      	mov	r1, r3
 800084e:	4804      	ldr	r0, [pc, #16]	; (8000860 <MX_GPIO_Init+0x90>)
 8000850:	f000 fb58 	bl	8000f04 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000854:	bf00      	nop
 8000856:	3720      	adds	r7, #32
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40021000 	.word	0x40021000
 8000860:	48000400 	.word	0x48000400

08000864 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000868:	b672      	cpsid	i
}
 800086a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800086c:	e7fe      	b.n	800086c <Error_Handler+0x8>
	...

08000870 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000878:	4a07      	ldr	r2, [pc, #28]	; (8000898 <RetargetInit+0x28>)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 800087e:	4b07      	ldr	r3, [pc, #28]	; (800089c <RetargetInit+0x2c>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	6898      	ldr	r0, [r3, #8]
 8000884:	2300      	movs	r3, #0
 8000886:	2202      	movs	r2, #2
 8000888:	2100      	movs	r1, #0
 800088a:	f002 fd29 	bl	80032e0 <setvbuf>
}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	2000010c 	.word	0x2000010c
 800089c:	20000064 	.word	0x20000064

080008a0 <_isatty>:

int _isatty(int fd) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	db04      	blt.n	80008b8 <_isatty+0x18>
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	2b02      	cmp	r3, #2
 80008b2:	dc01      	bgt.n	80008b8 <_isatty+0x18>
    return 1;
 80008b4:	2301      	movs	r3, #1
 80008b6:	e005      	b.n	80008c4 <_isatty+0x24>

  errno = EBADF;
 80008b8:	f002 fe52 	bl	8003560 <__errno>
 80008bc:	4603      	mov	r3, r0
 80008be:	2209      	movs	r2, #9
 80008c0:	601a      	str	r2, [r3, #0]
  return 0;
 80008c2:	2300      	movs	r3, #0
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}

080008cc <_write>:

int _write(int fd, char* ptr, int len) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b086      	sub	sp, #24
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	60f8      	str	r0, [r7, #12]
 80008d4:	60b9      	str	r1, [r7, #8]
 80008d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	2b01      	cmp	r3, #1
 80008dc:	d002      	beq.n	80008e4 <_write+0x18>
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	2b02      	cmp	r3, #2
 80008e2:	d111      	bne.n	8000908 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80008e4:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <_write+0x54>)
 80008e6:	6818      	ldr	r0, [r3, #0]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	b29a      	uxth	r2, r3
 80008ec:	f04f 33ff 	mov.w	r3, #4294967295
 80008f0:	68b9      	ldr	r1, [r7, #8]
 80008f2:	f001 fe7b 	bl	80025ec <HAL_UART_Transmit>
 80008f6:	4603      	mov	r3, r0
 80008f8:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80008fa:	7dfb      	ldrb	r3, [r7, #23]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d101      	bne.n	8000904 <_write+0x38>
      return len;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	e008      	b.n	8000916 <_write+0x4a>
    else
      return EIO;
 8000904:	2305      	movs	r3, #5
 8000906:	e006      	b.n	8000916 <_write+0x4a>
  }
  errno = EBADF;
 8000908:	f002 fe2a 	bl	8003560 <__errno>
 800090c:	4603      	mov	r3, r0
 800090e:	2209      	movs	r2, #9
 8000910:	601a      	str	r2, [r3, #0]
  return -1;
 8000912:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000916:	4618      	mov	r0, r3
 8000918:	3718      	adds	r7, #24
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	2000010c 	.word	0x2000010c

08000924 <_close>:

int _close(int fd) {
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	2b00      	cmp	r3, #0
 8000930:	db04      	blt.n	800093c <_close+0x18>
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2b02      	cmp	r3, #2
 8000936:	dc01      	bgt.n	800093c <_close+0x18>
    return 0;
 8000938:	2300      	movs	r3, #0
 800093a:	e006      	b.n	800094a <_close+0x26>

  errno = EBADF;
 800093c:	f002 fe10 	bl	8003560 <__errno>
 8000940:	4603      	mov	r3, r0
 8000942:	2209      	movs	r2, #9
 8000944:	601a      	str	r2, [r3, #0]
  return -1;
 8000946:	f04f 33ff 	mov.w	r3, #4294967295
}
 800094a:	4618      	mov	r0, r3
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}

08000952 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000952:	b580      	push	{r7, lr}
 8000954:	b084      	sub	sp, #16
 8000956:	af00      	add	r7, sp, #0
 8000958:	60f8      	str	r0, [r7, #12]
 800095a:	60b9      	str	r1, [r7, #8]
 800095c:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 800095e:	f002 fdff 	bl	8003560 <__errno>
 8000962:	4603      	mov	r3, r0
 8000964:	2209      	movs	r2, #9
 8000966:	601a      	str	r2, [r3, #0]
  return -1;
 8000968:	f04f 33ff 	mov.w	r3, #4294967295
}
 800096c:	4618      	mov	r0, r3
 800096e:	3710      	adds	r7, #16
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}

08000974 <_read>:

int _read(int fd, char* ptr, int len) {
 8000974:	b580      	push	{r7, lr}
 8000976:	b086      	sub	sp, #24
 8000978:	af00      	add	r7, sp, #0
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	60b9      	str	r1, [r7, #8]
 800097e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d110      	bne.n	80009a8 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000986:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <_read+0x4c>)
 8000988:	6818      	ldr	r0, [r3, #0]
 800098a:	f04f 33ff 	mov.w	r3, #4294967295
 800098e:	2201      	movs	r2, #1
 8000990:	68b9      	ldr	r1, [r7, #8]
 8000992:	f001 feb5 	bl	8002700 <HAL_UART_Receive>
 8000996:	4603      	mov	r3, r0
 8000998:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800099a:	7dfb      	ldrb	r3, [r7, #23]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d101      	bne.n	80009a4 <_read+0x30>
      return 1;
 80009a0:	2301      	movs	r3, #1
 80009a2:	e008      	b.n	80009b6 <_read+0x42>
    else
      return EIO;
 80009a4:	2305      	movs	r3, #5
 80009a6:	e006      	b.n	80009b6 <_read+0x42>
  }
  errno = EBADF;
 80009a8:	f002 fdda 	bl	8003560 <__errno>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2209      	movs	r2, #9
 80009b0:	601a      	str	r2, [r3, #0]
  return -1;
 80009b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3718      	adds	r7, #24
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	2000010c 	.word	0x2000010c

080009c4 <_fstat>:

int _fstat(int fd, struct stat* st) {
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	db08      	blt.n	80009e6 <_fstat+0x22>
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2b02      	cmp	r3, #2
 80009d8:	dc05      	bgt.n	80009e6 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009e0:	605a      	str	r2, [r3, #4]
    return 0;
 80009e2:	2300      	movs	r3, #0
 80009e4:	e005      	b.n	80009f2 <_fstat+0x2e>
  }

  errno = EBADF;
 80009e6:	f002 fdbb 	bl	8003560 <__errno>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2209      	movs	r2, #9
 80009ee:	601a      	str	r2, [r3, #0]
  return 0;
 80009f0:	2300      	movs	r3, #0
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
	...

080009fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a02:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <HAL_MspInit+0x44>)
 8000a04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a06:	4a0e      	ldr	r2, [pc, #56]	; (8000a40 <HAL_MspInit+0x44>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	6613      	str	r3, [r2, #96]	; 0x60
 8000a0e:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <HAL_MspInit+0x44>)
 8000a10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1a:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <HAL_MspInit+0x44>)
 8000a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a1e:	4a08      	ldr	r2, [pc, #32]	; (8000a40 <HAL_MspInit+0x44>)
 8000a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a24:	6593      	str	r3, [r2, #88]	; 0x58
 8000a26:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <HAL_MspInit+0x44>)
 8000a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a2e:	603b      	str	r3, [r7, #0]
 8000a30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a32:	bf00      	nop
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	40021000 	.word	0x40021000

08000a44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b09e      	sub	sp, #120	; 0x78
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a5c:	f107 0310 	add.w	r3, r7, #16
 8000a60:	2254      	movs	r2, #84	; 0x54
 8000a62:	2100      	movs	r1, #0
 8000a64:	4618      	mov	r0, r3
 8000a66:	f002 fd2c 	bl	80034c2 <memset>
  if(huart->Instance==USART2)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4a28      	ldr	r2, [pc, #160]	; (8000b10 <HAL_UART_MspInit+0xcc>)
 8000a70:	4293      	cmp	r3, r2
 8000a72:	d148      	bne.n	8000b06 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a74:	2302      	movs	r3, #2
 8000a76:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a7c:	f107 0310 	add.w	r3, r7, #16
 8000a80:	4618      	mov	r0, r3
 8000a82:	f001 fa6d 	bl	8001f60 <HAL_RCCEx_PeriphCLKConfig>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a8c:	f7ff feea 	bl	8000864 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a90:	4b20      	ldr	r3, [pc, #128]	; (8000b14 <HAL_UART_MspInit+0xd0>)
 8000a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a94:	4a1f      	ldr	r2, [pc, #124]	; (8000b14 <HAL_UART_MspInit+0xd0>)
 8000a96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a9a:	6593      	str	r3, [r2, #88]	; 0x58
 8000a9c:	4b1d      	ldr	r3, [pc, #116]	; (8000b14 <HAL_UART_MspInit+0xd0>)
 8000a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aa4:	60fb      	str	r3, [r7, #12]
 8000aa6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa8:	4b1a      	ldr	r3, [pc, #104]	; (8000b14 <HAL_UART_MspInit+0xd0>)
 8000aaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aac:	4a19      	ldr	r2, [pc, #100]	; (8000b14 <HAL_UART_MspInit+0xd0>)
 8000aae:	f043 0301 	orr.w	r3, r3, #1
 8000ab2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ab4:	4b17      	ldr	r3, [pc, #92]	; (8000b14 <HAL_UART_MspInit+0xd0>)
 8000ab6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab8:	f003 0301 	and.w	r3, r3, #1
 8000abc:	60bb      	str	r3, [r7, #8]
 8000abe:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000ac0:	2304      	movs	r3, #4
 8000ac2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000acc:	2303      	movs	r3, #3
 8000ace:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ad0:	2307      	movs	r3, #7
 8000ad2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000ad4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ad8:	4619      	mov	r1, r3
 8000ada:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ade:	f000 fa11 	bl	8000f04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000ae2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ae6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af0:	2303      	movs	r3, #3
 8000af2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000af4:	2303      	movs	r3, #3
 8000af6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000af8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000afc:	4619      	mov	r1, r3
 8000afe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b02:	f000 f9ff 	bl	8000f04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b06:	bf00      	nop
 8000b08:	3778      	adds	r7, #120	; 0x78
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40004400 	.word	0x40004400
 8000b14:	40021000 	.word	0x40021000

08000b18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b1c:	e7fe      	b.n	8000b1c <NMI_Handler+0x4>

08000b1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b22:	e7fe      	b.n	8000b22 <HardFault_Handler+0x4>

08000b24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <MemManage_Handler+0x4>

08000b2a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b2e:	e7fe      	b.n	8000b2e <BusFault_Handler+0x4>

08000b30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b34:	e7fe      	b.n	8000b34 <UsageFault_Handler+0x4>

08000b36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr

08000b52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b64:	f000 f8c8 	bl	8000cf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b74:	4a14      	ldr	r2, [pc, #80]	; (8000bc8 <_sbrk+0x5c>)
 8000b76:	4b15      	ldr	r3, [pc, #84]	; (8000bcc <_sbrk+0x60>)
 8000b78:	1ad3      	subs	r3, r2, r3
 8000b7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b80:	4b13      	ldr	r3, [pc, #76]	; (8000bd0 <_sbrk+0x64>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d102      	bne.n	8000b8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b88:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <_sbrk+0x64>)
 8000b8a:	4a12      	ldr	r2, [pc, #72]	; (8000bd4 <_sbrk+0x68>)
 8000b8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b8e:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <_sbrk+0x64>)
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4413      	add	r3, r2
 8000b96:	693a      	ldr	r2, [r7, #16]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	d207      	bcs.n	8000bac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b9c:	f002 fce0 	bl	8003560 <__errno>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	220c      	movs	r2, #12
 8000ba4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8000baa:	e009      	b.n	8000bc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bac:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <_sbrk+0x64>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bb2:	4b07      	ldr	r3, [pc, #28]	; (8000bd0 <_sbrk+0x64>)
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4413      	add	r3, r2
 8000bba:	4a05      	ldr	r2, [pc, #20]	; (8000bd0 <_sbrk+0x64>)
 8000bbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bbe:	68fb      	ldr	r3, [r7, #12]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3718      	adds	r7, #24
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	20010000 	.word	0x20010000
 8000bcc:	00000400 	.word	0x00000400
 8000bd0:	20000110 	.word	0x20000110
 8000bd4:	20000268 	.word	0x20000268

08000bd8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000bdc:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <SystemInit+0x20>)
 8000bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000be2:	4a05      	ldr	r2, [pc, #20]	; (8000bf8 <SystemInit+0x20>)
 8000be4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000be8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c34 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c00:	f7ff ffea 	bl	8000bd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c04:	480c      	ldr	r0, [pc, #48]	; (8000c38 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c06:	490d      	ldr	r1, [pc, #52]	; (8000c3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c08:	4a0d      	ldr	r2, [pc, #52]	; (8000c40 <LoopForever+0xe>)
  movs r3, #0
 8000c0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c0c:	e002      	b.n	8000c14 <LoopCopyDataInit>

08000c0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c12:	3304      	adds	r3, #4

08000c14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c18:	d3f9      	bcc.n	8000c0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c1a:	4a0a      	ldr	r2, [pc, #40]	; (8000c44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c1c:	4c0a      	ldr	r4, [pc, #40]	; (8000c48 <LoopForever+0x16>)
  movs r3, #0
 8000c1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c20:	e001      	b.n	8000c26 <LoopFillZerobss>

08000c22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c24:	3204      	adds	r2, #4

08000c26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c28:	d3fb      	bcc.n	8000c22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c2a:	f002 fc9f 	bl	800356c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c2e:	f7ff fcad 	bl	800058c <main>

08000c32 <LoopForever>:

LoopForever:
    b LoopForever
 8000c32:	e7fe      	b.n	8000c32 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c34:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000c38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c3c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000c40:	08004404 	.word	0x08004404
  ldr r2, =_sbss
 8000c44:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000c48:	20000264 	.word	0x20000264

08000c4c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c4c:	e7fe      	b.n	8000c4c <ADC1_IRQHandler>

08000c4e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b082      	sub	sp, #8
 8000c52:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c54:	2300      	movs	r3, #0
 8000c56:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c58:	2003      	movs	r0, #3
 8000c5a:	f000 f91f 	bl	8000e9c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c5e:	2000      	movs	r0, #0
 8000c60:	f000 f80e 	bl	8000c80 <HAL_InitTick>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d002      	beq.n	8000c70 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	71fb      	strb	r3, [r7, #7]
 8000c6e:	e001      	b.n	8000c74 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c70:	f7ff fec4 	bl	80009fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c74:	79fb      	ldrb	r3, [r7, #7]
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
	...

08000c80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c8c:	4b17      	ldr	r3, [pc, #92]	; (8000cec <HAL_InitTick+0x6c>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d023      	beq.n	8000cdc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c94:	4b16      	ldr	r3, [pc, #88]	; (8000cf0 <HAL_InitTick+0x70>)
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	4b14      	ldr	r3, [pc, #80]	; (8000cec <HAL_InitTick+0x6c>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ca2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000caa:	4618      	mov	r0, r3
 8000cac:	f000 f91d 	bl	8000eea <HAL_SYSTICK_Config>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d10f      	bne.n	8000cd6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2b0f      	cmp	r3, #15
 8000cba:	d809      	bhi.n	8000cd0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	6879      	ldr	r1, [r7, #4]
 8000cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc4:	f000 f8f5 	bl	8000eb2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cc8:	4a0a      	ldr	r2, [pc, #40]	; (8000cf4 <HAL_InitTick+0x74>)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6013      	str	r3, [r2, #0]
 8000cce:	e007      	b.n	8000ce0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	73fb      	strb	r3, [r7, #15]
 8000cd4:	e004      	b.n	8000ce0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	73fb      	strb	r3, [r7, #15]
 8000cda:	e001      	b.n	8000ce0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3710      	adds	r7, #16
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20000008 	.word	0x20000008
 8000cf0:	20000000 	.word	0x20000000
 8000cf4:	20000004 	.word	0x20000004

08000cf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cfc:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <HAL_IncTick+0x20>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	461a      	mov	r2, r3
 8000d02:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <HAL_IncTick+0x24>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4413      	add	r3, r2
 8000d08:	4a04      	ldr	r2, [pc, #16]	; (8000d1c <HAL_IncTick+0x24>)
 8000d0a:	6013      	str	r3, [r2, #0]
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	20000008 	.word	0x20000008
 8000d1c:	20000114 	.word	0x20000114

08000d20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  return uwTick;
 8000d24:	4b03      	ldr	r3, [pc, #12]	; (8000d34 <HAL_GetTick+0x14>)
 8000d26:	681b      	ldr	r3, [r3, #0]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	20000114 	.word	0x20000114

08000d38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f003 0307 	and.w	r3, r3, #7
 8000d46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d48:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <__NVIC_SetPriorityGrouping+0x44>)
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d4e:	68ba      	ldr	r2, [r7, #8]
 8000d50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d54:	4013      	ands	r3, r2
 8000d56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d6a:	4a04      	ldr	r2, [pc, #16]	; (8000d7c <__NVIC_SetPriorityGrouping+0x44>)
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	60d3      	str	r3, [r2, #12]
}
 8000d70:	bf00      	nop
 8000d72:	3714      	adds	r7, #20
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d84:	4b04      	ldr	r3, [pc, #16]	; (8000d98 <__NVIC_GetPriorityGrouping+0x18>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	0a1b      	lsrs	r3, r3, #8
 8000d8a:	f003 0307 	and.w	r3, r3, #7
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	6039      	str	r1, [r7, #0]
 8000da6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	db0a      	blt.n	8000dc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	b2da      	uxtb	r2, r3
 8000db4:	490c      	ldr	r1, [pc, #48]	; (8000de8 <__NVIC_SetPriority+0x4c>)
 8000db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dba:	0112      	lsls	r2, r2, #4
 8000dbc:	b2d2      	uxtb	r2, r2
 8000dbe:	440b      	add	r3, r1
 8000dc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dc4:	e00a      	b.n	8000ddc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	b2da      	uxtb	r2, r3
 8000dca:	4908      	ldr	r1, [pc, #32]	; (8000dec <__NVIC_SetPriority+0x50>)
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
 8000dce:	f003 030f 	and.w	r3, r3, #15
 8000dd2:	3b04      	subs	r3, #4
 8000dd4:	0112      	lsls	r2, r2, #4
 8000dd6:	b2d2      	uxtb	r2, r2
 8000dd8:	440b      	add	r3, r1
 8000dda:	761a      	strb	r2, [r3, #24]
}
 8000ddc:	bf00      	nop
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	e000e100 	.word	0xe000e100
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b089      	sub	sp, #36	; 0x24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	f003 0307 	and.w	r3, r3, #7
 8000e02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	f1c3 0307 	rsb	r3, r3, #7
 8000e0a:	2b04      	cmp	r3, #4
 8000e0c:	bf28      	it	cs
 8000e0e:	2304      	movcs	r3, #4
 8000e10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	3304      	adds	r3, #4
 8000e16:	2b06      	cmp	r3, #6
 8000e18:	d902      	bls.n	8000e20 <NVIC_EncodePriority+0x30>
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	3b03      	subs	r3, #3
 8000e1e:	e000      	b.n	8000e22 <NVIC_EncodePriority+0x32>
 8000e20:	2300      	movs	r3, #0
 8000e22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e24:	f04f 32ff 	mov.w	r2, #4294967295
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	43da      	mvns	r2, r3
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	401a      	ands	r2, r3
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e38:	f04f 31ff 	mov.w	r1, #4294967295
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e42:	43d9      	mvns	r1, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e48:	4313      	orrs	r3, r2
         );
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3724      	adds	r7, #36	; 0x24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
	...

08000e58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	3b01      	subs	r3, #1
 8000e64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e68:	d301      	bcc.n	8000e6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e00f      	b.n	8000e8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e6e:	4a0a      	ldr	r2, [pc, #40]	; (8000e98 <SysTick_Config+0x40>)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	3b01      	subs	r3, #1
 8000e74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e76:	210f      	movs	r1, #15
 8000e78:	f04f 30ff 	mov.w	r0, #4294967295
 8000e7c:	f7ff ff8e 	bl	8000d9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e80:	4b05      	ldr	r3, [pc, #20]	; (8000e98 <SysTick_Config+0x40>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e86:	4b04      	ldr	r3, [pc, #16]	; (8000e98 <SysTick_Config+0x40>)
 8000e88:	2207      	movs	r2, #7
 8000e8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	e000e010 	.word	0xe000e010

08000e9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f7ff ff47 	bl	8000d38 <__NVIC_SetPriorityGrouping>
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b086      	sub	sp, #24
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	4603      	mov	r3, r0
 8000eba:	60b9      	str	r1, [r7, #8]
 8000ebc:	607a      	str	r2, [r7, #4]
 8000ebe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ec4:	f7ff ff5c 	bl	8000d80 <__NVIC_GetPriorityGrouping>
 8000ec8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	68b9      	ldr	r1, [r7, #8]
 8000ece:	6978      	ldr	r0, [r7, #20]
 8000ed0:	f7ff ff8e 	bl	8000df0 <NVIC_EncodePriority>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eda:	4611      	mov	r1, r2
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff ff5d 	bl	8000d9c <__NVIC_SetPriority>
}
 8000ee2:	bf00      	nop
 8000ee4:	3718      	adds	r7, #24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b082      	sub	sp, #8
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f7ff ffb0 	bl	8000e58 <SysTick_Config>
 8000ef8:	4603      	mov	r3, r0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
	...

08000f04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b087      	sub	sp, #28
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f12:	e148      	b.n	80011a6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	2101      	movs	r1, #1
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f20:	4013      	ands	r3, r2
 8000f22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	f000 813a 	beq.w	80011a0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f003 0303 	and.w	r3, r3, #3
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d005      	beq.n	8000f44 <HAL_GPIO_Init+0x40>
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f003 0303 	and.w	r3, r3, #3
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d130      	bne.n	8000fa6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	689b      	ldr	r3, [r3, #8]
 8000f48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	2203      	movs	r2, #3
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	43db      	mvns	r3, r3
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	68da      	ldr	r2, [r3, #12]
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	693a      	ldr	r2, [r7, #16]
 8000f72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	43db      	mvns	r3, r3
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	4013      	ands	r3, r2
 8000f88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	091b      	lsrs	r3, r3, #4
 8000f90:	f003 0201 	and.w	r2, r3, #1
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f003 0303 	and.w	r3, r3, #3
 8000fae:	2b03      	cmp	r3, #3
 8000fb0:	d017      	beq.n	8000fe2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	68db      	ldr	r3, [r3, #12]
 8000fb6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	2203      	movs	r2, #3
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	689a      	ldr	r2, [r3, #8]
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f003 0303 	and.w	r3, r3, #3
 8000fea:	2b02      	cmp	r3, #2
 8000fec:	d123      	bne.n	8001036 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	08da      	lsrs	r2, r3, #3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	3208      	adds	r2, #8
 8000ff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ffa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	f003 0307 	and.w	r3, r3, #7
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	220f      	movs	r2, #15
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	43db      	mvns	r3, r3
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	4013      	ands	r3, r2
 8001010:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	691a      	ldr	r2, [r3, #16]
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	f003 0307 	and.w	r3, r3, #7
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	4313      	orrs	r3, r2
 8001026:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	08da      	lsrs	r2, r3, #3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3208      	adds	r2, #8
 8001030:	6939      	ldr	r1, [r7, #16]
 8001032:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	2203      	movs	r2, #3
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	43db      	mvns	r3, r3
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	4013      	ands	r3, r2
 800104c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f003 0203 	and.w	r2, r3, #3
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	4313      	orrs	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001072:	2b00      	cmp	r3, #0
 8001074:	f000 8094 	beq.w	80011a0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001078:	4b52      	ldr	r3, [pc, #328]	; (80011c4 <HAL_GPIO_Init+0x2c0>)
 800107a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800107c:	4a51      	ldr	r2, [pc, #324]	; (80011c4 <HAL_GPIO_Init+0x2c0>)
 800107e:	f043 0301 	orr.w	r3, r3, #1
 8001082:	6613      	str	r3, [r2, #96]	; 0x60
 8001084:	4b4f      	ldr	r3, [pc, #316]	; (80011c4 <HAL_GPIO_Init+0x2c0>)
 8001086:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001088:	f003 0301 	and.w	r3, r3, #1
 800108c:	60bb      	str	r3, [r7, #8]
 800108e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001090:	4a4d      	ldr	r2, [pc, #308]	; (80011c8 <HAL_GPIO_Init+0x2c4>)
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	089b      	lsrs	r3, r3, #2
 8001096:	3302      	adds	r3, #2
 8001098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800109c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	f003 0303 	and.w	r3, r3, #3
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	220f      	movs	r2, #15
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	43db      	mvns	r3, r3
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	4013      	ands	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010ba:	d00d      	beq.n	80010d8 <HAL_GPIO_Init+0x1d4>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4a43      	ldr	r2, [pc, #268]	; (80011cc <HAL_GPIO_Init+0x2c8>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d007      	beq.n	80010d4 <HAL_GPIO_Init+0x1d0>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4a42      	ldr	r2, [pc, #264]	; (80011d0 <HAL_GPIO_Init+0x2cc>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d101      	bne.n	80010d0 <HAL_GPIO_Init+0x1cc>
 80010cc:	2302      	movs	r3, #2
 80010ce:	e004      	b.n	80010da <HAL_GPIO_Init+0x1d6>
 80010d0:	2307      	movs	r3, #7
 80010d2:	e002      	b.n	80010da <HAL_GPIO_Init+0x1d6>
 80010d4:	2301      	movs	r3, #1
 80010d6:	e000      	b.n	80010da <HAL_GPIO_Init+0x1d6>
 80010d8:	2300      	movs	r3, #0
 80010da:	697a      	ldr	r2, [r7, #20]
 80010dc:	f002 0203 	and.w	r2, r2, #3
 80010e0:	0092      	lsls	r2, r2, #2
 80010e2:	4093      	lsls	r3, r2
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010ea:	4937      	ldr	r1, [pc, #220]	; (80011c8 <HAL_GPIO_Init+0x2c4>)
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	089b      	lsrs	r3, r3, #2
 80010f0:	3302      	adds	r3, #2
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010f8:	4b36      	ldr	r3, [pc, #216]	; (80011d4 <HAL_GPIO_Init+0x2d0>)
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	43db      	mvns	r3, r3
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	4013      	ands	r3, r2
 8001106:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001110:	2b00      	cmp	r3, #0
 8001112:	d003      	beq.n	800111c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	4313      	orrs	r3, r2
 800111a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800111c:	4a2d      	ldr	r2, [pc, #180]	; (80011d4 <HAL_GPIO_Init+0x2d0>)
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001122:	4b2c      	ldr	r3, [pc, #176]	; (80011d4 <HAL_GPIO_Init+0x2d0>)
 8001124:	68db      	ldr	r3, [r3, #12]
 8001126:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	43db      	mvns	r3, r3
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	4013      	ands	r3, r2
 8001130:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d003      	beq.n	8001146 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	4313      	orrs	r3, r2
 8001144:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001146:	4a23      	ldr	r2, [pc, #140]	; (80011d4 <HAL_GPIO_Init+0x2d0>)
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800114c:	4b21      	ldr	r3, [pc, #132]	; (80011d4 <HAL_GPIO_Init+0x2d0>)
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	43db      	mvns	r3, r3
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	4013      	ands	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001164:	2b00      	cmp	r3, #0
 8001166:	d003      	beq.n	8001170 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	4313      	orrs	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001170:	4a18      	ldr	r2, [pc, #96]	; (80011d4 <HAL_GPIO_Init+0x2d0>)
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001176:	4b17      	ldr	r3, [pc, #92]	; (80011d4 <HAL_GPIO_Init+0x2d0>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	43db      	mvns	r3, r3
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	4013      	ands	r3, r2
 8001184:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d003      	beq.n	800119a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	4313      	orrs	r3, r2
 8001198:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800119a:	4a0e      	ldr	r2, [pc, #56]	; (80011d4 <HAL_GPIO_Init+0x2d0>)
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	3301      	adds	r3, #1
 80011a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	fa22 f303 	lsr.w	r3, r2, r3
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	f47f aeaf 	bne.w	8000f14 <HAL_GPIO_Init+0x10>
  }
}
 80011b6:	bf00      	nop
 80011b8:	bf00      	nop
 80011ba:	371c      	adds	r7, #28
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	40021000 	.word	0x40021000
 80011c8:	40010000 	.word	0x40010000
 80011cc:	48000400 	.word	0x48000400
 80011d0:	48000800 	.word	0x48000800
 80011d4:	40010400 	.word	0x40010400

080011d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	460b      	mov	r3, r1
 80011e2:	807b      	strh	r3, [r7, #2]
 80011e4:	4613      	mov	r3, r2
 80011e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011e8:	787b      	ldrb	r3, [r7, #1]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d003      	beq.n	80011f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011ee:	887a      	ldrh	r2, [r7, #2]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011f4:	e002      	b.n	80011fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011f6:	887a      	ldrh	r2, [r7, #2]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800120c:	4b05      	ldr	r3, [pc, #20]	; (8001224 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a04      	ldr	r2, [pc, #16]	; (8001224 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001212:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001216:	6013      	str	r3, [r2, #0]
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	40007000 	.word	0x40007000

08001228 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800122c:	4b04      	ldr	r3, [pc, #16]	; (8001240 <HAL_PWREx_GetVoltageRange+0x18>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001234:	4618      	mov	r0, r3
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	40007000 	.word	0x40007000

08001244 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001252:	d130      	bne.n	80012b6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001254:	4b23      	ldr	r3, [pc, #140]	; (80012e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800125c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001260:	d038      	beq.n	80012d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001262:	4b20      	ldr	r3, [pc, #128]	; (80012e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800126a:	4a1e      	ldr	r2, [pc, #120]	; (80012e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800126c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001270:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001272:	4b1d      	ldr	r3, [pc, #116]	; (80012e8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2232      	movs	r2, #50	; 0x32
 8001278:	fb02 f303 	mul.w	r3, r2, r3
 800127c:	4a1b      	ldr	r2, [pc, #108]	; (80012ec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800127e:	fba2 2303 	umull	r2, r3, r2, r3
 8001282:	0c9b      	lsrs	r3, r3, #18
 8001284:	3301      	adds	r3, #1
 8001286:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001288:	e002      	b.n	8001290 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	3b01      	subs	r3, #1
 800128e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001290:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001292:	695b      	ldr	r3, [r3, #20]
 8001294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001298:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800129c:	d102      	bne.n	80012a4 <HAL_PWREx_ControlVoltageScaling+0x60>
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d1f2      	bne.n	800128a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012a4:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012a6:	695b      	ldr	r3, [r3, #20]
 80012a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012b0:	d110      	bne.n	80012d4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e00f      	b.n	80012d6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80012b6:	4b0b      	ldr	r3, [pc, #44]	; (80012e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012c2:	d007      	beq.n	80012d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012c4:	4b07      	ldr	r3, [pc, #28]	; (80012e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012cc:	4a05      	ldr	r2, [pc, #20]	; (80012e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012d2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3714      	adds	r7, #20
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	40007000 	.word	0x40007000
 80012e8:	20000000 	.word	0x20000000
 80012ec:	431bde83 	.word	0x431bde83

080012f0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b088      	sub	sp, #32
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d102      	bne.n	8001304 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	f000 bc02 	b.w	8001b08 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001304:	4b96      	ldr	r3, [pc, #600]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	f003 030c 	and.w	r3, r3, #12
 800130c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800130e:	4b94      	ldr	r3, [pc, #592]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 8001310:	68db      	ldr	r3, [r3, #12]
 8001312:	f003 0303 	and.w	r3, r3, #3
 8001316:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 0310 	and.w	r3, r3, #16
 8001320:	2b00      	cmp	r3, #0
 8001322:	f000 80e4 	beq.w	80014ee <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d007      	beq.n	800133c <HAL_RCC_OscConfig+0x4c>
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	2b0c      	cmp	r3, #12
 8001330:	f040 808b 	bne.w	800144a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	2b01      	cmp	r3, #1
 8001338:	f040 8087 	bne.w	800144a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800133c:	4b88      	ldr	r3, [pc, #544]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 0302 	and.w	r3, r3, #2
 8001344:	2b00      	cmp	r3, #0
 8001346:	d005      	beq.n	8001354 <HAL_RCC_OscConfig+0x64>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d101      	bne.n	8001354 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e3d9      	b.n	8001b08 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6a1a      	ldr	r2, [r3, #32]
 8001358:	4b81      	ldr	r3, [pc, #516]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 0308 	and.w	r3, r3, #8
 8001360:	2b00      	cmp	r3, #0
 8001362:	d004      	beq.n	800136e <HAL_RCC_OscConfig+0x7e>
 8001364:	4b7e      	ldr	r3, [pc, #504]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800136c:	e005      	b.n	800137a <HAL_RCC_OscConfig+0x8a>
 800136e:	4b7c      	ldr	r3, [pc, #496]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 8001370:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001374:	091b      	lsrs	r3, r3, #4
 8001376:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800137a:	4293      	cmp	r3, r2
 800137c:	d223      	bcs.n	80013c6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6a1b      	ldr	r3, [r3, #32]
 8001382:	4618      	mov	r0, r3
 8001384:	f000 fd8c 	bl	8001ea0 <RCC_SetFlashLatencyFromMSIRange>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e3ba      	b.n	8001b08 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001392:	4b73      	ldr	r3, [pc, #460]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a72      	ldr	r2, [pc, #456]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 8001398:	f043 0308 	orr.w	r3, r3, #8
 800139c:	6013      	str	r3, [r2, #0]
 800139e:	4b70      	ldr	r3, [pc, #448]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6a1b      	ldr	r3, [r3, #32]
 80013aa:	496d      	ldr	r1, [pc, #436]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 80013ac:	4313      	orrs	r3, r2
 80013ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013b0:	4b6b      	ldr	r3, [pc, #428]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	69db      	ldr	r3, [r3, #28]
 80013bc:	021b      	lsls	r3, r3, #8
 80013be:	4968      	ldr	r1, [pc, #416]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 80013c0:	4313      	orrs	r3, r2
 80013c2:	604b      	str	r3, [r1, #4]
 80013c4:	e025      	b.n	8001412 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013c6:	4b66      	ldr	r3, [pc, #408]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a65      	ldr	r2, [pc, #404]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 80013cc:	f043 0308 	orr.w	r3, r3, #8
 80013d0:	6013      	str	r3, [r2, #0]
 80013d2:	4b63      	ldr	r3, [pc, #396]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6a1b      	ldr	r3, [r3, #32]
 80013de:	4960      	ldr	r1, [pc, #384]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 80013e0:	4313      	orrs	r3, r2
 80013e2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013e4:	4b5e      	ldr	r3, [pc, #376]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	69db      	ldr	r3, [r3, #28]
 80013f0:	021b      	lsls	r3, r3, #8
 80013f2:	495b      	ldr	r1, [pc, #364]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 80013f4:	4313      	orrs	r3, r2
 80013f6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d109      	bne.n	8001412 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6a1b      	ldr	r3, [r3, #32]
 8001402:	4618      	mov	r0, r3
 8001404:	f000 fd4c 	bl	8001ea0 <RCC_SetFlashLatencyFromMSIRange>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e37a      	b.n	8001b08 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001412:	f000 fc81 	bl	8001d18 <HAL_RCC_GetSysClockFreq>
 8001416:	4602      	mov	r2, r0
 8001418:	4b51      	ldr	r3, [pc, #324]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	091b      	lsrs	r3, r3, #4
 800141e:	f003 030f 	and.w	r3, r3, #15
 8001422:	4950      	ldr	r1, [pc, #320]	; (8001564 <HAL_RCC_OscConfig+0x274>)
 8001424:	5ccb      	ldrb	r3, [r1, r3]
 8001426:	f003 031f 	and.w	r3, r3, #31
 800142a:	fa22 f303 	lsr.w	r3, r2, r3
 800142e:	4a4e      	ldr	r2, [pc, #312]	; (8001568 <HAL_RCC_OscConfig+0x278>)
 8001430:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001432:	4b4e      	ldr	r3, [pc, #312]	; (800156c <HAL_RCC_OscConfig+0x27c>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff fc22 	bl	8000c80 <HAL_InitTick>
 800143c:	4603      	mov	r3, r0
 800143e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001440:	7bfb      	ldrb	r3, [r7, #15]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d052      	beq.n	80014ec <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001446:	7bfb      	ldrb	r3, [r7, #15]
 8001448:	e35e      	b.n	8001b08 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	699b      	ldr	r3, [r3, #24]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d032      	beq.n	80014b8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001452:	4b43      	ldr	r3, [pc, #268]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a42      	ldr	r2, [pc, #264]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800145e:	f7ff fc5f 	bl	8000d20 <HAL_GetTick>
 8001462:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001464:	e008      	b.n	8001478 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001466:	f7ff fc5b 	bl	8000d20 <HAL_GetTick>
 800146a:	4602      	mov	r2, r0
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	2b02      	cmp	r3, #2
 8001472:	d901      	bls.n	8001478 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	e347      	b.n	8001b08 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001478:	4b39      	ldr	r3, [pc, #228]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0302 	and.w	r3, r3, #2
 8001480:	2b00      	cmp	r3, #0
 8001482:	d0f0      	beq.n	8001466 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001484:	4b36      	ldr	r3, [pc, #216]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a35      	ldr	r2, [pc, #212]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 800148a:	f043 0308 	orr.w	r3, r3, #8
 800148e:	6013      	str	r3, [r2, #0]
 8001490:	4b33      	ldr	r3, [pc, #204]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6a1b      	ldr	r3, [r3, #32]
 800149c:	4930      	ldr	r1, [pc, #192]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 800149e:	4313      	orrs	r3, r2
 80014a0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014a2:	4b2f      	ldr	r3, [pc, #188]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	69db      	ldr	r3, [r3, #28]
 80014ae:	021b      	lsls	r3, r3, #8
 80014b0:	492b      	ldr	r1, [pc, #172]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 80014b2:	4313      	orrs	r3, r2
 80014b4:	604b      	str	r3, [r1, #4]
 80014b6:	e01a      	b.n	80014ee <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80014b8:	4b29      	ldr	r3, [pc, #164]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a28      	ldr	r2, [pc, #160]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 80014be:	f023 0301 	bic.w	r3, r3, #1
 80014c2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014c4:	f7ff fc2c 	bl	8000d20 <HAL_GetTick>
 80014c8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014ca:	e008      	b.n	80014de <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014cc:	f7ff fc28 	bl	8000d20 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e314      	b.n	8001b08 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014de:	4b20      	ldr	r3, [pc, #128]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d1f0      	bne.n	80014cc <HAL_RCC_OscConfig+0x1dc>
 80014ea:	e000      	b.n	80014ee <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014ec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d073      	beq.n	80015e2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	2b08      	cmp	r3, #8
 80014fe:	d005      	beq.n	800150c <HAL_RCC_OscConfig+0x21c>
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	2b0c      	cmp	r3, #12
 8001504:	d10e      	bne.n	8001524 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	2b03      	cmp	r3, #3
 800150a:	d10b      	bne.n	8001524 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800150c:	4b14      	ldr	r3, [pc, #80]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d063      	beq.n	80015e0 <HAL_RCC_OscConfig+0x2f0>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d15f      	bne.n	80015e0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e2f1      	b.n	8001b08 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800152c:	d106      	bne.n	800153c <HAL_RCC_OscConfig+0x24c>
 800152e:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a0b      	ldr	r2, [pc, #44]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 8001534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001538:	6013      	str	r3, [r2, #0]
 800153a:	e025      	b.n	8001588 <HAL_RCC_OscConfig+0x298>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001544:	d114      	bne.n	8001570 <HAL_RCC_OscConfig+0x280>
 8001546:	4b06      	ldr	r3, [pc, #24]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a05      	ldr	r2, [pc, #20]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 800154c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001550:	6013      	str	r3, [r2, #0]
 8001552:	4b03      	ldr	r3, [pc, #12]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a02      	ldr	r2, [pc, #8]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 8001558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800155c:	6013      	str	r3, [r2, #0]
 800155e:	e013      	b.n	8001588 <HAL_RCC_OscConfig+0x298>
 8001560:	40021000 	.word	0x40021000
 8001564:	08004378 	.word	0x08004378
 8001568:	20000000 	.word	0x20000000
 800156c:	20000004 	.word	0x20000004
 8001570:	4ba0      	ldr	r3, [pc, #640]	; (80017f4 <HAL_RCC_OscConfig+0x504>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a9f      	ldr	r2, [pc, #636]	; (80017f4 <HAL_RCC_OscConfig+0x504>)
 8001576:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800157a:	6013      	str	r3, [r2, #0]
 800157c:	4b9d      	ldr	r3, [pc, #628]	; (80017f4 <HAL_RCC_OscConfig+0x504>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a9c      	ldr	r2, [pc, #624]	; (80017f4 <HAL_RCC_OscConfig+0x504>)
 8001582:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001586:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d013      	beq.n	80015b8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001590:	f7ff fbc6 	bl	8000d20 <HAL_GetTick>
 8001594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001596:	e008      	b.n	80015aa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001598:	f7ff fbc2 	bl	8000d20 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b64      	cmp	r3, #100	; 0x64
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e2ae      	b.n	8001b08 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015aa:	4b92      	ldr	r3, [pc, #584]	; (80017f4 <HAL_RCC_OscConfig+0x504>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d0f0      	beq.n	8001598 <HAL_RCC_OscConfig+0x2a8>
 80015b6:	e014      	b.n	80015e2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b8:	f7ff fbb2 	bl	8000d20 <HAL_GetTick>
 80015bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015be:	e008      	b.n	80015d2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015c0:	f7ff fbae 	bl	8000d20 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b64      	cmp	r3, #100	; 0x64
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e29a      	b.n	8001b08 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015d2:	4b88      	ldr	r3, [pc, #544]	; (80017f4 <HAL_RCC_OscConfig+0x504>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d1f0      	bne.n	80015c0 <HAL_RCC_OscConfig+0x2d0>
 80015de:	e000      	b.n	80015e2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d060      	beq.n	80016b0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	2b04      	cmp	r3, #4
 80015f2:	d005      	beq.n	8001600 <HAL_RCC_OscConfig+0x310>
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	2b0c      	cmp	r3, #12
 80015f8:	d119      	bne.n	800162e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d116      	bne.n	800162e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001600:	4b7c      	ldr	r3, [pc, #496]	; (80017f4 <HAL_RCC_OscConfig+0x504>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001608:	2b00      	cmp	r3, #0
 800160a:	d005      	beq.n	8001618 <HAL_RCC_OscConfig+0x328>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d101      	bne.n	8001618 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e277      	b.n	8001b08 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001618:	4b76      	ldr	r3, [pc, #472]	; (80017f4 <HAL_RCC_OscConfig+0x504>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	691b      	ldr	r3, [r3, #16]
 8001624:	061b      	lsls	r3, r3, #24
 8001626:	4973      	ldr	r1, [pc, #460]	; (80017f4 <HAL_RCC_OscConfig+0x504>)
 8001628:	4313      	orrs	r3, r2
 800162a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800162c:	e040      	b.n	80016b0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	68db      	ldr	r3, [r3, #12]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d023      	beq.n	800167e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001636:	4b6f      	ldr	r3, [pc, #444]	; (80017f4 <HAL_RCC_OscConfig+0x504>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a6e      	ldr	r2, [pc, #440]	; (80017f4 <HAL_RCC_OscConfig+0x504>)
 800163c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001640:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001642:	f7ff fb6d 	bl	8000d20 <HAL_GetTick>
 8001646:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001648:	e008      	b.n	800165c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800164a:	f7ff fb69 	bl	8000d20 <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b02      	cmp	r3, #2
 8001656:	d901      	bls.n	800165c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e255      	b.n	8001b08 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800165c:	4b65      	ldr	r3, [pc, #404]	; (80017f4 <HAL_RCC_OscConfig+0x504>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001664:	2b00      	cmp	r3, #0
 8001666:	d0f0      	beq.n	800164a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001668:	4b62      	ldr	r3, [pc, #392]	; (80017f4 <HAL_RCC_OscConfig+0x504>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	691b      	ldr	r3, [r3, #16]
 8001674:	061b      	lsls	r3, r3, #24
 8001676:	495f      	ldr	r1, [pc, #380]	; (80017f4 <HAL_RCC_OscConfig+0x504>)
 8001678:	4313      	orrs	r3, r2
 800167a:	604b      	str	r3, [r1, #4]
 800167c:	e018      	b.n	80016b0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800167e:	4b5d      	ldr	r3, [pc, #372]	; (80017f4 <HAL_RCC_OscConfig+0x504>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a5c      	ldr	r2, [pc, #368]	; (80017f4 <HAL_RCC_OscConfig+0x504>)
 8001684:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001688:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800168a:	f7ff fb49 	bl	8000d20 <HAL_GetTick>
 800168e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001690:	e008      	b.n	80016a4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001692:	f7ff fb45 	bl	8000d20 <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e231      	b.n	8001b08 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016a4:	4b53      	ldr	r3, [pc, #332]	; (80017f4 <HAL_RCC_OscConfig+0x504>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d1f0      	bne.n	8001692 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0308 	and.w	r3, r3, #8
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d03c      	beq.n	8001736 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	695b      	ldr	r3, [r3, #20]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d01c      	beq.n	80016fe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016c4:	4b4b      	ldr	r3, [pc, #300]	; (80017f4 <HAL_RCC_OscConfig+0x504>)
 80016c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016ca:	4a4a      	ldr	r2, [pc, #296]	; (80017f4 <HAL_RCC_OscConfig+0x504>)
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d4:	f7ff fb24 	bl	8000d20 <HAL_GetTick>
 80016d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016dc:	f7ff fb20 	bl	8000d20 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e20c      	b.n	8001b08 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016ee:	4b41      	ldr	r3, [pc, #260]	; (80017f4 <HAL_RCC_OscConfig+0x504>)
 80016f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016f4:	f003 0302 	and.w	r3, r3, #2
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d0ef      	beq.n	80016dc <HAL_RCC_OscConfig+0x3ec>
 80016fc:	e01b      	b.n	8001736 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016fe:	4b3d      	ldr	r3, [pc, #244]	; (80017f4 <HAL_RCC_OscConfig+0x504>)
 8001700:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001704:	4a3b      	ldr	r2, [pc, #236]	; (80017f4 <HAL_RCC_OscConfig+0x504>)
 8001706:	f023 0301 	bic.w	r3, r3, #1
 800170a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800170e:	f7ff fb07 	bl	8000d20 <HAL_GetTick>
 8001712:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001714:	e008      	b.n	8001728 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001716:	f7ff fb03 	bl	8000d20 <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	2b02      	cmp	r3, #2
 8001722:	d901      	bls.n	8001728 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e1ef      	b.n	8001b08 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001728:	4b32      	ldr	r3, [pc, #200]	; (80017f4 <HAL_RCC_OscConfig+0x504>)
 800172a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d1ef      	bne.n	8001716 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0304 	and.w	r3, r3, #4
 800173e:	2b00      	cmp	r3, #0
 8001740:	f000 80a6 	beq.w	8001890 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001744:	2300      	movs	r3, #0
 8001746:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001748:	4b2a      	ldr	r3, [pc, #168]	; (80017f4 <HAL_RCC_OscConfig+0x504>)
 800174a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800174c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d10d      	bne.n	8001770 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001754:	4b27      	ldr	r3, [pc, #156]	; (80017f4 <HAL_RCC_OscConfig+0x504>)
 8001756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001758:	4a26      	ldr	r2, [pc, #152]	; (80017f4 <HAL_RCC_OscConfig+0x504>)
 800175a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800175e:	6593      	str	r3, [r2, #88]	; 0x58
 8001760:	4b24      	ldr	r3, [pc, #144]	; (80017f4 <HAL_RCC_OscConfig+0x504>)
 8001762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001768:	60bb      	str	r3, [r7, #8]
 800176a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800176c:	2301      	movs	r3, #1
 800176e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001770:	4b21      	ldr	r3, [pc, #132]	; (80017f8 <HAL_RCC_OscConfig+0x508>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001778:	2b00      	cmp	r3, #0
 800177a:	d118      	bne.n	80017ae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800177c:	4b1e      	ldr	r3, [pc, #120]	; (80017f8 <HAL_RCC_OscConfig+0x508>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a1d      	ldr	r2, [pc, #116]	; (80017f8 <HAL_RCC_OscConfig+0x508>)
 8001782:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001786:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001788:	f7ff faca 	bl	8000d20 <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001790:	f7ff fac6 	bl	8000d20 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b02      	cmp	r3, #2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e1b2      	b.n	8001b08 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017a2:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <HAL_RCC_OscConfig+0x508>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d0f0      	beq.n	8001790 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d108      	bne.n	80017c8 <HAL_RCC_OscConfig+0x4d8>
 80017b6:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <HAL_RCC_OscConfig+0x504>)
 80017b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017bc:	4a0d      	ldr	r2, [pc, #52]	; (80017f4 <HAL_RCC_OscConfig+0x504>)
 80017be:	f043 0301 	orr.w	r3, r3, #1
 80017c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017c6:	e029      	b.n	800181c <HAL_RCC_OscConfig+0x52c>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	2b05      	cmp	r3, #5
 80017ce:	d115      	bne.n	80017fc <HAL_RCC_OscConfig+0x50c>
 80017d0:	4b08      	ldr	r3, [pc, #32]	; (80017f4 <HAL_RCC_OscConfig+0x504>)
 80017d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017d6:	4a07      	ldr	r2, [pc, #28]	; (80017f4 <HAL_RCC_OscConfig+0x504>)
 80017d8:	f043 0304 	orr.w	r3, r3, #4
 80017dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017e0:	4b04      	ldr	r3, [pc, #16]	; (80017f4 <HAL_RCC_OscConfig+0x504>)
 80017e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017e6:	4a03      	ldr	r2, [pc, #12]	; (80017f4 <HAL_RCC_OscConfig+0x504>)
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017f0:	e014      	b.n	800181c <HAL_RCC_OscConfig+0x52c>
 80017f2:	bf00      	nop
 80017f4:	40021000 	.word	0x40021000
 80017f8:	40007000 	.word	0x40007000
 80017fc:	4b9a      	ldr	r3, [pc, #616]	; (8001a68 <HAL_RCC_OscConfig+0x778>)
 80017fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001802:	4a99      	ldr	r2, [pc, #612]	; (8001a68 <HAL_RCC_OscConfig+0x778>)
 8001804:	f023 0301 	bic.w	r3, r3, #1
 8001808:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800180c:	4b96      	ldr	r3, [pc, #600]	; (8001a68 <HAL_RCC_OscConfig+0x778>)
 800180e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001812:	4a95      	ldr	r2, [pc, #596]	; (8001a68 <HAL_RCC_OscConfig+0x778>)
 8001814:	f023 0304 	bic.w	r3, r3, #4
 8001818:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d016      	beq.n	8001852 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001824:	f7ff fa7c 	bl	8000d20 <HAL_GetTick>
 8001828:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800182a:	e00a      	b.n	8001842 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800182c:	f7ff fa78 	bl	8000d20 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	f241 3288 	movw	r2, #5000	; 0x1388
 800183a:	4293      	cmp	r3, r2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e162      	b.n	8001b08 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001842:	4b89      	ldr	r3, [pc, #548]	; (8001a68 <HAL_RCC_OscConfig+0x778>)
 8001844:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001848:	f003 0302 	and.w	r3, r3, #2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d0ed      	beq.n	800182c <HAL_RCC_OscConfig+0x53c>
 8001850:	e015      	b.n	800187e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001852:	f7ff fa65 	bl	8000d20 <HAL_GetTick>
 8001856:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001858:	e00a      	b.n	8001870 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800185a:	f7ff fa61 	bl	8000d20 <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	f241 3288 	movw	r2, #5000	; 0x1388
 8001868:	4293      	cmp	r3, r2
 800186a:	d901      	bls.n	8001870 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e14b      	b.n	8001b08 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001870:	4b7d      	ldr	r3, [pc, #500]	; (8001a68 <HAL_RCC_OscConfig+0x778>)
 8001872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1ed      	bne.n	800185a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800187e:	7ffb      	ldrb	r3, [r7, #31]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d105      	bne.n	8001890 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001884:	4b78      	ldr	r3, [pc, #480]	; (8001a68 <HAL_RCC_OscConfig+0x778>)
 8001886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001888:	4a77      	ldr	r2, [pc, #476]	; (8001a68 <HAL_RCC_OscConfig+0x778>)
 800188a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800188e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0320 	and.w	r3, r3, #32
 8001898:	2b00      	cmp	r3, #0
 800189a:	d03c      	beq.n	8001916 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d01c      	beq.n	80018de <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80018a4:	4b70      	ldr	r3, [pc, #448]	; (8001a68 <HAL_RCC_OscConfig+0x778>)
 80018a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018aa:	4a6f      	ldr	r2, [pc, #444]	; (8001a68 <HAL_RCC_OscConfig+0x778>)
 80018ac:	f043 0301 	orr.w	r3, r3, #1
 80018b0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b4:	f7ff fa34 	bl	8000d20 <HAL_GetTick>
 80018b8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018bc:	f7ff fa30 	bl	8000d20 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e11c      	b.n	8001b08 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018ce:	4b66      	ldr	r3, [pc, #408]	; (8001a68 <HAL_RCC_OscConfig+0x778>)
 80018d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018d4:	f003 0302 	and.w	r3, r3, #2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d0ef      	beq.n	80018bc <HAL_RCC_OscConfig+0x5cc>
 80018dc:	e01b      	b.n	8001916 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80018de:	4b62      	ldr	r3, [pc, #392]	; (8001a68 <HAL_RCC_OscConfig+0x778>)
 80018e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018e4:	4a60      	ldr	r2, [pc, #384]	; (8001a68 <HAL_RCC_OscConfig+0x778>)
 80018e6:	f023 0301 	bic.w	r3, r3, #1
 80018ea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ee:	f7ff fa17 	bl	8000d20 <HAL_GetTick>
 80018f2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018f4:	e008      	b.n	8001908 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018f6:	f7ff fa13 	bl	8000d20 <HAL_GetTick>
 80018fa:	4602      	mov	r2, r0
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	2b02      	cmp	r3, #2
 8001902:	d901      	bls.n	8001908 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001904:	2303      	movs	r3, #3
 8001906:	e0ff      	b.n	8001b08 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001908:	4b57      	ldr	r3, [pc, #348]	; (8001a68 <HAL_RCC_OscConfig+0x778>)
 800190a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1ef      	bne.n	80018f6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800191a:	2b00      	cmp	r3, #0
 800191c:	f000 80f3 	beq.w	8001b06 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001924:	2b02      	cmp	r3, #2
 8001926:	f040 80c9 	bne.w	8001abc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800192a:	4b4f      	ldr	r3, [pc, #316]	; (8001a68 <HAL_RCC_OscConfig+0x778>)
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	f003 0203 	and.w	r2, r3, #3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800193a:	429a      	cmp	r2, r3
 800193c:	d12c      	bne.n	8001998 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001948:	3b01      	subs	r3, #1
 800194a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800194c:	429a      	cmp	r2, r3
 800194e:	d123      	bne.n	8001998 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800195a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800195c:	429a      	cmp	r2, r3
 800195e:	d11b      	bne.n	8001998 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800196a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800196c:	429a      	cmp	r2, r3
 800196e:	d113      	bne.n	8001998 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800197a:	085b      	lsrs	r3, r3, #1
 800197c:	3b01      	subs	r3, #1
 800197e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001980:	429a      	cmp	r2, r3
 8001982:	d109      	bne.n	8001998 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198e:	085b      	lsrs	r3, r3, #1
 8001990:	3b01      	subs	r3, #1
 8001992:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001994:	429a      	cmp	r2, r3
 8001996:	d06b      	beq.n	8001a70 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	2b0c      	cmp	r3, #12
 800199c:	d062      	beq.n	8001a64 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800199e:	4b32      	ldr	r3, [pc, #200]	; (8001a68 <HAL_RCC_OscConfig+0x778>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e0ac      	b.n	8001b08 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80019ae:	4b2e      	ldr	r3, [pc, #184]	; (8001a68 <HAL_RCC_OscConfig+0x778>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a2d      	ldr	r2, [pc, #180]	; (8001a68 <HAL_RCC_OscConfig+0x778>)
 80019b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019b8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019ba:	f7ff f9b1 	bl	8000d20 <HAL_GetTick>
 80019be:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019c0:	e008      	b.n	80019d4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019c2:	f7ff f9ad 	bl	8000d20 <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e099      	b.n	8001b08 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019d4:	4b24      	ldr	r3, [pc, #144]	; (8001a68 <HAL_RCC_OscConfig+0x778>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d1f0      	bne.n	80019c2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019e0:	4b21      	ldr	r3, [pc, #132]	; (8001a68 <HAL_RCC_OscConfig+0x778>)
 80019e2:	68da      	ldr	r2, [r3, #12]
 80019e4:	4b21      	ldr	r3, [pc, #132]	; (8001a6c <HAL_RCC_OscConfig+0x77c>)
 80019e6:	4013      	ands	r3, r2
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80019f0:	3a01      	subs	r2, #1
 80019f2:	0112      	lsls	r2, r2, #4
 80019f4:	4311      	orrs	r1, r2
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80019fa:	0212      	lsls	r2, r2, #8
 80019fc:	4311      	orrs	r1, r2
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001a02:	0852      	lsrs	r2, r2, #1
 8001a04:	3a01      	subs	r2, #1
 8001a06:	0552      	lsls	r2, r2, #21
 8001a08:	4311      	orrs	r1, r2
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a0e:	0852      	lsrs	r2, r2, #1
 8001a10:	3a01      	subs	r2, #1
 8001a12:	0652      	lsls	r2, r2, #25
 8001a14:	4311      	orrs	r1, r2
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a1a:	06d2      	lsls	r2, r2, #27
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	4912      	ldr	r1, [pc, #72]	; (8001a68 <HAL_RCC_OscConfig+0x778>)
 8001a20:	4313      	orrs	r3, r2
 8001a22:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a24:	4b10      	ldr	r3, [pc, #64]	; (8001a68 <HAL_RCC_OscConfig+0x778>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a0f      	ldr	r2, [pc, #60]	; (8001a68 <HAL_RCC_OscConfig+0x778>)
 8001a2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a2e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a30:	4b0d      	ldr	r3, [pc, #52]	; (8001a68 <HAL_RCC_OscConfig+0x778>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	4a0c      	ldr	r2, [pc, #48]	; (8001a68 <HAL_RCC_OscConfig+0x778>)
 8001a36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a3a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a3c:	f7ff f970 	bl	8000d20 <HAL_GetTick>
 8001a40:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a44:	f7ff f96c 	bl	8000d20 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e058      	b.n	8001b08 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a56:	4b04      	ldr	r3, [pc, #16]	; (8001a68 <HAL_RCC_OscConfig+0x778>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d0f0      	beq.n	8001a44 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a62:	e050      	b.n	8001b06 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e04f      	b.n	8001b08 <HAL_RCC_OscConfig+0x818>
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a70:	4b27      	ldr	r3, [pc, #156]	; (8001b10 <HAL_RCC_OscConfig+0x820>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d144      	bne.n	8001b06 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a7c:	4b24      	ldr	r3, [pc, #144]	; (8001b10 <HAL_RCC_OscConfig+0x820>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a23      	ldr	r2, [pc, #140]	; (8001b10 <HAL_RCC_OscConfig+0x820>)
 8001a82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a86:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a88:	4b21      	ldr	r3, [pc, #132]	; (8001b10 <HAL_RCC_OscConfig+0x820>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	4a20      	ldr	r2, [pc, #128]	; (8001b10 <HAL_RCC_OscConfig+0x820>)
 8001a8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a92:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a94:	f7ff f944 	bl	8000d20 <HAL_GetTick>
 8001a98:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a9a:	e008      	b.n	8001aae <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a9c:	f7ff f940 	bl	8000d20 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e02c      	b.n	8001b08 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aae:	4b18      	ldr	r3, [pc, #96]	; (8001b10 <HAL_RCC_OscConfig+0x820>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d0f0      	beq.n	8001a9c <HAL_RCC_OscConfig+0x7ac>
 8001aba:	e024      	b.n	8001b06 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	2b0c      	cmp	r3, #12
 8001ac0:	d01f      	beq.n	8001b02 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ac2:	4b13      	ldr	r3, [pc, #76]	; (8001b10 <HAL_RCC_OscConfig+0x820>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a12      	ldr	r2, [pc, #72]	; (8001b10 <HAL_RCC_OscConfig+0x820>)
 8001ac8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001acc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ace:	f7ff f927 	bl	8000d20 <HAL_GetTick>
 8001ad2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ad4:	e008      	b.n	8001ae8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ad6:	f7ff f923 	bl	8000d20 <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e00f      	b.n	8001b08 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ae8:	4b09      	ldr	r3, [pc, #36]	; (8001b10 <HAL_RCC_OscConfig+0x820>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d1f0      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001af4:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <HAL_RCC_OscConfig+0x820>)
 8001af6:	68da      	ldr	r2, [r3, #12]
 8001af8:	4905      	ldr	r1, [pc, #20]	; (8001b10 <HAL_RCC_OscConfig+0x820>)
 8001afa:	4b06      	ldr	r3, [pc, #24]	; (8001b14 <HAL_RCC_OscConfig+0x824>)
 8001afc:	4013      	ands	r3, r2
 8001afe:	60cb      	str	r3, [r1, #12]
 8001b00:	e001      	b.n	8001b06 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e000      	b.n	8001b08 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001b06:	2300      	movs	r3, #0
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3720      	adds	r7, #32
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40021000 	.word	0x40021000
 8001b14:	feeefffc 	.word	0xfeeefffc

08001b18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d101      	bne.n	8001b2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e0e7      	b.n	8001cfc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b2c:	4b75      	ldr	r3, [pc, #468]	; (8001d04 <HAL_RCC_ClockConfig+0x1ec>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0307 	and.w	r3, r3, #7
 8001b34:	683a      	ldr	r2, [r7, #0]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d910      	bls.n	8001b5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b3a:	4b72      	ldr	r3, [pc, #456]	; (8001d04 <HAL_RCC_ClockConfig+0x1ec>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f023 0207 	bic.w	r2, r3, #7
 8001b42:	4970      	ldr	r1, [pc, #448]	; (8001d04 <HAL_RCC_ClockConfig+0x1ec>)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b4a:	4b6e      	ldr	r3, [pc, #440]	; (8001d04 <HAL_RCC_ClockConfig+0x1ec>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0307 	and.w	r3, r3, #7
 8001b52:	683a      	ldr	r2, [r7, #0]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d001      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e0cf      	b.n	8001cfc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0302 	and.w	r3, r3, #2
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d010      	beq.n	8001b8a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689a      	ldr	r2, [r3, #8]
 8001b6c:	4b66      	ldr	r3, [pc, #408]	; (8001d08 <HAL_RCC_ClockConfig+0x1f0>)
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d908      	bls.n	8001b8a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b78:	4b63      	ldr	r3, [pc, #396]	; (8001d08 <HAL_RCC_ClockConfig+0x1f0>)
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	4960      	ldr	r1, [pc, #384]	; (8001d08 <HAL_RCC_ClockConfig+0x1f0>)
 8001b86:	4313      	orrs	r3, r2
 8001b88:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d04c      	beq.n	8001c30 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	2b03      	cmp	r3, #3
 8001b9c:	d107      	bne.n	8001bae <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b9e:	4b5a      	ldr	r3, [pc, #360]	; (8001d08 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d121      	bne.n	8001bee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e0a6      	b.n	8001cfc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d107      	bne.n	8001bc6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bb6:	4b54      	ldr	r3, [pc, #336]	; (8001d08 <HAL_RCC_ClockConfig+0x1f0>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d115      	bne.n	8001bee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e09a      	b.n	8001cfc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d107      	bne.n	8001bde <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bce:	4b4e      	ldr	r3, [pc, #312]	; (8001d08 <HAL_RCC_ClockConfig+0x1f0>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d109      	bne.n	8001bee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e08e      	b.n	8001cfc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bde:	4b4a      	ldr	r3, [pc, #296]	; (8001d08 <HAL_RCC_ClockConfig+0x1f0>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d101      	bne.n	8001bee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e086      	b.n	8001cfc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bee:	4b46      	ldr	r3, [pc, #280]	; (8001d08 <HAL_RCC_ClockConfig+0x1f0>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f023 0203 	bic.w	r2, r3, #3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	4943      	ldr	r1, [pc, #268]	; (8001d08 <HAL_RCC_ClockConfig+0x1f0>)
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c00:	f7ff f88e 	bl	8000d20 <HAL_GetTick>
 8001c04:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c06:	e00a      	b.n	8001c1e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c08:	f7ff f88a 	bl	8000d20 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e06e      	b.n	8001cfc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c1e:	4b3a      	ldr	r3, [pc, #232]	; (8001d08 <HAL_RCC_ClockConfig+0x1f0>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f003 020c 	and.w	r2, r3, #12
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d1eb      	bne.n	8001c08 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d010      	beq.n	8001c5e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689a      	ldr	r2, [r3, #8]
 8001c40:	4b31      	ldr	r3, [pc, #196]	; (8001d08 <HAL_RCC_ClockConfig+0x1f0>)
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d208      	bcs.n	8001c5e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c4c:	4b2e      	ldr	r3, [pc, #184]	; (8001d08 <HAL_RCC_ClockConfig+0x1f0>)
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	492b      	ldr	r1, [pc, #172]	; (8001d08 <HAL_RCC_ClockConfig+0x1f0>)
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c5e:	4b29      	ldr	r3, [pc, #164]	; (8001d04 <HAL_RCC_ClockConfig+0x1ec>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0307 	and.w	r3, r3, #7
 8001c66:	683a      	ldr	r2, [r7, #0]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d210      	bcs.n	8001c8e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c6c:	4b25      	ldr	r3, [pc, #148]	; (8001d04 <HAL_RCC_ClockConfig+0x1ec>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f023 0207 	bic.w	r2, r3, #7
 8001c74:	4923      	ldr	r1, [pc, #140]	; (8001d04 <HAL_RCC_ClockConfig+0x1ec>)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c7c:	4b21      	ldr	r3, [pc, #132]	; (8001d04 <HAL_RCC_ClockConfig+0x1ec>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0307 	and.w	r3, r3, #7
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d001      	beq.n	8001c8e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e036      	b.n	8001cfc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0304 	and.w	r3, r3, #4
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d008      	beq.n	8001cac <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c9a:	4b1b      	ldr	r3, [pc, #108]	; (8001d08 <HAL_RCC_ClockConfig+0x1f0>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	4918      	ldr	r1, [pc, #96]	; (8001d08 <HAL_RCC_ClockConfig+0x1f0>)
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0308 	and.w	r3, r3, #8
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d009      	beq.n	8001ccc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cb8:	4b13      	ldr	r3, [pc, #76]	; (8001d08 <HAL_RCC_ClockConfig+0x1f0>)
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	691b      	ldr	r3, [r3, #16]
 8001cc4:	00db      	lsls	r3, r3, #3
 8001cc6:	4910      	ldr	r1, [pc, #64]	; (8001d08 <HAL_RCC_ClockConfig+0x1f0>)
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ccc:	f000 f824 	bl	8001d18 <HAL_RCC_GetSysClockFreq>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	4b0d      	ldr	r3, [pc, #52]	; (8001d08 <HAL_RCC_ClockConfig+0x1f0>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	091b      	lsrs	r3, r3, #4
 8001cd8:	f003 030f 	and.w	r3, r3, #15
 8001cdc:	490b      	ldr	r1, [pc, #44]	; (8001d0c <HAL_RCC_ClockConfig+0x1f4>)
 8001cde:	5ccb      	ldrb	r3, [r1, r3]
 8001ce0:	f003 031f 	and.w	r3, r3, #31
 8001ce4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ce8:	4a09      	ldr	r2, [pc, #36]	; (8001d10 <HAL_RCC_ClockConfig+0x1f8>)
 8001cea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001cec:	4b09      	ldr	r3, [pc, #36]	; (8001d14 <HAL_RCC_ClockConfig+0x1fc>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7fe ffc5 	bl	8000c80 <HAL_InitTick>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	72fb      	strb	r3, [r7, #11]

  return status;
 8001cfa:	7afb      	ldrb	r3, [r7, #11]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3710      	adds	r7, #16
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	40022000 	.word	0x40022000
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	08004378 	.word	0x08004378
 8001d10:	20000000 	.word	0x20000000
 8001d14:	20000004 	.word	0x20000004

08001d18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b089      	sub	sp, #36	; 0x24
 8001d1c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61fb      	str	r3, [r7, #28]
 8001d22:	2300      	movs	r3, #0
 8001d24:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d26:	4b3e      	ldr	r3, [pc, #248]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f003 030c 	and.w	r3, r3, #12
 8001d2e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d30:	4b3b      	ldr	r3, [pc, #236]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	f003 0303 	and.w	r3, r3, #3
 8001d38:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d005      	beq.n	8001d4c <HAL_RCC_GetSysClockFreq+0x34>
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	2b0c      	cmp	r3, #12
 8001d44:	d121      	bne.n	8001d8a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d11e      	bne.n	8001d8a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d4c:	4b34      	ldr	r3, [pc, #208]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0308 	and.w	r3, r3, #8
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d107      	bne.n	8001d68 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d58:	4b31      	ldr	r3, [pc, #196]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d5e:	0a1b      	lsrs	r3, r3, #8
 8001d60:	f003 030f 	and.w	r3, r3, #15
 8001d64:	61fb      	str	r3, [r7, #28]
 8001d66:	e005      	b.n	8001d74 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d68:	4b2d      	ldr	r3, [pc, #180]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	091b      	lsrs	r3, r3, #4
 8001d6e:	f003 030f 	and.w	r3, r3, #15
 8001d72:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d74:	4a2b      	ldr	r2, [pc, #172]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d7c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d10d      	bne.n	8001da0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d88:	e00a      	b.n	8001da0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	2b04      	cmp	r3, #4
 8001d8e:	d102      	bne.n	8001d96 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d90:	4b25      	ldr	r3, [pc, #148]	; (8001e28 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d92:	61bb      	str	r3, [r7, #24]
 8001d94:	e004      	b.n	8001da0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	2b08      	cmp	r3, #8
 8001d9a:	d101      	bne.n	8001da0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d9c:	4b23      	ldr	r3, [pc, #140]	; (8001e2c <HAL_RCC_GetSysClockFreq+0x114>)
 8001d9e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	2b0c      	cmp	r3, #12
 8001da4:	d134      	bne.n	8001e10 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001da6:	4b1e      	ldr	r3, [pc, #120]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	f003 0303 	and.w	r3, r3, #3
 8001dae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d003      	beq.n	8001dbe <HAL_RCC_GetSysClockFreq+0xa6>
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	2b03      	cmp	r3, #3
 8001dba:	d003      	beq.n	8001dc4 <HAL_RCC_GetSysClockFreq+0xac>
 8001dbc:	e005      	b.n	8001dca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001dbe:	4b1a      	ldr	r3, [pc, #104]	; (8001e28 <HAL_RCC_GetSysClockFreq+0x110>)
 8001dc0:	617b      	str	r3, [r7, #20]
      break;
 8001dc2:	e005      	b.n	8001dd0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001dc4:	4b19      	ldr	r3, [pc, #100]	; (8001e2c <HAL_RCC_GetSysClockFreq+0x114>)
 8001dc6:	617b      	str	r3, [r7, #20]
      break;
 8001dc8:	e002      	b.n	8001dd0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	617b      	str	r3, [r7, #20]
      break;
 8001dce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001dd0:	4b13      	ldr	r3, [pc, #76]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	091b      	lsrs	r3, r3, #4
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	3301      	adds	r3, #1
 8001ddc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001dde:	4b10      	ldr	r3, [pc, #64]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	0a1b      	lsrs	r3, r3, #8
 8001de4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001de8:	697a      	ldr	r2, [r7, #20]
 8001dea:	fb03 f202 	mul.w	r2, r3, r2
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001df6:	4b0a      	ldr	r3, [pc, #40]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	0e5b      	lsrs	r3, r3, #25
 8001dfc:	f003 0303 	and.w	r3, r3, #3
 8001e00:	3301      	adds	r3, #1
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e06:	697a      	ldr	r2, [r7, #20]
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e0e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e10:	69bb      	ldr	r3, [r7, #24]
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3724      	adds	r7, #36	; 0x24
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	40021000 	.word	0x40021000
 8001e24:	08004390 	.word	0x08004390
 8001e28:	00f42400 	.word	0x00f42400
 8001e2c:	007a1200 	.word	0x007a1200

08001e30 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e34:	4b03      	ldr	r3, [pc, #12]	; (8001e44 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e36:	681b      	ldr	r3, [r3, #0]
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	20000000 	.word	0x20000000

08001e48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e4c:	f7ff fff0 	bl	8001e30 <HAL_RCC_GetHCLKFreq>
 8001e50:	4602      	mov	r2, r0
 8001e52:	4b06      	ldr	r3, [pc, #24]	; (8001e6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	0a1b      	lsrs	r3, r3, #8
 8001e58:	f003 0307 	and.w	r3, r3, #7
 8001e5c:	4904      	ldr	r1, [pc, #16]	; (8001e70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e5e:	5ccb      	ldrb	r3, [r1, r3]
 8001e60:	f003 031f 	and.w	r3, r3, #31
 8001e64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	08004388 	.word	0x08004388

08001e74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e78:	f7ff ffda 	bl	8001e30 <HAL_RCC_GetHCLKFreq>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	4b06      	ldr	r3, [pc, #24]	; (8001e98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	0adb      	lsrs	r3, r3, #11
 8001e84:	f003 0307 	and.w	r3, r3, #7
 8001e88:	4904      	ldr	r1, [pc, #16]	; (8001e9c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e8a:	5ccb      	ldrb	r3, [r1, r3]
 8001e8c:	f003 031f 	and.w	r3, r3, #31
 8001e90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	08004388 	.word	0x08004388

08001ea0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001eac:	4b2a      	ldr	r3, [pc, #168]	; (8001f58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d003      	beq.n	8001ec0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001eb8:	f7ff f9b6 	bl	8001228 <HAL_PWREx_GetVoltageRange>
 8001ebc:	6178      	str	r0, [r7, #20]
 8001ebe:	e014      	b.n	8001eea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ec0:	4b25      	ldr	r3, [pc, #148]	; (8001f58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec4:	4a24      	ldr	r2, [pc, #144]	; (8001f58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ec6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eca:	6593      	str	r3, [r2, #88]	; 0x58
 8001ecc:	4b22      	ldr	r3, [pc, #136]	; (8001f58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed4:	60fb      	str	r3, [r7, #12]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001ed8:	f7ff f9a6 	bl	8001228 <HAL_PWREx_GetVoltageRange>
 8001edc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001ede:	4b1e      	ldr	r3, [pc, #120]	; (8001f58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee2:	4a1d      	ldr	r2, [pc, #116]	; (8001f58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ee4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ee8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ef0:	d10b      	bne.n	8001f0a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2b80      	cmp	r3, #128	; 0x80
 8001ef6:	d919      	bls.n	8001f2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2ba0      	cmp	r3, #160	; 0xa0
 8001efc:	d902      	bls.n	8001f04 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001efe:	2302      	movs	r3, #2
 8001f00:	613b      	str	r3, [r7, #16]
 8001f02:	e013      	b.n	8001f2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f04:	2301      	movs	r3, #1
 8001f06:	613b      	str	r3, [r7, #16]
 8001f08:	e010      	b.n	8001f2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2b80      	cmp	r3, #128	; 0x80
 8001f0e:	d902      	bls.n	8001f16 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f10:	2303      	movs	r3, #3
 8001f12:	613b      	str	r3, [r7, #16]
 8001f14:	e00a      	b.n	8001f2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2b80      	cmp	r3, #128	; 0x80
 8001f1a:	d102      	bne.n	8001f22 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	613b      	str	r3, [r7, #16]
 8001f20:	e004      	b.n	8001f2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2b70      	cmp	r3, #112	; 0x70
 8001f26:	d101      	bne.n	8001f2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f28:	2301      	movs	r3, #1
 8001f2a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f2c:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f023 0207 	bic.w	r2, r3, #7
 8001f34:	4909      	ldr	r1, [pc, #36]	; (8001f5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f3c:	4b07      	ldr	r3, [pc, #28]	; (8001f5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0307 	and.w	r3, r3, #7
 8001f44:	693a      	ldr	r2, [r7, #16]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d001      	beq.n	8001f4e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e000      	b.n	8001f50 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3718      	adds	r7, #24
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	40022000 	.word	0x40022000

08001f60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f68:	2300      	movs	r3, #0
 8001f6a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d031      	beq.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f80:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001f84:	d01a      	beq.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8001f86:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001f8a:	d814      	bhi.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d009      	beq.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001f90:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f94:	d10f      	bne.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001f96:	4b5d      	ldr	r3, [pc, #372]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	4a5c      	ldr	r2, [pc, #368]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fa0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fa2:	e00c      	b.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	3304      	adds	r3, #4
 8001fa8:	2100      	movs	r1, #0
 8001faa:	4618      	mov	r0, r3
 8001fac:	f000 f9de 	bl	800236c <RCCEx_PLLSAI1_Config>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fb4:	e003      	b.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	74fb      	strb	r3, [r7, #19]
      break;
 8001fba:	e000      	b.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8001fbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001fbe:	7cfb      	ldrb	r3, [r7, #19]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d10b      	bne.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001fc4:	4b51      	ldr	r3, [pc, #324]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fd2:	494e      	ldr	r1, [pc, #312]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001fda:	e001      	b.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fdc:	7cfb      	ldrb	r3, [r7, #19]
 8001fde:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	f000 809e 	beq.w	800212a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001ff2:	4b46      	ldr	r3, [pc, #280]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001ffe:	2301      	movs	r3, #1
 8002000:	e000      	b.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002002:	2300      	movs	r3, #0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d00d      	beq.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002008:	4b40      	ldr	r3, [pc, #256]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800200a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800200c:	4a3f      	ldr	r2, [pc, #252]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800200e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002012:	6593      	str	r3, [r2, #88]	; 0x58
 8002014:	4b3d      	ldr	r3, [pc, #244]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800201c:	60bb      	str	r3, [r7, #8]
 800201e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002020:	2301      	movs	r3, #1
 8002022:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002024:	4b3a      	ldr	r3, [pc, #232]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a39      	ldr	r2, [pc, #228]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800202a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800202e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002030:	f7fe fe76 	bl	8000d20 <HAL_GetTick>
 8002034:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002036:	e009      	b.n	800204c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002038:	f7fe fe72 	bl	8000d20 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d902      	bls.n	800204c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	74fb      	strb	r3, [r7, #19]
        break;
 800204a:	e005      	b.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800204c:	4b30      	ldr	r3, [pc, #192]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002054:	2b00      	cmp	r3, #0
 8002056:	d0ef      	beq.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002058:	7cfb      	ldrb	r3, [r7, #19]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d15a      	bne.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800205e:	4b2b      	ldr	r3, [pc, #172]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002064:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002068:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d01e      	beq.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002074:	697a      	ldr	r2, [r7, #20]
 8002076:	429a      	cmp	r2, r3
 8002078:	d019      	beq.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800207a:	4b24      	ldr	r3, [pc, #144]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800207c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002080:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002084:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002086:	4b21      	ldr	r3, [pc, #132]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800208c:	4a1f      	ldr	r2, [pc, #124]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800208e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002092:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002096:	4b1d      	ldr	r3, [pc, #116]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800209c:	4a1b      	ldr	r2, [pc, #108]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800209e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80020a6:	4a19      	ldr	r2, [pc, #100]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	f003 0301 	and.w	r3, r3, #1
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d016      	beq.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b8:	f7fe fe32 	bl	8000d20 <HAL_GetTick>
 80020bc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020be:	e00b      	b.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020c0:	f7fe fe2e 	bl	8000d20 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d902      	bls.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	74fb      	strb	r3, [r7, #19]
            break;
 80020d6:	e006      	b.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020d8:	4b0c      	ldr	r3, [pc, #48]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d0ec      	beq.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80020e6:	7cfb      	ldrb	r3, [r7, #19]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d10b      	bne.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020ec:	4b07      	ldr	r3, [pc, #28]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020fa:	4904      	ldr	r1, [pc, #16]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002102:	e009      	b.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002104:	7cfb      	ldrb	r3, [r7, #19]
 8002106:	74bb      	strb	r3, [r7, #18]
 8002108:	e006      	b.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800210a:	bf00      	nop
 800210c:	40021000 	.word	0x40021000
 8002110:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002114:	7cfb      	ldrb	r3, [r7, #19]
 8002116:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002118:	7c7b      	ldrb	r3, [r7, #17]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d105      	bne.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800211e:	4b8a      	ldr	r3, [pc, #552]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002122:	4a89      	ldr	r2, [pc, #548]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002124:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002128:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00a      	beq.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002136:	4b84      	ldr	r3, [pc, #528]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800213c:	f023 0203 	bic.w	r2, r3, #3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a1b      	ldr	r3, [r3, #32]
 8002144:	4980      	ldr	r1, [pc, #512]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002146:	4313      	orrs	r3, r2
 8002148:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d00a      	beq.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002158:	4b7b      	ldr	r3, [pc, #492]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800215a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800215e:	f023 020c 	bic.w	r2, r3, #12
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002166:	4978      	ldr	r1, [pc, #480]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002168:	4313      	orrs	r3, r2
 800216a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0320 	and.w	r3, r3, #32
 8002176:	2b00      	cmp	r3, #0
 8002178:	d00a      	beq.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800217a:	4b73      	ldr	r3, [pc, #460]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800217c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002180:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002188:	496f      	ldr	r1, [pc, #444]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800218a:	4313      	orrs	r3, r2
 800218c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00a      	beq.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800219c:	4b6a      	ldr	r3, [pc, #424]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800219e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021a2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021aa:	4967      	ldr	r1, [pc, #412]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00a      	beq.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80021be:	4b62      	ldr	r3, [pc, #392]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021cc:	495e      	ldr	r1, [pc, #376]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d00a      	beq.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021e0:	4b59      	ldr	r3, [pc, #356]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ee:	4956      	ldr	r1, [pc, #344]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00a      	beq.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002202:	4b51      	ldr	r3, [pc, #324]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002208:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002210:	494d      	ldr	r1, [pc, #308]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002212:	4313      	orrs	r3, r2
 8002214:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d028      	beq.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002224:	4b48      	ldr	r3, [pc, #288]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800222a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002232:	4945      	ldr	r1, [pc, #276]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002234:	4313      	orrs	r3, r2
 8002236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002242:	d106      	bne.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002244:	4b40      	ldr	r3, [pc, #256]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	4a3f      	ldr	r2, [pc, #252]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800224a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800224e:	60d3      	str	r3, [r2, #12]
 8002250:	e011      	b.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002256:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800225a:	d10c      	bne.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	3304      	adds	r3, #4
 8002260:	2101      	movs	r1, #1
 8002262:	4618      	mov	r0, r3
 8002264:	f000 f882 	bl	800236c <RCCEx_PLLSAI1_Config>
 8002268:	4603      	mov	r3, r0
 800226a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800226c:	7cfb      	ldrb	r3, [r7, #19]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002272:	7cfb      	ldrb	r3, [r7, #19]
 8002274:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d028      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002282:	4b31      	ldr	r3, [pc, #196]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002288:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002290:	492d      	ldr	r1, [pc, #180]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002292:	4313      	orrs	r3, r2
 8002294:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022a0:	d106      	bne.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022a2:	4b29      	ldr	r3, [pc, #164]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	4a28      	ldr	r2, [pc, #160]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022ac:	60d3      	str	r3, [r2, #12]
 80022ae:	e011      	b.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022b8:	d10c      	bne.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	3304      	adds	r3, #4
 80022be:	2101      	movs	r1, #1
 80022c0:	4618      	mov	r0, r3
 80022c2:	f000 f853 	bl	800236c <RCCEx_PLLSAI1_Config>
 80022c6:	4603      	mov	r3, r0
 80022c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022ca:	7cfb      	ldrb	r3, [r7, #19]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80022d0:	7cfb      	ldrb	r3, [r7, #19]
 80022d2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d01c      	beq.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80022e0:	4b19      	ldr	r3, [pc, #100]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022ee:	4916      	ldr	r1, [pc, #88]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80022fe:	d10c      	bne.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	3304      	adds	r3, #4
 8002304:	2102      	movs	r1, #2
 8002306:	4618      	mov	r0, r3
 8002308:	f000 f830 	bl	800236c <RCCEx_PLLSAI1_Config>
 800230c:	4603      	mov	r3, r0
 800230e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002310:	7cfb      	ldrb	r3, [r7, #19]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002316:	7cfb      	ldrb	r3, [r7, #19]
 8002318:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d00a      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002326:	4b08      	ldr	r3, [pc, #32]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800232c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002334:	4904      	ldr	r1, [pc, #16]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002336:	4313      	orrs	r3, r2
 8002338:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800233c:	7cbb      	ldrb	r3, [r7, #18]
}
 800233e:	4618      	mov	r0, r3
 8002340:	3718      	adds	r7, #24
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	40021000 	.word	0x40021000

0800234c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002350:	4b05      	ldr	r3, [pc, #20]	; (8002368 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a04      	ldr	r2, [pc, #16]	; (8002368 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002356:	f043 0304 	orr.w	r3, r3, #4
 800235a:	6013      	str	r3, [r2, #0]
}
 800235c:	bf00      	nop
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	40021000 	.word	0x40021000

0800236c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002376:	2300      	movs	r3, #0
 8002378:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800237a:	4b74      	ldr	r3, [pc, #464]	; (800254c <RCCEx_PLLSAI1_Config+0x1e0>)
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	f003 0303 	and.w	r3, r3, #3
 8002382:	2b00      	cmp	r3, #0
 8002384:	d018      	beq.n	80023b8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002386:	4b71      	ldr	r3, [pc, #452]	; (800254c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	f003 0203 	and.w	r2, r3, #3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	429a      	cmp	r2, r3
 8002394:	d10d      	bne.n	80023b2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
       ||
 800239a:	2b00      	cmp	r3, #0
 800239c:	d009      	beq.n	80023b2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800239e:	4b6b      	ldr	r3, [pc, #428]	; (800254c <RCCEx_PLLSAI1_Config+0x1e0>)
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	091b      	lsrs	r3, r3, #4
 80023a4:	f003 0307 	and.w	r3, r3, #7
 80023a8:	1c5a      	adds	r2, r3, #1
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
       ||
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d047      	beq.n	8002442 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	73fb      	strb	r3, [r7, #15]
 80023b6:	e044      	b.n	8002442 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2b03      	cmp	r3, #3
 80023be:	d018      	beq.n	80023f2 <RCCEx_PLLSAI1_Config+0x86>
 80023c0:	2b03      	cmp	r3, #3
 80023c2:	d825      	bhi.n	8002410 <RCCEx_PLLSAI1_Config+0xa4>
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d002      	beq.n	80023ce <RCCEx_PLLSAI1_Config+0x62>
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d009      	beq.n	80023e0 <RCCEx_PLLSAI1_Config+0x74>
 80023cc:	e020      	b.n	8002410 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80023ce:	4b5f      	ldr	r3, [pc, #380]	; (800254c <RCCEx_PLLSAI1_Config+0x1e0>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d11d      	bne.n	8002416 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023de:	e01a      	b.n	8002416 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80023e0:	4b5a      	ldr	r3, [pc, #360]	; (800254c <RCCEx_PLLSAI1_Config+0x1e0>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d116      	bne.n	800241a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023f0:	e013      	b.n	800241a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80023f2:	4b56      	ldr	r3, [pc, #344]	; (800254c <RCCEx_PLLSAI1_Config+0x1e0>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d10f      	bne.n	800241e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80023fe:	4b53      	ldr	r3, [pc, #332]	; (800254c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d109      	bne.n	800241e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800240e:	e006      	b.n	800241e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	73fb      	strb	r3, [r7, #15]
      break;
 8002414:	e004      	b.n	8002420 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002416:	bf00      	nop
 8002418:	e002      	b.n	8002420 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800241a:	bf00      	nop
 800241c:	e000      	b.n	8002420 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800241e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002420:	7bfb      	ldrb	r3, [r7, #15]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d10d      	bne.n	8002442 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002426:	4b49      	ldr	r3, [pc, #292]	; (800254c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6819      	ldr	r1, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	3b01      	subs	r3, #1
 8002438:	011b      	lsls	r3, r3, #4
 800243a:	430b      	orrs	r3, r1
 800243c:	4943      	ldr	r1, [pc, #268]	; (800254c <RCCEx_PLLSAI1_Config+0x1e0>)
 800243e:	4313      	orrs	r3, r2
 8002440:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002442:	7bfb      	ldrb	r3, [r7, #15]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d17c      	bne.n	8002542 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002448:	4b40      	ldr	r3, [pc, #256]	; (800254c <RCCEx_PLLSAI1_Config+0x1e0>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a3f      	ldr	r2, [pc, #252]	; (800254c <RCCEx_PLLSAI1_Config+0x1e0>)
 800244e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002452:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002454:	f7fe fc64 	bl	8000d20 <HAL_GetTick>
 8002458:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800245a:	e009      	b.n	8002470 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800245c:	f7fe fc60 	bl	8000d20 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b02      	cmp	r3, #2
 8002468:	d902      	bls.n	8002470 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	73fb      	strb	r3, [r7, #15]
        break;
 800246e:	e005      	b.n	800247c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002470:	4b36      	ldr	r3, [pc, #216]	; (800254c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d1ef      	bne.n	800245c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800247c:	7bfb      	ldrb	r3, [r7, #15]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d15f      	bne.n	8002542 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d110      	bne.n	80024aa <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002488:	4b30      	ldr	r3, [pc, #192]	; (800254c <RCCEx_PLLSAI1_Config+0x1e0>)
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002490:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	6892      	ldr	r2, [r2, #8]
 8002498:	0211      	lsls	r1, r2, #8
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	68d2      	ldr	r2, [r2, #12]
 800249e:	06d2      	lsls	r2, r2, #27
 80024a0:	430a      	orrs	r2, r1
 80024a2:	492a      	ldr	r1, [pc, #168]	; (800254c <RCCEx_PLLSAI1_Config+0x1e0>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	610b      	str	r3, [r1, #16]
 80024a8:	e027      	b.n	80024fa <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d112      	bne.n	80024d6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024b0:	4b26      	ldr	r3, [pc, #152]	; (800254c <RCCEx_PLLSAI1_Config+0x1e0>)
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80024b8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	6892      	ldr	r2, [r2, #8]
 80024c0:	0211      	lsls	r1, r2, #8
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	6912      	ldr	r2, [r2, #16]
 80024c6:	0852      	lsrs	r2, r2, #1
 80024c8:	3a01      	subs	r2, #1
 80024ca:	0552      	lsls	r2, r2, #21
 80024cc:	430a      	orrs	r2, r1
 80024ce:	491f      	ldr	r1, [pc, #124]	; (800254c <RCCEx_PLLSAI1_Config+0x1e0>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	610b      	str	r3, [r1, #16]
 80024d4:	e011      	b.n	80024fa <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024d6:	4b1d      	ldr	r3, [pc, #116]	; (800254c <RCCEx_PLLSAI1_Config+0x1e0>)
 80024d8:	691b      	ldr	r3, [r3, #16]
 80024da:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80024de:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	6892      	ldr	r2, [r2, #8]
 80024e6:	0211      	lsls	r1, r2, #8
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	6952      	ldr	r2, [r2, #20]
 80024ec:	0852      	lsrs	r2, r2, #1
 80024ee:	3a01      	subs	r2, #1
 80024f0:	0652      	lsls	r2, r2, #25
 80024f2:	430a      	orrs	r2, r1
 80024f4:	4915      	ldr	r1, [pc, #84]	; (800254c <RCCEx_PLLSAI1_Config+0x1e0>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80024fa:	4b14      	ldr	r3, [pc, #80]	; (800254c <RCCEx_PLLSAI1_Config+0x1e0>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a13      	ldr	r2, [pc, #76]	; (800254c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002500:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002504:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002506:	f7fe fc0b 	bl	8000d20 <HAL_GetTick>
 800250a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800250c:	e009      	b.n	8002522 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800250e:	f7fe fc07 	bl	8000d20 <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b02      	cmp	r3, #2
 800251a:	d902      	bls.n	8002522 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	73fb      	strb	r3, [r7, #15]
          break;
 8002520:	e005      	b.n	800252e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002522:	4b0a      	ldr	r3, [pc, #40]	; (800254c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d0ef      	beq.n	800250e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800252e:	7bfb      	ldrb	r3, [r7, #15]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d106      	bne.n	8002542 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002534:	4b05      	ldr	r3, [pc, #20]	; (800254c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002536:	691a      	ldr	r2, [r3, #16]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	4903      	ldr	r1, [pc, #12]	; (800254c <RCCEx_PLLSAI1_Config+0x1e0>)
 800253e:	4313      	orrs	r3, r2
 8002540:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002542:	7bfb      	ldrb	r3, [r7, #15]
}
 8002544:	4618      	mov	r0, r3
 8002546:	3710      	adds	r7, #16
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	40021000 	.word	0x40021000

08002550 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d101      	bne.n	8002562 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e040      	b.n	80025e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002566:	2b00      	cmp	r3, #0
 8002568:	d106      	bne.n	8002578 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f7fe fa66 	bl	8000a44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2224      	movs	r2, #36	; 0x24
 800257c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f022 0201 	bic.w	r2, r2, #1
 800258c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002592:	2b00      	cmp	r3, #0
 8002594:	d002      	beq.n	800259c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 fba8 	bl	8002cec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f000 f979 	bl	8002894 <UART_SetConfig>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d101      	bne.n	80025ac <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e01b      	b.n	80025e4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	685a      	ldr	r2, [r3, #4]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	689a      	ldr	r2, [r3, #8]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f042 0201 	orr.w	r2, r2, #1
 80025da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f000 fc27 	bl	8002e30 <UART_CheckIdleState>
 80025e2:	4603      	mov	r3, r0
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3708      	adds	r7, #8
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b08a      	sub	sp, #40	; 0x28
 80025f0:	af02      	add	r7, sp, #8
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	603b      	str	r3, [r7, #0]
 80025f8:	4613      	mov	r3, r2
 80025fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002600:	2b20      	cmp	r3, #32
 8002602:	d178      	bne.n	80026f6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d002      	beq.n	8002610 <HAL_UART_Transmit+0x24>
 800260a:	88fb      	ldrh	r3, [r7, #6]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d101      	bne.n	8002614 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e071      	b.n	80026f8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2200      	movs	r2, #0
 8002618:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2221      	movs	r2, #33	; 0x21
 8002620:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002622:	f7fe fb7d 	bl	8000d20 <HAL_GetTick>
 8002626:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	88fa      	ldrh	r2, [r7, #6]
 800262c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	88fa      	ldrh	r2, [r7, #6]
 8002634:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002640:	d108      	bne.n	8002654 <HAL_UART_Transmit+0x68>
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d104      	bne.n	8002654 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800264a:	2300      	movs	r3, #0
 800264c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	61bb      	str	r3, [r7, #24]
 8002652:	e003      	b.n	800265c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002658:	2300      	movs	r3, #0
 800265a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800265c:	e030      	b.n	80026c0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	2200      	movs	r2, #0
 8002666:	2180      	movs	r1, #128	; 0x80
 8002668:	68f8      	ldr	r0, [r7, #12]
 800266a:	f000 fc89 	bl	8002f80 <UART_WaitOnFlagUntilTimeout>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d004      	beq.n	800267e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2220      	movs	r2, #32
 8002678:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e03c      	b.n	80026f8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d10b      	bne.n	800269c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	881a      	ldrh	r2, [r3, #0]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002690:	b292      	uxth	r2, r2
 8002692:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	3302      	adds	r3, #2
 8002698:	61bb      	str	r3, [r7, #24]
 800269a:	e008      	b.n	80026ae <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	781a      	ldrb	r2, [r3, #0]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	b292      	uxth	r2, r2
 80026a6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	3301      	adds	r3, #1
 80026ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	3b01      	subs	r3, #1
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d1c8      	bne.n	800265e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	9300      	str	r3, [sp, #0]
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	2200      	movs	r2, #0
 80026d4:	2140      	movs	r1, #64	; 0x40
 80026d6:	68f8      	ldr	r0, [r7, #12]
 80026d8:	f000 fc52 	bl	8002f80 <UART_WaitOnFlagUntilTimeout>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d004      	beq.n	80026ec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2220      	movs	r2, #32
 80026e6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e005      	b.n	80026f8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2220      	movs	r2, #32
 80026f0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80026f2:	2300      	movs	r3, #0
 80026f4:	e000      	b.n	80026f8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80026f6:	2302      	movs	r3, #2
  }
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3720      	adds	r7, #32
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}

08002700 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b08a      	sub	sp, #40	; 0x28
 8002704:	af02      	add	r7, sp, #8
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	603b      	str	r3, [r7, #0]
 800270c:	4613      	mov	r3, r2
 800270e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002716:	2b20      	cmp	r3, #32
 8002718:	f040 80b6 	bne.w	8002888 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d002      	beq.n	8002728 <HAL_UART_Receive+0x28>
 8002722:	88fb      	ldrh	r3, [r7, #6]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d101      	bne.n	800272c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e0ae      	b.n	800288a <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2200      	movs	r2, #0
 8002730:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2222      	movs	r2, #34	; 0x22
 8002738:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2200      	movs	r2, #0
 8002740:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002742:	f7fe faed 	bl	8000d20 <HAL_GetTick>
 8002746:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	88fa      	ldrh	r2, [r7, #6]
 800274c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	88fa      	ldrh	r2, [r7, #6]
 8002754:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002760:	d10e      	bne.n	8002780 <HAL_UART_Receive+0x80>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d105      	bne.n	8002776 <HAL_UART_Receive+0x76>
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002770:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002774:	e02d      	b.n	80027d2 <HAL_UART_Receive+0xd2>
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	22ff      	movs	r2, #255	; 0xff
 800277a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800277e:	e028      	b.n	80027d2 <HAL_UART_Receive+0xd2>
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d10d      	bne.n	80027a4 <HAL_UART_Receive+0xa4>
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d104      	bne.n	800279a <HAL_UART_Receive+0x9a>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	22ff      	movs	r2, #255	; 0xff
 8002794:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002798:	e01b      	b.n	80027d2 <HAL_UART_Receive+0xd2>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	227f      	movs	r2, #127	; 0x7f
 800279e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80027a2:	e016      	b.n	80027d2 <HAL_UART_Receive+0xd2>
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027ac:	d10d      	bne.n	80027ca <HAL_UART_Receive+0xca>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d104      	bne.n	80027c0 <HAL_UART_Receive+0xc0>
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	227f      	movs	r2, #127	; 0x7f
 80027ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80027be:	e008      	b.n	80027d2 <HAL_UART_Receive+0xd2>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	223f      	movs	r2, #63	; 0x3f
 80027c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80027c8:	e003      	b.n	80027d2 <HAL_UART_Receive+0xd2>
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80027d8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027e2:	d108      	bne.n	80027f6 <HAL_UART_Receive+0xf6>
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d104      	bne.n	80027f6 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80027ec:	2300      	movs	r3, #0
 80027ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	61bb      	str	r3, [r7, #24]
 80027f4:	e003      	b.n	80027fe <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027fa:	2300      	movs	r3, #0
 80027fc:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80027fe:	e037      	b.n	8002870 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	9300      	str	r3, [sp, #0]
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	2200      	movs	r2, #0
 8002808:	2120      	movs	r1, #32
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f000 fbb8 	bl	8002f80 <UART_WaitOnFlagUntilTimeout>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d005      	beq.n	8002822 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2220      	movs	r2, #32
 800281a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e033      	b.n	800288a <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d10c      	bne.n	8002842 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800282e:	b29a      	uxth	r2, r3
 8002830:	8a7b      	ldrh	r3, [r7, #18]
 8002832:	4013      	ands	r3, r2
 8002834:	b29a      	uxth	r2, r3
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	3302      	adds	r3, #2
 800283e:	61bb      	str	r3, [r7, #24]
 8002840:	e00d      	b.n	800285e <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002848:	b29b      	uxth	r3, r3
 800284a:	b2da      	uxtb	r2, r3
 800284c:	8a7b      	ldrh	r3, [r7, #18]
 800284e:	b2db      	uxtb	r3, r3
 8002850:	4013      	ands	r3, r2
 8002852:	b2da      	uxtb	r2, r3
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	3301      	adds	r3, #1
 800285c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002864:	b29b      	uxth	r3, r3
 8002866:	3b01      	subs	r3, #1
 8002868:	b29a      	uxth	r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002876:	b29b      	uxth	r3, r3
 8002878:	2b00      	cmp	r3, #0
 800287a:	d1c1      	bne.n	8002800 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2220      	movs	r2, #32
 8002880:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8002884:	2300      	movs	r3, #0
 8002886:	e000      	b.n	800288a <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8002888:	2302      	movs	r3, #2
  }
}
 800288a:	4618      	mov	r0, r3
 800288c:	3720      	adds	r7, #32
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
	...

08002894 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002894:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002898:	b08a      	sub	sp, #40	; 0x28
 800289a:	af00      	add	r7, sp, #0
 800289c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800289e:	2300      	movs	r3, #0
 80028a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	689a      	ldr	r2, [r3, #8]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	431a      	orrs	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	695b      	ldr	r3, [r3, #20]
 80028b2:	431a      	orrs	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	69db      	ldr	r3, [r3, #28]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	4bb4      	ldr	r3, [pc, #720]	; (8002b94 <UART_SetConfig+0x300>)
 80028c4:	4013      	ands	r3, r2
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	6812      	ldr	r2, [r2, #0]
 80028ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028cc:	430b      	orrs	r3, r1
 80028ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	68da      	ldr	r2, [r3, #12]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	430a      	orrs	r2, r1
 80028e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4aa9      	ldr	r2, [pc, #676]	; (8002b98 <UART_SetConfig+0x304>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d004      	beq.n	8002900 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028fc:	4313      	orrs	r3, r2
 80028fe:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002910:	430a      	orrs	r2, r1
 8002912:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4aa0      	ldr	r2, [pc, #640]	; (8002b9c <UART_SetConfig+0x308>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d126      	bne.n	800296c <UART_SetConfig+0xd8>
 800291e:	4ba0      	ldr	r3, [pc, #640]	; (8002ba0 <UART_SetConfig+0x30c>)
 8002920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002924:	f003 0303 	and.w	r3, r3, #3
 8002928:	2b03      	cmp	r3, #3
 800292a:	d81b      	bhi.n	8002964 <UART_SetConfig+0xd0>
 800292c:	a201      	add	r2, pc, #4	; (adr r2, 8002934 <UART_SetConfig+0xa0>)
 800292e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002932:	bf00      	nop
 8002934:	08002945 	.word	0x08002945
 8002938:	08002955 	.word	0x08002955
 800293c:	0800294d 	.word	0x0800294d
 8002940:	0800295d 	.word	0x0800295d
 8002944:	2301      	movs	r3, #1
 8002946:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800294a:	e080      	b.n	8002a4e <UART_SetConfig+0x1ba>
 800294c:	2302      	movs	r3, #2
 800294e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002952:	e07c      	b.n	8002a4e <UART_SetConfig+0x1ba>
 8002954:	2304      	movs	r3, #4
 8002956:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800295a:	e078      	b.n	8002a4e <UART_SetConfig+0x1ba>
 800295c:	2308      	movs	r3, #8
 800295e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002962:	e074      	b.n	8002a4e <UART_SetConfig+0x1ba>
 8002964:	2310      	movs	r3, #16
 8002966:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800296a:	e070      	b.n	8002a4e <UART_SetConfig+0x1ba>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a8c      	ldr	r2, [pc, #560]	; (8002ba4 <UART_SetConfig+0x310>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d138      	bne.n	80029e8 <UART_SetConfig+0x154>
 8002976:	4b8a      	ldr	r3, [pc, #552]	; (8002ba0 <UART_SetConfig+0x30c>)
 8002978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800297c:	f003 030c 	and.w	r3, r3, #12
 8002980:	2b0c      	cmp	r3, #12
 8002982:	d82d      	bhi.n	80029e0 <UART_SetConfig+0x14c>
 8002984:	a201      	add	r2, pc, #4	; (adr r2, 800298c <UART_SetConfig+0xf8>)
 8002986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800298a:	bf00      	nop
 800298c:	080029c1 	.word	0x080029c1
 8002990:	080029e1 	.word	0x080029e1
 8002994:	080029e1 	.word	0x080029e1
 8002998:	080029e1 	.word	0x080029e1
 800299c:	080029d1 	.word	0x080029d1
 80029a0:	080029e1 	.word	0x080029e1
 80029a4:	080029e1 	.word	0x080029e1
 80029a8:	080029e1 	.word	0x080029e1
 80029ac:	080029c9 	.word	0x080029c9
 80029b0:	080029e1 	.word	0x080029e1
 80029b4:	080029e1 	.word	0x080029e1
 80029b8:	080029e1 	.word	0x080029e1
 80029bc:	080029d9 	.word	0x080029d9
 80029c0:	2300      	movs	r3, #0
 80029c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029c6:	e042      	b.n	8002a4e <UART_SetConfig+0x1ba>
 80029c8:	2302      	movs	r3, #2
 80029ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029ce:	e03e      	b.n	8002a4e <UART_SetConfig+0x1ba>
 80029d0:	2304      	movs	r3, #4
 80029d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029d6:	e03a      	b.n	8002a4e <UART_SetConfig+0x1ba>
 80029d8:	2308      	movs	r3, #8
 80029da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029de:	e036      	b.n	8002a4e <UART_SetConfig+0x1ba>
 80029e0:	2310      	movs	r3, #16
 80029e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029e6:	e032      	b.n	8002a4e <UART_SetConfig+0x1ba>
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a6a      	ldr	r2, [pc, #424]	; (8002b98 <UART_SetConfig+0x304>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d12a      	bne.n	8002a48 <UART_SetConfig+0x1b4>
 80029f2:	4b6b      	ldr	r3, [pc, #428]	; (8002ba0 <UART_SetConfig+0x30c>)
 80029f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80029fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002a00:	d01a      	beq.n	8002a38 <UART_SetConfig+0x1a4>
 8002a02:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002a06:	d81b      	bhi.n	8002a40 <UART_SetConfig+0x1ac>
 8002a08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a0c:	d00c      	beq.n	8002a28 <UART_SetConfig+0x194>
 8002a0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a12:	d815      	bhi.n	8002a40 <UART_SetConfig+0x1ac>
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d003      	beq.n	8002a20 <UART_SetConfig+0x18c>
 8002a18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a1c:	d008      	beq.n	8002a30 <UART_SetConfig+0x19c>
 8002a1e:	e00f      	b.n	8002a40 <UART_SetConfig+0x1ac>
 8002a20:	2300      	movs	r3, #0
 8002a22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a26:	e012      	b.n	8002a4e <UART_SetConfig+0x1ba>
 8002a28:	2302      	movs	r3, #2
 8002a2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a2e:	e00e      	b.n	8002a4e <UART_SetConfig+0x1ba>
 8002a30:	2304      	movs	r3, #4
 8002a32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a36:	e00a      	b.n	8002a4e <UART_SetConfig+0x1ba>
 8002a38:	2308      	movs	r3, #8
 8002a3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a3e:	e006      	b.n	8002a4e <UART_SetConfig+0x1ba>
 8002a40:	2310      	movs	r3, #16
 8002a42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a46:	e002      	b.n	8002a4e <UART_SetConfig+0x1ba>
 8002a48:	2310      	movs	r3, #16
 8002a4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a51      	ldr	r2, [pc, #324]	; (8002b98 <UART_SetConfig+0x304>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d17a      	bne.n	8002b4e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002a58:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a5c:	2b08      	cmp	r3, #8
 8002a5e:	d824      	bhi.n	8002aaa <UART_SetConfig+0x216>
 8002a60:	a201      	add	r2, pc, #4	; (adr r2, 8002a68 <UART_SetConfig+0x1d4>)
 8002a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a66:	bf00      	nop
 8002a68:	08002a8d 	.word	0x08002a8d
 8002a6c:	08002aab 	.word	0x08002aab
 8002a70:	08002a95 	.word	0x08002a95
 8002a74:	08002aab 	.word	0x08002aab
 8002a78:	08002a9b 	.word	0x08002a9b
 8002a7c:	08002aab 	.word	0x08002aab
 8002a80:	08002aab 	.word	0x08002aab
 8002a84:	08002aab 	.word	0x08002aab
 8002a88:	08002aa3 	.word	0x08002aa3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a8c:	f7ff f9dc 	bl	8001e48 <HAL_RCC_GetPCLK1Freq>
 8002a90:	61f8      	str	r0, [r7, #28]
        break;
 8002a92:	e010      	b.n	8002ab6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a94:	4b44      	ldr	r3, [pc, #272]	; (8002ba8 <UART_SetConfig+0x314>)
 8002a96:	61fb      	str	r3, [r7, #28]
        break;
 8002a98:	e00d      	b.n	8002ab6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a9a:	f7ff f93d 	bl	8001d18 <HAL_RCC_GetSysClockFreq>
 8002a9e:	61f8      	str	r0, [r7, #28]
        break;
 8002aa0:	e009      	b.n	8002ab6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002aa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002aa6:	61fb      	str	r3, [r7, #28]
        break;
 8002aa8:	e005      	b.n	8002ab6 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002ab4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f000 8107 	beq.w	8002ccc <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	685a      	ldr	r2, [r3, #4]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	4413      	add	r3, r2
 8002ac8:	69fa      	ldr	r2, [r7, #28]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d305      	bcc.n	8002ada <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002ad4:	69fa      	ldr	r2, [r7, #28]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d903      	bls.n	8002ae2 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002ae0:	e0f4      	b.n	8002ccc <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	461c      	mov	r4, r3
 8002ae8:	4615      	mov	r5, r2
 8002aea:	f04f 0200 	mov.w	r2, #0
 8002aee:	f04f 0300 	mov.w	r3, #0
 8002af2:	022b      	lsls	r3, r5, #8
 8002af4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002af8:	0222      	lsls	r2, r4, #8
 8002afa:	68f9      	ldr	r1, [r7, #12]
 8002afc:	6849      	ldr	r1, [r1, #4]
 8002afe:	0849      	lsrs	r1, r1, #1
 8002b00:	2000      	movs	r0, #0
 8002b02:	4688      	mov	r8, r1
 8002b04:	4681      	mov	r9, r0
 8002b06:	eb12 0a08 	adds.w	sl, r2, r8
 8002b0a:	eb43 0b09 	adc.w	fp, r3, r9
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	603b      	str	r3, [r7, #0]
 8002b16:	607a      	str	r2, [r7, #4]
 8002b18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b1c:	4650      	mov	r0, sl
 8002b1e:	4659      	mov	r1, fp
 8002b20:	f7fd fbb6 	bl	8000290 <__aeabi_uldivmod>
 8002b24:	4602      	mov	r2, r0
 8002b26:	460b      	mov	r3, r1
 8002b28:	4613      	mov	r3, r2
 8002b2a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b32:	d308      	bcc.n	8002b46 <UART_SetConfig+0x2b2>
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b3a:	d204      	bcs.n	8002b46 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	60da      	str	r2, [r3, #12]
 8002b44:	e0c2      	b.n	8002ccc <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002b4c:	e0be      	b.n	8002ccc <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	69db      	ldr	r3, [r3, #28]
 8002b52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b56:	d16a      	bne.n	8002c2e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8002b58:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002b5c:	2b08      	cmp	r3, #8
 8002b5e:	d834      	bhi.n	8002bca <UART_SetConfig+0x336>
 8002b60:	a201      	add	r2, pc, #4	; (adr r2, 8002b68 <UART_SetConfig+0x2d4>)
 8002b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b66:	bf00      	nop
 8002b68:	08002b8d 	.word	0x08002b8d
 8002b6c:	08002bad 	.word	0x08002bad
 8002b70:	08002bb5 	.word	0x08002bb5
 8002b74:	08002bcb 	.word	0x08002bcb
 8002b78:	08002bbb 	.word	0x08002bbb
 8002b7c:	08002bcb 	.word	0x08002bcb
 8002b80:	08002bcb 	.word	0x08002bcb
 8002b84:	08002bcb 	.word	0x08002bcb
 8002b88:	08002bc3 	.word	0x08002bc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b8c:	f7ff f95c 	bl	8001e48 <HAL_RCC_GetPCLK1Freq>
 8002b90:	61f8      	str	r0, [r7, #28]
        break;
 8002b92:	e020      	b.n	8002bd6 <UART_SetConfig+0x342>
 8002b94:	efff69f3 	.word	0xefff69f3
 8002b98:	40008000 	.word	0x40008000
 8002b9c:	40013800 	.word	0x40013800
 8002ba0:	40021000 	.word	0x40021000
 8002ba4:	40004400 	.word	0x40004400
 8002ba8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002bac:	f7ff f962 	bl	8001e74 <HAL_RCC_GetPCLK2Freq>
 8002bb0:	61f8      	str	r0, [r7, #28]
        break;
 8002bb2:	e010      	b.n	8002bd6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002bb4:	4b4c      	ldr	r3, [pc, #304]	; (8002ce8 <UART_SetConfig+0x454>)
 8002bb6:	61fb      	str	r3, [r7, #28]
        break;
 8002bb8:	e00d      	b.n	8002bd6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bba:	f7ff f8ad 	bl	8001d18 <HAL_RCC_GetSysClockFreq>
 8002bbe:	61f8      	str	r0, [r7, #28]
        break;
 8002bc0:	e009      	b.n	8002bd6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bc6:	61fb      	str	r3, [r7, #28]
        break;
 8002bc8:	e005      	b.n	8002bd6 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002bd4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d077      	beq.n	8002ccc <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	005a      	lsls	r2, r3, #1
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	085b      	lsrs	r3, r3, #1
 8002be6:	441a      	add	r2, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	2b0f      	cmp	r3, #15
 8002bf6:	d916      	bls.n	8002c26 <UART_SetConfig+0x392>
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bfe:	d212      	bcs.n	8002c26 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	f023 030f 	bic.w	r3, r3, #15
 8002c08:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	085b      	lsrs	r3, r3, #1
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	f003 0307 	and.w	r3, r3, #7
 8002c14:	b29a      	uxth	r2, r3
 8002c16:	8afb      	ldrh	r3, [r7, #22]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	8afa      	ldrh	r2, [r7, #22]
 8002c22:	60da      	str	r2, [r3, #12]
 8002c24:	e052      	b.n	8002ccc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002c2c:	e04e      	b.n	8002ccc <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002c2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002c32:	2b08      	cmp	r3, #8
 8002c34:	d827      	bhi.n	8002c86 <UART_SetConfig+0x3f2>
 8002c36:	a201      	add	r2, pc, #4	; (adr r2, 8002c3c <UART_SetConfig+0x3a8>)
 8002c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c3c:	08002c61 	.word	0x08002c61
 8002c40:	08002c69 	.word	0x08002c69
 8002c44:	08002c71 	.word	0x08002c71
 8002c48:	08002c87 	.word	0x08002c87
 8002c4c:	08002c77 	.word	0x08002c77
 8002c50:	08002c87 	.word	0x08002c87
 8002c54:	08002c87 	.word	0x08002c87
 8002c58:	08002c87 	.word	0x08002c87
 8002c5c:	08002c7f 	.word	0x08002c7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c60:	f7ff f8f2 	bl	8001e48 <HAL_RCC_GetPCLK1Freq>
 8002c64:	61f8      	str	r0, [r7, #28]
        break;
 8002c66:	e014      	b.n	8002c92 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c68:	f7ff f904 	bl	8001e74 <HAL_RCC_GetPCLK2Freq>
 8002c6c:	61f8      	str	r0, [r7, #28]
        break;
 8002c6e:	e010      	b.n	8002c92 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c70:	4b1d      	ldr	r3, [pc, #116]	; (8002ce8 <UART_SetConfig+0x454>)
 8002c72:	61fb      	str	r3, [r7, #28]
        break;
 8002c74:	e00d      	b.n	8002c92 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c76:	f7ff f84f 	bl	8001d18 <HAL_RCC_GetSysClockFreq>
 8002c7a:	61f8      	str	r0, [r7, #28]
        break;
 8002c7c:	e009      	b.n	8002c92 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c82:	61fb      	str	r3, [r7, #28]
        break;
 8002c84:	e005      	b.n	8002c92 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8002c86:	2300      	movs	r3, #0
 8002c88:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002c90:	bf00      	nop
    }

    if (pclk != 0U)
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d019      	beq.n	8002ccc <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	085a      	lsrs	r2, r3, #1
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	441a      	add	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002caa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	2b0f      	cmp	r3, #15
 8002cb0:	d909      	bls.n	8002cc6 <UART_SetConfig+0x432>
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cb8:	d205      	bcs.n	8002cc6 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	b29a      	uxth	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	60da      	str	r2, [r3, #12]
 8002cc4:	e002      	b.n	8002ccc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002cd8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3728      	adds	r7, #40	; 0x28
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ce6:	bf00      	nop
 8002ce8:	00f42400 	.word	0x00f42400

08002cec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf8:	f003 0308 	and.w	r3, r3, #8
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d00a      	beq.n	8002d16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	430a      	orrs	r2, r1
 8002d14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00a      	beq.n	8002d38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	430a      	orrs	r2, r1
 8002d36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3c:	f003 0302 	and.w	r3, r3, #2
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00a      	beq.n	8002d5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5e:	f003 0304 	and.w	r3, r3, #4
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00a      	beq.n	8002d7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d80:	f003 0310 	and.w	r3, r3, #16
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00a      	beq.n	8002d9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da2:	f003 0320 	and.w	r3, r3, #32
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00a      	beq.n	8002dc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d01a      	beq.n	8002e02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	430a      	orrs	r2, r1
 8002de0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002dea:	d10a      	bne.n	8002e02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00a      	beq.n	8002e24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	430a      	orrs	r2, r1
 8002e22:	605a      	str	r2, [r3, #4]
  }
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b098      	sub	sp, #96	; 0x60
 8002e34:	af02      	add	r7, sp, #8
 8002e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002e40:	f7fd ff6e 	bl	8000d20 <HAL_GetTick>
 8002e44:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0308 	and.w	r3, r3, #8
 8002e50:	2b08      	cmp	r3, #8
 8002e52:	d12e      	bne.n	8002eb2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002e58:	9300      	str	r3, [sp, #0]
 8002e5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 f88c 	bl	8002f80 <UART_WaitOnFlagUntilTimeout>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d021      	beq.n	8002eb2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e76:	e853 3f00 	ldrex	r3, [r3]
 8002e7a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e82:	653b      	str	r3, [r7, #80]	; 0x50
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	461a      	mov	r2, r3
 8002e8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e8c:	647b      	str	r3, [r7, #68]	; 0x44
 8002e8e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e90:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002e92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e94:	e841 2300 	strex	r3, r2, [r1]
 8002e98:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002e9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1e6      	bne.n	8002e6e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2220      	movs	r2, #32
 8002ea4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e062      	b.n	8002f78 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0304 	and.w	r3, r3, #4
 8002ebc:	2b04      	cmp	r3, #4
 8002ebe:	d149      	bne.n	8002f54 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ec0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002ec4:	9300      	str	r3, [sp, #0]
 8002ec6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f000 f856 	bl	8002f80 <UART_WaitOnFlagUntilTimeout>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d03c      	beq.n	8002f54 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee2:	e853 3f00 	ldrex	r3, [r3]
 8002ee6:	623b      	str	r3, [r7, #32]
   return(result);
 8002ee8:	6a3b      	ldr	r3, [r7, #32]
 8002eea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002eee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ef8:	633b      	str	r3, [r7, #48]	; 0x30
 8002efa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002efc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002efe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f00:	e841 2300 	strex	r3, r2, [r1]
 8002f04:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d1e6      	bne.n	8002eda <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	3308      	adds	r3, #8
 8002f12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	e853 3f00 	ldrex	r3, [r3]
 8002f1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f023 0301 	bic.w	r3, r3, #1
 8002f22:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	3308      	adds	r3, #8
 8002f2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f2c:	61fa      	str	r2, [r7, #28]
 8002f2e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f30:	69b9      	ldr	r1, [r7, #24]
 8002f32:	69fa      	ldr	r2, [r7, #28]
 8002f34:	e841 2300 	strex	r3, r2, [r1]
 8002f38:	617b      	str	r3, [r7, #20]
   return(result);
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d1e5      	bne.n	8002f0c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2220      	movs	r2, #32
 8002f44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e011      	b.n	8002f78 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2220      	movs	r2, #32
 8002f58:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2220      	movs	r2, #32
 8002f5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8002f76:	2300      	movs	r3, #0
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3758      	adds	r7, #88	; 0x58
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	603b      	str	r3, [r7, #0]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f90:	e049      	b.n	8003026 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f98:	d045      	beq.n	8003026 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f9a:	f7fd fec1 	bl	8000d20 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d302      	bcc.n	8002fb0 <UART_WaitOnFlagUntilTimeout+0x30>
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d101      	bne.n	8002fb4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e048      	b.n	8003046 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0304 	and.w	r3, r3, #4
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d031      	beq.n	8003026 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	69db      	ldr	r3, [r3, #28]
 8002fc8:	f003 0308 	and.w	r3, r3, #8
 8002fcc:	2b08      	cmp	r3, #8
 8002fce:	d110      	bne.n	8002ff2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2208      	movs	r2, #8
 8002fd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002fd8:	68f8      	ldr	r0, [r7, #12]
 8002fda:	f000 f838 	bl	800304e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2208      	movs	r2, #8
 8002fe2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e029      	b.n	8003046 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	69db      	ldr	r3, [r3, #28]
 8002ff8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ffc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003000:	d111      	bne.n	8003026 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800300a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800300c:	68f8      	ldr	r0, [r7, #12]
 800300e:	f000 f81e 	bl	800304e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2220      	movs	r2, #32
 8003016:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e00f      	b.n	8003046 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	69da      	ldr	r2, [r3, #28]
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	4013      	ands	r3, r2
 8003030:	68ba      	ldr	r2, [r7, #8]
 8003032:	429a      	cmp	r2, r3
 8003034:	bf0c      	ite	eq
 8003036:	2301      	moveq	r3, #1
 8003038:	2300      	movne	r3, #0
 800303a:	b2db      	uxtb	r3, r3
 800303c:	461a      	mov	r2, r3
 800303e:	79fb      	ldrb	r3, [r7, #7]
 8003040:	429a      	cmp	r2, r3
 8003042:	d0a6      	beq.n	8002f92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3710      	adds	r7, #16
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}

0800304e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800304e:	b480      	push	{r7}
 8003050:	b095      	sub	sp, #84	; 0x54
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800305c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800305e:	e853 3f00 	ldrex	r3, [r3]
 8003062:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003066:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800306a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	461a      	mov	r2, r3
 8003072:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003074:	643b      	str	r3, [r7, #64]	; 0x40
 8003076:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003078:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800307a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800307c:	e841 2300 	strex	r3, r2, [r1]
 8003080:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1e6      	bne.n	8003056 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	3308      	adds	r3, #8
 800308e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003090:	6a3b      	ldr	r3, [r7, #32]
 8003092:	e853 3f00 	ldrex	r3, [r3]
 8003096:	61fb      	str	r3, [r7, #28]
   return(result);
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	f023 0301 	bic.w	r3, r3, #1
 800309e:	64bb      	str	r3, [r7, #72]	; 0x48
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	3308      	adds	r3, #8
 80030a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80030aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030b0:	e841 2300 	strex	r3, r2, [r1]
 80030b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80030b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1e5      	bne.n	8003088 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d118      	bne.n	80030f6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	e853 3f00 	ldrex	r3, [r3]
 80030d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	f023 0310 	bic.w	r3, r3, #16
 80030d8:	647b      	str	r3, [r7, #68]	; 0x44
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	461a      	mov	r2, r3
 80030e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030e2:	61bb      	str	r3, [r7, #24]
 80030e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030e6:	6979      	ldr	r1, [r7, #20]
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	e841 2300 	strex	r3, r2, [r1]
 80030ee:	613b      	str	r3, [r7, #16]
   return(result);
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1e6      	bne.n	80030c4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2220      	movs	r2, #32
 80030fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	669a      	str	r2, [r3, #104]	; 0x68
}
 800310a:	bf00      	nop
 800310c:	3754      	adds	r7, #84	; 0x54
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
	...

08003118 <std>:
 8003118:	2300      	movs	r3, #0
 800311a:	b510      	push	{r4, lr}
 800311c:	4604      	mov	r4, r0
 800311e:	e9c0 3300 	strd	r3, r3, [r0]
 8003122:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003126:	6083      	str	r3, [r0, #8]
 8003128:	8181      	strh	r1, [r0, #12]
 800312a:	6643      	str	r3, [r0, #100]	; 0x64
 800312c:	81c2      	strh	r2, [r0, #14]
 800312e:	6183      	str	r3, [r0, #24]
 8003130:	4619      	mov	r1, r3
 8003132:	2208      	movs	r2, #8
 8003134:	305c      	adds	r0, #92	; 0x5c
 8003136:	f000 f9c4 	bl	80034c2 <memset>
 800313a:	4b0d      	ldr	r3, [pc, #52]	; (8003170 <std+0x58>)
 800313c:	6263      	str	r3, [r4, #36]	; 0x24
 800313e:	4b0d      	ldr	r3, [pc, #52]	; (8003174 <std+0x5c>)
 8003140:	62a3      	str	r3, [r4, #40]	; 0x28
 8003142:	4b0d      	ldr	r3, [pc, #52]	; (8003178 <std+0x60>)
 8003144:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003146:	4b0d      	ldr	r3, [pc, #52]	; (800317c <std+0x64>)
 8003148:	6323      	str	r3, [r4, #48]	; 0x30
 800314a:	4b0d      	ldr	r3, [pc, #52]	; (8003180 <std+0x68>)
 800314c:	6224      	str	r4, [r4, #32]
 800314e:	429c      	cmp	r4, r3
 8003150:	d006      	beq.n	8003160 <std+0x48>
 8003152:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003156:	4294      	cmp	r4, r2
 8003158:	d002      	beq.n	8003160 <std+0x48>
 800315a:	33d0      	adds	r3, #208	; 0xd0
 800315c:	429c      	cmp	r4, r3
 800315e:	d105      	bne.n	800316c <std+0x54>
 8003160:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003168:	f000 ba24 	b.w	80035b4 <__retarget_lock_init_recursive>
 800316c:	bd10      	pop	{r4, pc}
 800316e:	bf00      	nop
 8003170:	0800343d 	.word	0x0800343d
 8003174:	0800345f 	.word	0x0800345f
 8003178:	08003497 	.word	0x08003497
 800317c:	080034bb 	.word	0x080034bb
 8003180:	20000118 	.word	0x20000118

08003184 <stdio_exit_handler>:
 8003184:	4a02      	ldr	r2, [pc, #8]	; (8003190 <stdio_exit_handler+0xc>)
 8003186:	4903      	ldr	r1, [pc, #12]	; (8003194 <stdio_exit_handler+0x10>)
 8003188:	4803      	ldr	r0, [pc, #12]	; (8003198 <stdio_exit_handler+0x14>)
 800318a:	f000 b869 	b.w	8003260 <_fwalk_sglue>
 800318e:	bf00      	nop
 8003190:	2000000c 	.word	0x2000000c
 8003194:	08003e71 	.word	0x08003e71
 8003198:	20000018 	.word	0x20000018

0800319c <cleanup_stdio>:
 800319c:	6841      	ldr	r1, [r0, #4]
 800319e:	4b0c      	ldr	r3, [pc, #48]	; (80031d0 <cleanup_stdio+0x34>)
 80031a0:	4299      	cmp	r1, r3
 80031a2:	b510      	push	{r4, lr}
 80031a4:	4604      	mov	r4, r0
 80031a6:	d001      	beq.n	80031ac <cleanup_stdio+0x10>
 80031a8:	f000 fe62 	bl	8003e70 <_fflush_r>
 80031ac:	68a1      	ldr	r1, [r4, #8]
 80031ae:	4b09      	ldr	r3, [pc, #36]	; (80031d4 <cleanup_stdio+0x38>)
 80031b0:	4299      	cmp	r1, r3
 80031b2:	d002      	beq.n	80031ba <cleanup_stdio+0x1e>
 80031b4:	4620      	mov	r0, r4
 80031b6:	f000 fe5b 	bl	8003e70 <_fflush_r>
 80031ba:	68e1      	ldr	r1, [r4, #12]
 80031bc:	4b06      	ldr	r3, [pc, #24]	; (80031d8 <cleanup_stdio+0x3c>)
 80031be:	4299      	cmp	r1, r3
 80031c0:	d004      	beq.n	80031cc <cleanup_stdio+0x30>
 80031c2:	4620      	mov	r0, r4
 80031c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031c8:	f000 be52 	b.w	8003e70 <_fflush_r>
 80031cc:	bd10      	pop	{r4, pc}
 80031ce:	bf00      	nop
 80031d0:	20000118 	.word	0x20000118
 80031d4:	20000180 	.word	0x20000180
 80031d8:	200001e8 	.word	0x200001e8

080031dc <global_stdio_init.part.0>:
 80031dc:	b510      	push	{r4, lr}
 80031de:	4b0b      	ldr	r3, [pc, #44]	; (800320c <global_stdio_init.part.0+0x30>)
 80031e0:	4c0b      	ldr	r4, [pc, #44]	; (8003210 <global_stdio_init.part.0+0x34>)
 80031e2:	4a0c      	ldr	r2, [pc, #48]	; (8003214 <global_stdio_init.part.0+0x38>)
 80031e4:	601a      	str	r2, [r3, #0]
 80031e6:	4620      	mov	r0, r4
 80031e8:	2200      	movs	r2, #0
 80031ea:	2104      	movs	r1, #4
 80031ec:	f7ff ff94 	bl	8003118 <std>
 80031f0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80031f4:	2201      	movs	r2, #1
 80031f6:	2109      	movs	r1, #9
 80031f8:	f7ff ff8e 	bl	8003118 <std>
 80031fc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003200:	2202      	movs	r2, #2
 8003202:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003206:	2112      	movs	r1, #18
 8003208:	f7ff bf86 	b.w	8003118 <std>
 800320c:	20000250 	.word	0x20000250
 8003210:	20000118 	.word	0x20000118
 8003214:	08003185 	.word	0x08003185

08003218 <__sfp_lock_acquire>:
 8003218:	4801      	ldr	r0, [pc, #4]	; (8003220 <__sfp_lock_acquire+0x8>)
 800321a:	f000 b9cc 	b.w	80035b6 <__retarget_lock_acquire_recursive>
 800321e:	bf00      	nop
 8003220:	20000259 	.word	0x20000259

08003224 <__sfp_lock_release>:
 8003224:	4801      	ldr	r0, [pc, #4]	; (800322c <__sfp_lock_release+0x8>)
 8003226:	f000 b9c7 	b.w	80035b8 <__retarget_lock_release_recursive>
 800322a:	bf00      	nop
 800322c:	20000259 	.word	0x20000259

08003230 <__sinit>:
 8003230:	b510      	push	{r4, lr}
 8003232:	4604      	mov	r4, r0
 8003234:	f7ff fff0 	bl	8003218 <__sfp_lock_acquire>
 8003238:	6a23      	ldr	r3, [r4, #32]
 800323a:	b11b      	cbz	r3, 8003244 <__sinit+0x14>
 800323c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003240:	f7ff bff0 	b.w	8003224 <__sfp_lock_release>
 8003244:	4b04      	ldr	r3, [pc, #16]	; (8003258 <__sinit+0x28>)
 8003246:	6223      	str	r3, [r4, #32]
 8003248:	4b04      	ldr	r3, [pc, #16]	; (800325c <__sinit+0x2c>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1f5      	bne.n	800323c <__sinit+0xc>
 8003250:	f7ff ffc4 	bl	80031dc <global_stdio_init.part.0>
 8003254:	e7f2      	b.n	800323c <__sinit+0xc>
 8003256:	bf00      	nop
 8003258:	0800319d 	.word	0x0800319d
 800325c:	20000250 	.word	0x20000250

08003260 <_fwalk_sglue>:
 8003260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003264:	4607      	mov	r7, r0
 8003266:	4688      	mov	r8, r1
 8003268:	4614      	mov	r4, r2
 800326a:	2600      	movs	r6, #0
 800326c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003270:	f1b9 0901 	subs.w	r9, r9, #1
 8003274:	d505      	bpl.n	8003282 <_fwalk_sglue+0x22>
 8003276:	6824      	ldr	r4, [r4, #0]
 8003278:	2c00      	cmp	r4, #0
 800327a:	d1f7      	bne.n	800326c <_fwalk_sglue+0xc>
 800327c:	4630      	mov	r0, r6
 800327e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003282:	89ab      	ldrh	r3, [r5, #12]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d907      	bls.n	8003298 <_fwalk_sglue+0x38>
 8003288:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800328c:	3301      	adds	r3, #1
 800328e:	d003      	beq.n	8003298 <_fwalk_sglue+0x38>
 8003290:	4629      	mov	r1, r5
 8003292:	4638      	mov	r0, r7
 8003294:	47c0      	blx	r8
 8003296:	4306      	orrs	r6, r0
 8003298:	3568      	adds	r5, #104	; 0x68
 800329a:	e7e9      	b.n	8003270 <_fwalk_sglue+0x10>

0800329c <getchar>:
 800329c:	4b02      	ldr	r3, [pc, #8]	; (80032a8 <getchar+0xc>)
 800329e:	6818      	ldr	r0, [r3, #0]
 80032a0:	6841      	ldr	r1, [r0, #4]
 80032a2:	f000 be0d 	b.w	8003ec0 <_getc_r>
 80032a6:	bf00      	nop
 80032a8:	20000064 	.word	0x20000064

080032ac <iprintf>:
 80032ac:	b40f      	push	{r0, r1, r2, r3}
 80032ae:	b507      	push	{r0, r1, r2, lr}
 80032b0:	4906      	ldr	r1, [pc, #24]	; (80032cc <iprintf+0x20>)
 80032b2:	ab04      	add	r3, sp, #16
 80032b4:	6808      	ldr	r0, [r1, #0]
 80032b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80032ba:	6881      	ldr	r1, [r0, #8]
 80032bc:	9301      	str	r3, [sp, #4]
 80032be:	f000 faa7 	bl	8003810 <_vfiprintf_r>
 80032c2:	b003      	add	sp, #12
 80032c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80032c8:	b004      	add	sp, #16
 80032ca:	4770      	bx	lr
 80032cc:	20000064 	.word	0x20000064

080032d0 <putchar>:
 80032d0:	4b02      	ldr	r3, [pc, #8]	; (80032dc <putchar+0xc>)
 80032d2:	4601      	mov	r1, r0
 80032d4:	6818      	ldr	r0, [r3, #0]
 80032d6:	6882      	ldr	r2, [r0, #8]
 80032d8:	f000 be7f 	b.w	8003fda <_putc_r>
 80032dc:	20000064 	.word	0x20000064

080032e0 <setvbuf>:
 80032e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80032e4:	461d      	mov	r5, r3
 80032e6:	4b54      	ldr	r3, [pc, #336]	; (8003438 <setvbuf+0x158>)
 80032e8:	681f      	ldr	r7, [r3, #0]
 80032ea:	4604      	mov	r4, r0
 80032ec:	460e      	mov	r6, r1
 80032ee:	4690      	mov	r8, r2
 80032f0:	b127      	cbz	r7, 80032fc <setvbuf+0x1c>
 80032f2:	6a3b      	ldr	r3, [r7, #32]
 80032f4:	b913      	cbnz	r3, 80032fc <setvbuf+0x1c>
 80032f6:	4638      	mov	r0, r7
 80032f8:	f7ff ff9a 	bl	8003230 <__sinit>
 80032fc:	f1b8 0f02 	cmp.w	r8, #2
 8003300:	d006      	beq.n	8003310 <setvbuf+0x30>
 8003302:	f1b8 0f01 	cmp.w	r8, #1
 8003306:	f200 8094 	bhi.w	8003432 <setvbuf+0x152>
 800330a:	2d00      	cmp	r5, #0
 800330c:	f2c0 8091 	blt.w	8003432 <setvbuf+0x152>
 8003310:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003312:	07da      	lsls	r2, r3, #31
 8003314:	d405      	bmi.n	8003322 <setvbuf+0x42>
 8003316:	89a3      	ldrh	r3, [r4, #12]
 8003318:	059b      	lsls	r3, r3, #22
 800331a:	d402      	bmi.n	8003322 <setvbuf+0x42>
 800331c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800331e:	f000 f94a 	bl	80035b6 <__retarget_lock_acquire_recursive>
 8003322:	4621      	mov	r1, r4
 8003324:	4638      	mov	r0, r7
 8003326:	f000 fda3 	bl	8003e70 <_fflush_r>
 800332a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800332c:	b141      	cbz	r1, 8003340 <setvbuf+0x60>
 800332e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003332:	4299      	cmp	r1, r3
 8003334:	d002      	beq.n	800333c <setvbuf+0x5c>
 8003336:	4638      	mov	r0, r7
 8003338:	f000 f940 	bl	80035bc <_free_r>
 800333c:	2300      	movs	r3, #0
 800333e:	6363      	str	r3, [r4, #52]	; 0x34
 8003340:	2300      	movs	r3, #0
 8003342:	61a3      	str	r3, [r4, #24]
 8003344:	6063      	str	r3, [r4, #4]
 8003346:	89a3      	ldrh	r3, [r4, #12]
 8003348:	0618      	lsls	r0, r3, #24
 800334a:	d503      	bpl.n	8003354 <setvbuf+0x74>
 800334c:	6921      	ldr	r1, [r4, #16]
 800334e:	4638      	mov	r0, r7
 8003350:	f000 f934 	bl	80035bc <_free_r>
 8003354:	89a3      	ldrh	r3, [r4, #12]
 8003356:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800335a:	f023 0303 	bic.w	r3, r3, #3
 800335e:	f1b8 0f02 	cmp.w	r8, #2
 8003362:	81a3      	strh	r3, [r4, #12]
 8003364:	d05f      	beq.n	8003426 <setvbuf+0x146>
 8003366:	ab01      	add	r3, sp, #4
 8003368:	466a      	mov	r2, sp
 800336a:	4621      	mov	r1, r4
 800336c:	4638      	mov	r0, r7
 800336e:	f000 fdd2 	bl	8003f16 <__swhatbuf_r>
 8003372:	89a3      	ldrh	r3, [r4, #12]
 8003374:	4318      	orrs	r0, r3
 8003376:	81a0      	strh	r0, [r4, #12]
 8003378:	bb2d      	cbnz	r5, 80033c6 <setvbuf+0xe6>
 800337a:	9d00      	ldr	r5, [sp, #0]
 800337c:	4628      	mov	r0, r5
 800337e:	f000 f969 	bl	8003654 <malloc>
 8003382:	4606      	mov	r6, r0
 8003384:	2800      	cmp	r0, #0
 8003386:	d150      	bne.n	800342a <setvbuf+0x14a>
 8003388:	f8dd 9000 	ldr.w	r9, [sp]
 800338c:	45a9      	cmp	r9, r5
 800338e:	d13e      	bne.n	800340e <setvbuf+0x12e>
 8003390:	f04f 35ff 	mov.w	r5, #4294967295
 8003394:	2200      	movs	r2, #0
 8003396:	60a2      	str	r2, [r4, #8]
 8003398:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800339c:	6022      	str	r2, [r4, #0]
 800339e:	6122      	str	r2, [r4, #16]
 80033a0:	2201      	movs	r2, #1
 80033a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80033a6:	6162      	str	r2, [r4, #20]
 80033a8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80033aa:	f043 0302 	orr.w	r3, r3, #2
 80033ae:	07d1      	lsls	r1, r2, #31
 80033b0:	81a3      	strh	r3, [r4, #12]
 80033b2:	d404      	bmi.n	80033be <setvbuf+0xde>
 80033b4:	059b      	lsls	r3, r3, #22
 80033b6:	d402      	bmi.n	80033be <setvbuf+0xde>
 80033b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80033ba:	f000 f8fd 	bl	80035b8 <__retarget_lock_release_recursive>
 80033be:	4628      	mov	r0, r5
 80033c0:	b003      	add	sp, #12
 80033c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80033c6:	2e00      	cmp	r6, #0
 80033c8:	d0d8      	beq.n	800337c <setvbuf+0x9c>
 80033ca:	6a3b      	ldr	r3, [r7, #32]
 80033cc:	b913      	cbnz	r3, 80033d4 <setvbuf+0xf4>
 80033ce:	4638      	mov	r0, r7
 80033d0:	f7ff ff2e 	bl	8003230 <__sinit>
 80033d4:	f1b8 0f01 	cmp.w	r8, #1
 80033d8:	bf08      	it	eq
 80033da:	89a3      	ldrheq	r3, [r4, #12]
 80033dc:	6026      	str	r6, [r4, #0]
 80033de:	bf04      	itt	eq
 80033e0:	f043 0301 	orreq.w	r3, r3, #1
 80033e4:	81a3      	strheq	r3, [r4, #12]
 80033e6:	89a3      	ldrh	r3, [r4, #12]
 80033e8:	f013 0208 	ands.w	r2, r3, #8
 80033ec:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80033f0:	d01d      	beq.n	800342e <setvbuf+0x14e>
 80033f2:	07da      	lsls	r2, r3, #31
 80033f4:	bf41      	itttt	mi
 80033f6:	2200      	movmi	r2, #0
 80033f8:	426d      	negmi	r5, r5
 80033fa:	60a2      	strmi	r2, [r4, #8]
 80033fc:	61a5      	strmi	r5, [r4, #24]
 80033fe:	bf58      	it	pl
 8003400:	60a5      	strpl	r5, [r4, #8]
 8003402:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8003404:	f015 0501 	ands.w	r5, r5, #1
 8003408:	d0d4      	beq.n	80033b4 <setvbuf+0xd4>
 800340a:	2500      	movs	r5, #0
 800340c:	e7d7      	b.n	80033be <setvbuf+0xde>
 800340e:	4648      	mov	r0, r9
 8003410:	f000 f920 	bl	8003654 <malloc>
 8003414:	4606      	mov	r6, r0
 8003416:	2800      	cmp	r0, #0
 8003418:	d0ba      	beq.n	8003390 <setvbuf+0xb0>
 800341a:	89a3      	ldrh	r3, [r4, #12]
 800341c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003420:	81a3      	strh	r3, [r4, #12]
 8003422:	464d      	mov	r5, r9
 8003424:	e7d1      	b.n	80033ca <setvbuf+0xea>
 8003426:	2500      	movs	r5, #0
 8003428:	e7b4      	b.n	8003394 <setvbuf+0xb4>
 800342a:	46a9      	mov	r9, r5
 800342c:	e7f5      	b.n	800341a <setvbuf+0x13a>
 800342e:	60a2      	str	r2, [r4, #8]
 8003430:	e7e7      	b.n	8003402 <setvbuf+0x122>
 8003432:	f04f 35ff 	mov.w	r5, #4294967295
 8003436:	e7c2      	b.n	80033be <setvbuf+0xde>
 8003438:	20000064 	.word	0x20000064

0800343c <__sread>:
 800343c:	b510      	push	{r4, lr}
 800343e:	460c      	mov	r4, r1
 8003440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003444:	f000 f868 	bl	8003518 <_read_r>
 8003448:	2800      	cmp	r0, #0
 800344a:	bfab      	itete	ge
 800344c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800344e:	89a3      	ldrhlt	r3, [r4, #12]
 8003450:	181b      	addge	r3, r3, r0
 8003452:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003456:	bfac      	ite	ge
 8003458:	6563      	strge	r3, [r4, #84]	; 0x54
 800345a:	81a3      	strhlt	r3, [r4, #12]
 800345c:	bd10      	pop	{r4, pc}

0800345e <__swrite>:
 800345e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003462:	461f      	mov	r7, r3
 8003464:	898b      	ldrh	r3, [r1, #12]
 8003466:	05db      	lsls	r3, r3, #23
 8003468:	4605      	mov	r5, r0
 800346a:	460c      	mov	r4, r1
 800346c:	4616      	mov	r6, r2
 800346e:	d505      	bpl.n	800347c <__swrite+0x1e>
 8003470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003474:	2302      	movs	r3, #2
 8003476:	2200      	movs	r2, #0
 8003478:	f000 f83c 	bl	80034f4 <_lseek_r>
 800347c:	89a3      	ldrh	r3, [r4, #12]
 800347e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003482:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003486:	81a3      	strh	r3, [r4, #12]
 8003488:	4632      	mov	r2, r6
 800348a:	463b      	mov	r3, r7
 800348c:	4628      	mov	r0, r5
 800348e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003492:	f000 b853 	b.w	800353c <_write_r>

08003496 <__sseek>:
 8003496:	b510      	push	{r4, lr}
 8003498:	460c      	mov	r4, r1
 800349a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800349e:	f000 f829 	bl	80034f4 <_lseek_r>
 80034a2:	1c43      	adds	r3, r0, #1
 80034a4:	89a3      	ldrh	r3, [r4, #12]
 80034a6:	bf15      	itete	ne
 80034a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80034aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80034ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80034b2:	81a3      	strheq	r3, [r4, #12]
 80034b4:	bf18      	it	ne
 80034b6:	81a3      	strhne	r3, [r4, #12]
 80034b8:	bd10      	pop	{r4, pc}

080034ba <__sclose>:
 80034ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034be:	f000 b809 	b.w	80034d4 <_close_r>

080034c2 <memset>:
 80034c2:	4402      	add	r2, r0
 80034c4:	4603      	mov	r3, r0
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d100      	bne.n	80034cc <memset+0xa>
 80034ca:	4770      	bx	lr
 80034cc:	f803 1b01 	strb.w	r1, [r3], #1
 80034d0:	e7f9      	b.n	80034c6 <memset+0x4>
	...

080034d4 <_close_r>:
 80034d4:	b538      	push	{r3, r4, r5, lr}
 80034d6:	4d06      	ldr	r5, [pc, #24]	; (80034f0 <_close_r+0x1c>)
 80034d8:	2300      	movs	r3, #0
 80034da:	4604      	mov	r4, r0
 80034dc:	4608      	mov	r0, r1
 80034de:	602b      	str	r3, [r5, #0]
 80034e0:	f7fd fa20 	bl	8000924 <_close>
 80034e4:	1c43      	adds	r3, r0, #1
 80034e6:	d102      	bne.n	80034ee <_close_r+0x1a>
 80034e8:	682b      	ldr	r3, [r5, #0]
 80034ea:	b103      	cbz	r3, 80034ee <_close_r+0x1a>
 80034ec:	6023      	str	r3, [r4, #0]
 80034ee:	bd38      	pop	{r3, r4, r5, pc}
 80034f0:	20000254 	.word	0x20000254

080034f4 <_lseek_r>:
 80034f4:	b538      	push	{r3, r4, r5, lr}
 80034f6:	4d07      	ldr	r5, [pc, #28]	; (8003514 <_lseek_r+0x20>)
 80034f8:	4604      	mov	r4, r0
 80034fa:	4608      	mov	r0, r1
 80034fc:	4611      	mov	r1, r2
 80034fe:	2200      	movs	r2, #0
 8003500:	602a      	str	r2, [r5, #0]
 8003502:	461a      	mov	r2, r3
 8003504:	f7fd fa25 	bl	8000952 <_lseek>
 8003508:	1c43      	adds	r3, r0, #1
 800350a:	d102      	bne.n	8003512 <_lseek_r+0x1e>
 800350c:	682b      	ldr	r3, [r5, #0]
 800350e:	b103      	cbz	r3, 8003512 <_lseek_r+0x1e>
 8003510:	6023      	str	r3, [r4, #0]
 8003512:	bd38      	pop	{r3, r4, r5, pc}
 8003514:	20000254 	.word	0x20000254

08003518 <_read_r>:
 8003518:	b538      	push	{r3, r4, r5, lr}
 800351a:	4d07      	ldr	r5, [pc, #28]	; (8003538 <_read_r+0x20>)
 800351c:	4604      	mov	r4, r0
 800351e:	4608      	mov	r0, r1
 8003520:	4611      	mov	r1, r2
 8003522:	2200      	movs	r2, #0
 8003524:	602a      	str	r2, [r5, #0]
 8003526:	461a      	mov	r2, r3
 8003528:	f7fd fa24 	bl	8000974 <_read>
 800352c:	1c43      	adds	r3, r0, #1
 800352e:	d102      	bne.n	8003536 <_read_r+0x1e>
 8003530:	682b      	ldr	r3, [r5, #0]
 8003532:	b103      	cbz	r3, 8003536 <_read_r+0x1e>
 8003534:	6023      	str	r3, [r4, #0]
 8003536:	bd38      	pop	{r3, r4, r5, pc}
 8003538:	20000254 	.word	0x20000254

0800353c <_write_r>:
 800353c:	b538      	push	{r3, r4, r5, lr}
 800353e:	4d07      	ldr	r5, [pc, #28]	; (800355c <_write_r+0x20>)
 8003540:	4604      	mov	r4, r0
 8003542:	4608      	mov	r0, r1
 8003544:	4611      	mov	r1, r2
 8003546:	2200      	movs	r2, #0
 8003548:	602a      	str	r2, [r5, #0]
 800354a:	461a      	mov	r2, r3
 800354c:	f7fd f9be 	bl	80008cc <_write>
 8003550:	1c43      	adds	r3, r0, #1
 8003552:	d102      	bne.n	800355a <_write_r+0x1e>
 8003554:	682b      	ldr	r3, [r5, #0]
 8003556:	b103      	cbz	r3, 800355a <_write_r+0x1e>
 8003558:	6023      	str	r3, [r4, #0]
 800355a:	bd38      	pop	{r3, r4, r5, pc}
 800355c:	20000254 	.word	0x20000254

08003560 <__errno>:
 8003560:	4b01      	ldr	r3, [pc, #4]	; (8003568 <__errno+0x8>)
 8003562:	6818      	ldr	r0, [r3, #0]
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	20000064 	.word	0x20000064

0800356c <__libc_init_array>:
 800356c:	b570      	push	{r4, r5, r6, lr}
 800356e:	4d0d      	ldr	r5, [pc, #52]	; (80035a4 <__libc_init_array+0x38>)
 8003570:	4c0d      	ldr	r4, [pc, #52]	; (80035a8 <__libc_init_array+0x3c>)
 8003572:	1b64      	subs	r4, r4, r5
 8003574:	10a4      	asrs	r4, r4, #2
 8003576:	2600      	movs	r6, #0
 8003578:	42a6      	cmp	r6, r4
 800357a:	d109      	bne.n	8003590 <__libc_init_array+0x24>
 800357c:	4d0b      	ldr	r5, [pc, #44]	; (80035ac <__libc_init_array+0x40>)
 800357e:	4c0c      	ldr	r4, [pc, #48]	; (80035b0 <__libc_init_array+0x44>)
 8003580:	f000 fec4 	bl	800430c <_init>
 8003584:	1b64      	subs	r4, r4, r5
 8003586:	10a4      	asrs	r4, r4, #2
 8003588:	2600      	movs	r6, #0
 800358a:	42a6      	cmp	r6, r4
 800358c:	d105      	bne.n	800359a <__libc_init_array+0x2e>
 800358e:	bd70      	pop	{r4, r5, r6, pc}
 8003590:	f855 3b04 	ldr.w	r3, [r5], #4
 8003594:	4798      	blx	r3
 8003596:	3601      	adds	r6, #1
 8003598:	e7ee      	b.n	8003578 <__libc_init_array+0xc>
 800359a:	f855 3b04 	ldr.w	r3, [r5], #4
 800359e:	4798      	blx	r3
 80035a0:	3601      	adds	r6, #1
 80035a2:	e7f2      	b.n	800358a <__libc_init_array+0x1e>
 80035a4:	080043fc 	.word	0x080043fc
 80035a8:	080043fc 	.word	0x080043fc
 80035ac:	080043fc 	.word	0x080043fc
 80035b0:	08004400 	.word	0x08004400

080035b4 <__retarget_lock_init_recursive>:
 80035b4:	4770      	bx	lr

080035b6 <__retarget_lock_acquire_recursive>:
 80035b6:	4770      	bx	lr

080035b8 <__retarget_lock_release_recursive>:
 80035b8:	4770      	bx	lr
	...

080035bc <_free_r>:
 80035bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80035be:	2900      	cmp	r1, #0
 80035c0:	d044      	beq.n	800364c <_free_r+0x90>
 80035c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80035c6:	9001      	str	r0, [sp, #4]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	f1a1 0404 	sub.w	r4, r1, #4
 80035ce:	bfb8      	it	lt
 80035d0:	18e4      	addlt	r4, r4, r3
 80035d2:	f000 f8e7 	bl	80037a4 <__malloc_lock>
 80035d6:	4a1e      	ldr	r2, [pc, #120]	; (8003650 <_free_r+0x94>)
 80035d8:	9801      	ldr	r0, [sp, #4]
 80035da:	6813      	ldr	r3, [r2, #0]
 80035dc:	b933      	cbnz	r3, 80035ec <_free_r+0x30>
 80035de:	6063      	str	r3, [r4, #4]
 80035e0:	6014      	str	r4, [r2, #0]
 80035e2:	b003      	add	sp, #12
 80035e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80035e8:	f000 b8e2 	b.w	80037b0 <__malloc_unlock>
 80035ec:	42a3      	cmp	r3, r4
 80035ee:	d908      	bls.n	8003602 <_free_r+0x46>
 80035f0:	6825      	ldr	r5, [r4, #0]
 80035f2:	1961      	adds	r1, r4, r5
 80035f4:	428b      	cmp	r3, r1
 80035f6:	bf01      	itttt	eq
 80035f8:	6819      	ldreq	r1, [r3, #0]
 80035fa:	685b      	ldreq	r3, [r3, #4]
 80035fc:	1949      	addeq	r1, r1, r5
 80035fe:	6021      	streq	r1, [r4, #0]
 8003600:	e7ed      	b.n	80035de <_free_r+0x22>
 8003602:	461a      	mov	r2, r3
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	b10b      	cbz	r3, 800360c <_free_r+0x50>
 8003608:	42a3      	cmp	r3, r4
 800360a:	d9fa      	bls.n	8003602 <_free_r+0x46>
 800360c:	6811      	ldr	r1, [r2, #0]
 800360e:	1855      	adds	r5, r2, r1
 8003610:	42a5      	cmp	r5, r4
 8003612:	d10b      	bne.n	800362c <_free_r+0x70>
 8003614:	6824      	ldr	r4, [r4, #0]
 8003616:	4421      	add	r1, r4
 8003618:	1854      	adds	r4, r2, r1
 800361a:	42a3      	cmp	r3, r4
 800361c:	6011      	str	r1, [r2, #0]
 800361e:	d1e0      	bne.n	80035e2 <_free_r+0x26>
 8003620:	681c      	ldr	r4, [r3, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	6053      	str	r3, [r2, #4]
 8003626:	440c      	add	r4, r1
 8003628:	6014      	str	r4, [r2, #0]
 800362a:	e7da      	b.n	80035e2 <_free_r+0x26>
 800362c:	d902      	bls.n	8003634 <_free_r+0x78>
 800362e:	230c      	movs	r3, #12
 8003630:	6003      	str	r3, [r0, #0]
 8003632:	e7d6      	b.n	80035e2 <_free_r+0x26>
 8003634:	6825      	ldr	r5, [r4, #0]
 8003636:	1961      	adds	r1, r4, r5
 8003638:	428b      	cmp	r3, r1
 800363a:	bf04      	itt	eq
 800363c:	6819      	ldreq	r1, [r3, #0]
 800363e:	685b      	ldreq	r3, [r3, #4]
 8003640:	6063      	str	r3, [r4, #4]
 8003642:	bf04      	itt	eq
 8003644:	1949      	addeq	r1, r1, r5
 8003646:	6021      	streq	r1, [r4, #0]
 8003648:	6054      	str	r4, [r2, #4]
 800364a:	e7ca      	b.n	80035e2 <_free_r+0x26>
 800364c:	b003      	add	sp, #12
 800364e:	bd30      	pop	{r4, r5, pc}
 8003650:	2000025c 	.word	0x2000025c

08003654 <malloc>:
 8003654:	4b02      	ldr	r3, [pc, #8]	; (8003660 <malloc+0xc>)
 8003656:	4601      	mov	r1, r0
 8003658:	6818      	ldr	r0, [r3, #0]
 800365a:	f000 b823 	b.w	80036a4 <_malloc_r>
 800365e:	bf00      	nop
 8003660:	20000064 	.word	0x20000064

08003664 <sbrk_aligned>:
 8003664:	b570      	push	{r4, r5, r6, lr}
 8003666:	4e0e      	ldr	r6, [pc, #56]	; (80036a0 <sbrk_aligned+0x3c>)
 8003668:	460c      	mov	r4, r1
 800366a:	6831      	ldr	r1, [r6, #0]
 800366c:	4605      	mov	r5, r0
 800366e:	b911      	cbnz	r1, 8003676 <sbrk_aligned+0x12>
 8003670:	f000 fdb6 	bl	80041e0 <_sbrk_r>
 8003674:	6030      	str	r0, [r6, #0]
 8003676:	4621      	mov	r1, r4
 8003678:	4628      	mov	r0, r5
 800367a:	f000 fdb1 	bl	80041e0 <_sbrk_r>
 800367e:	1c43      	adds	r3, r0, #1
 8003680:	d00a      	beq.n	8003698 <sbrk_aligned+0x34>
 8003682:	1cc4      	adds	r4, r0, #3
 8003684:	f024 0403 	bic.w	r4, r4, #3
 8003688:	42a0      	cmp	r0, r4
 800368a:	d007      	beq.n	800369c <sbrk_aligned+0x38>
 800368c:	1a21      	subs	r1, r4, r0
 800368e:	4628      	mov	r0, r5
 8003690:	f000 fda6 	bl	80041e0 <_sbrk_r>
 8003694:	3001      	adds	r0, #1
 8003696:	d101      	bne.n	800369c <sbrk_aligned+0x38>
 8003698:	f04f 34ff 	mov.w	r4, #4294967295
 800369c:	4620      	mov	r0, r4
 800369e:	bd70      	pop	{r4, r5, r6, pc}
 80036a0:	20000260 	.word	0x20000260

080036a4 <_malloc_r>:
 80036a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036a8:	1ccd      	adds	r5, r1, #3
 80036aa:	f025 0503 	bic.w	r5, r5, #3
 80036ae:	3508      	adds	r5, #8
 80036b0:	2d0c      	cmp	r5, #12
 80036b2:	bf38      	it	cc
 80036b4:	250c      	movcc	r5, #12
 80036b6:	2d00      	cmp	r5, #0
 80036b8:	4607      	mov	r7, r0
 80036ba:	db01      	blt.n	80036c0 <_malloc_r+0x1c>
 80036bc:	42a9      	cmp	r1, r5
 80036be:	d905      	bls.n	80036cc <_malloc_r+0x28>
 80036c0:	230c      	movs	r3, #12
 80036c2:	603b      	str	r3, [r7, #0]
 80036c4:	2600      	movs	r6, #0
 80036c6:	4630      	mov	r0, r6
 80036c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036cc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80037a0 <_malloc_r+0xfc>
 80036d0:	f000 f868 	bl	80037a4 <__malloc_lock>
 80036d4:	f8d8 3000 	ldr.w	r3, [r8]
 80036d8:	461c      	mov	r4, r3
 80036da:	bb5c      	cbnz	r4, 8003734 <_malloc_r+0x90>
 80036dc:	4629      	mov	r1, r5
 80036de:	4638      	mov	r0, r7
 80036e0:	f7ff ffc0 	bl	8003664 <sbrk_aligned>
 80036e4:	1c43      	adds	r3, r0, #1
 80036e6:	4604      	mov	r4, r0
 80036e8:	d155      	bne.n	8003796 <_malloc_r+0xf2>
 80036ea:	f8d8 4000 	ldr.w	r4, [r8]
 80036ee:	4626      	mov	r6, r4
 80036f0:	2e00      	cmp	r6, #0
 80036f2:	d145      	bne.n	8003780 <_malloc_r+0xdc>
 80036f4:	2c00      	cmp	r4, #0
 80036f6:	d048      	beq.n	800378a <_malloc_r+0xe6>
 80036f8:	6823      	ldr	r3, [r4, #0]
 80036fa:	4631      	mov	r1, r6
 80036fc:	4638      	mov	r0, r7
 80036fe:	eb04 0903 	add.w	r9, r4, r3
 8003702:	f000 fd6d 	bl	80041e0 <_sbrk_r>
 8003706:	4581      	cmp	r9, r0
 8003708:	d13f      	bne.n	800378a <_malloc_r+0xe6>
 800370a:	6821      	ldr	r1, [r4, #0]
 800370c:	1a6d      	subs	r5, r5, r1
 800370e:	4629      	mov	r1, r5
 8003710:	4638      	mov	r0, r7
 8003712:	f7ff ffa7 	bl	8003664 <sbrk_aligned>
 8003716:	3001      	adds	r0, #1
 8003718:	d037      	beq.n	800378a <_malloc_r+0xe6>
 800371a:	6823      	ldr	r3, [r4, #0]
 800371c:	442b      	add	r3, r5
 800371e:	6023      	str	r3, [r4, #0]
 8003720:	f8d8 3000 	ldr.w	r3, [r8]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d038      	beq.n	800379a <_malloc_r+0xf6>
 8003728:	685a      	ldr	r2, [r3, #4]
 800372a:	42a2      	cmp	r2, r4
 800372c:	d12b      	bne.n	8003786 <_malloc_r+0xe2>
 800372e:	2200      	movs	r2, #0
 8003730:	605a      	str	r2, [r3, #4]
 8003732:	e00f      	b.n	8003754 <_malloc_r+0xb0>
 8003734:	6822      	ldr	r2, [r4, #0]
 8003736:	1b52      	subs	r2, r2, r5
 8003738:	d41f      	bmi.n	800377a <_malloc_r+0xd6>
 800373a:	2a0b      	cmp	r2, #11
 800373c:	d917      	bls.n	800376e <_malloc_r+0xca>
 800373e:	1961      	adds	r1, r4, r5
 8003740:	42a3      	cmp	r3, r4
 8003742:	6025      	str	r5, [r4, #0]
 8003744:	bf18      	it	ne
 8003746:	6059      	strne	r1, [r3, #4]
 8003748:	6863      	ldr	r3, [r4, #4]
 800374a:	bf08      	it	eq
 800374c:	f8c8 1000 	streq.w	r1, [r8]
 8003750:	5162      	str	r2, [r4, r5]
 8003752:	604b      	str	r3, [r1, #4]
 8003754:	4638      	mov	r0, r7
 8003756:	f104 060b 	add.w	r6, r4, #11
 800375a:	f000 f829 	bl	80037b0 <__malloc_unlock>
 800375e:	f026 0607 	bic.w	r6, r6, #7
 8003762:	1d23      	adds	r3, r4, #4
 8003764:	1af2      	subs	r2, r6, r3
 8003766:	d0ae      	beq.n	80036c6 <_malloc_r+0x22>
 8003768:	1b9b      	subs	r3, r3, r6
 800376a:	50a3      	str	r3, [r4, r2]
 800376c:	e7ab      	b.n	80036c6 <_malloc_r+0x22>
 800376e:	42a3      	cmp	r3, r4
 8003770:	6862      	ldr	r2, [r4, #4]
 8003772:	d1dd      	bne.n	8003730 <_malloc_r+0x8c>
 8003774:	f8c8 2000 	str.w	r2, [r8]
 8003778:	e7ec      	b.n	8003754 <_malloc_r+0xb0>
 800377a:	4623      	mov	r3, r4
 800377c:	6864      	ldr	r4, [r4, #4]
 800377e:	e7ac      	b.n	80036da <_malloc_r+0x36>
 8003780:	4634      	mov	r4, r6
 8003782:	6876      	ldr	r6, [r6, #4]
 8003784:	e7b4      	b.n	80036f0 <_malloc_r+0x4c>
 8003786:	4613      	mov	r3, r2
 8003788:	e7cc      	b.n	8003724 <_malloc_r+0x80>
 800378a:	230c      	movs	r3, #12
 800378c:	603b      	str	r3, [r7, #0]
 800378e:	4638      	mov	r0, r7
 8003790:	f000 f80e 	bl	80037b0 <__malloc_unlock>
 8003794:	e797      	b.n	80036c6 <_malloc_r+0x22>
 8003796:	6025      	str	r5, [r4, #0]
 8003798:	e7dc      	b.n	8003754 <_malloc_r+0xb0>
 800379a:	605b      	str	r3, [r3, #4]
 800379c:	deff      	udf	#255	; 0xff
 800379e:	bf00      	nop
 80037a0:	2000025c 	.word	0x2000025c

080037a4 <__malloc_lock>:
 80037a4:	4801      	ldr	r0, [pc, #4]	; (80037ac <__malloc_lock+0x8>)
 80037a6:	f7ff bf06 	b.w	80035b6 <__retarget_lock_acquire_recursive>
 80037aa:	bf00      	nop
 80037ac:	20000258 	.word	0x20000258

080037b0 <__malloc_unlock>:
 80037b0:	4801      	ldr	r0, [pc, #4]	; (80037b8 <__malloc_unlock+0x8>)
 80037b2:	f7ff bf01 	b.w	80035b8 <__retarget_lock_release_recursive>
 80037b6:	bf00      	nop
 80037b8:	20000258 	.word	0x20000258

080037bc <__sfputc_r>:
 80037bc:	6893      	ldr	r3, [r2, #8]
 80037be:	3b01      	subs	r3, #1
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	b410      	push	{r4}
 80037c4:	6093      	str	r3, [r2, #8]
 80037c6:	da08      	bge.n	80037da <__sfputc_r+0x1e>
 80037c8:	6994      	ldr	r4, [r2, #24]
 80037ca:	42a3      	cmp	r3, r4
 80037cc:	db01      	blt.n	80037d2 <__sfputc_r+0x16>
 80037ce:	290a      	cmp	r1, #10
 80037d0:	d103      	bne.n	80037da <__sfputc_r+0x1e>
 80037d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80037d6:	f000 bc4c 	b.w	8004072 <__swbuf_r>
 80037da:	6813      	ldr	r3, [r2, #0]
 80037dc:	1c58      	adds	r0, r3, #1
 80037de:	6010      	str	r0, [r2, #0]
 80037e0:	7019      	strb	r1, [r3, #0]
 80037e2:	4608      	mov	r0, r1
 80037e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80037e8:	4770      	bx	lr

080037ea <__sfputs_r>:
 80037ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ec:	4606      	mov	r6, r0
 80037ee:	460f      	mov	r7, r1
 80037f0:	4614      	mov	r4, r2
 80037f2:	18d5      	adds	r5, r2, r3
 80037f4:	42ac      	cmp	r4, r5
 80037f6:	d101      	bne.n	80037fc <__sfputs_r+0x12>
 80037f8:	2000      	movs	r0, #0
 80037fa:	e007      	b.n	800380c <__sfputs_r+0x22>
 80037fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003800:	463a      	mov	r2, r7
 8003802:	4630      	mov	r0, r6
 8003804:	f7ff ffda 	bl	80037bc <__sfputc_r>
 8003808:	1c43      	adds	r3, r0, #1
 800380a:	d1f3      	bne.n	80037f4 <__sfputs_r+0xa>
 800380c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003810 <_vfiprintf_r>:
 8003810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003814:	460d      	mov	r5, r1
 8003816:	b09d      	sub	sp, #116	; 0x74
 8003818:	4614      	mov	r4, r2
 800381a:	4698      	mov	r8, r3
 800381c:	4606      	mov	r6, r0
 800381e:	b118      	cbz	r0, 8003828 <_vfiprintf_r+0x18>
 8003820:	6a03      	ldr	r3, [r0, #32]
 8003822:	b90b      	cbnz	r3, 8003828 <_vfiprintf_r+0x18>
 8003824:	f7ff fd04 	bl	8003230 <__sinit>
 8003828:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800382a:	07d9      	lsls	r1, r3, #31
 800382c:	d405      	bmi.n	800383a <_vfiprintf_r+0x2a>
 800382e:	89ab      	ldrh	r3, [r5, #12]
 8003830:	059a      	lsls	r2, r3, #22
 8003832:	d402      	bmi.n	800383a <_vfiprintf_r+0x2a>
 8003834:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003836:	f7ff febe 	bl	80035b6 <__retarget_lock_acquire_recursive>
 800383a:	89ab      	ldrh	r3, [r5, #12]
 800383c:	071b      	lsls	r3, r3, #28
 800383e:	d501      	bpl.n	8003844 <_vfiprintf_r+0x34>
 8003840:	692b      	ldr	r3, [r5, #16]
 8003842:	b99b      	cbnz	r3, 800386c <_vfiprintf_r+0x5c>
 8003844:	4629      	mov	r1, r5
 8003846:	4630      	mov	r0, r6
 8003848:	f000 fc50 	bl	80040ec <__swsetup_r>
 800384c:	b170      	cbz	r0, 800386c <_vfiprintf_r+0x5c>
 800384e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003850:	07dc      	lsls	r4, r3, #31
 8003852:	d504      	bpl.n	800385e <_vfiprintf_r+0x4e>
 8003854:	f04f 30ff 	mov.w	r0, #4294967295
 8003858:	b01d      	add	sp, #116	; 0x74
 800385a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800385e:	89ab      	ldrh	r3, [r5, #12]
 8003860:	0598      	lsls	r0, r3, #22
 8003862:	d4f7      	bmi.n	8003854 <_vfiprintf_r+0x44>
 8003864:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003866:	f7ff fea7 	bl	80035b8 <__retarget_lock_release_recursive>
 800386a:	e7f3      	b.n	8003854 <_vfiprintf_r+0x44>
 800386c:	2300      	movs	r3, #0
 800386e:	9309      	str	r3, [sp, #36]	; 0x24
 8003870:	2320      	movs	r3, #32
 8003872:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003876:	f8cd 800c 	str.w	r8, [sp, #12]
 800387a:	2330      	movs	r3, #48	; 0x30
 800387c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8003a30 <_vfiprintf_r+0x220>
 8003880:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003884:	f04f 0901 	mov.w	r9, #1
 8003888:	4623      	mov	r3, r4
 800388a:	469a      	mov	sl, r3
 800388c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003890:	b10a      	cbz	r2, 8003896 <_vfiprintf_r+0x86>
 8003892:	2a25      	cmp	r2, #37	; 0x25
 8003894:	d1f9      	bne.n	800388a <_vfiprintf_r+0x7a>
 8003896:	ebba 0b04 	subs.w	fp, sl, r4
 800389a:	d00b      	beq.n	80038b4 <_vfiprintf_r+0xa4>
 800389c:	465b      	mov	r3, fp
 800389e:	4622      	mov	r2, r4
 80038a0:	4629      	mov	r1, r5
 80038a2:	4630      	mov	r0, r6
 80038a4:	f7ff ffa1 	bl	80037ea <__sfputs_r>
 80038a8:	3001      	adds	r0, #1
 80038aa:	f000 80a9 	beq.w	8003a00 <_vfiprintf_r+0x1f0>
 80038ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80038b0:	445a      	add	r2, fp
 80038b2:	9209      	str	r2, [sp, #36]	; 0x24
 80038b4:	f89a 3000 	ldrb.w	r3, [sl]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	f000 80a1 	beq.w	8003a00 <_vfiprintf_r+0x1f0>
 80038be:	2300      	movs	r3, #0
 80038c0:	f04f 32ff 	mov.w	r2, #4294967295
 80038c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80038c8:	f10a 0a01 	add.w	sl, sl, #1
 80038cc:	9304      	str	r3, [sp, #16]
 80038ce:	9307      	str	r3, [sp, #28]
 80038d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80038d4:	931a      	str	r3, [sp, #104]	; 0x68
 80038d6:	4654      	mov	r4, sl
 80038d8:	2205      	movs	r2, #5
 80038da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038de:	4854      	ldr	r0, [pc, #336]	; (8003a30 <_vfiprintf_r+0x220>)
 80038e0:	f7fc fc86 	bl	80001f0 <memchr>
 80038e4:	9a04      	ldr	r2, [sp, #16]
 80038e6:	b9d8      	cbnz	r0, 8003920 <_vfiprintf_r+0x110>
 80038e8:	06d1      	lsls	r1, r2, #27
 80038ea:	bf44      	itt	mi
 80038ec:	2320      	movmi	r3, #32
 80038ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80038f2:	0713      	lsls	r3, r2, #28
 80038f4:	bf44      	itt	mi
 80038f6:	232b      	movmi	r3, #43	; 0x2b
 80038f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80038fc:	f89a 3000 	ldrb.w	r3, [sl]
 8003900:	2b2a      	cmp	r3, #42	; 0x2a
 8003902:	d015      	beq.n	8003930 <_vfiprintf_r+0x120>
 8003904:	9a07      	ldr	r2, [sp, #28]
 8003906:	4654      	mov	r4, sl
 8003908:	2000      	movs	r0, #0
 800390a:	f04f 0c0a 	mov.w	ip, #10
 800390e:	4621      	mov	r1, r4
 8003910:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003914:	3b30      	subs	r3, #48	; 0x30
 8003916:	2b09      	cmp	r3, #9
 8003918:	d94d      	bls.n	80039b6 <_vfiprintf_r+0x1a6>
 800391a:	b1b0      	cbz	r0, 800394a <_vfiprintf_r+0x13a>
 800391c:	9207      	str	r2, [sp, #28]
 800391e:	e014      	b.n	800394a <_vfiprintf_r+0x13a>
 8003920:	eba0 0308 	sub.w	r3, r0, r8
 8003924:	fa09 f303 	lsl.w	r3, r9, r3
 8003928:	4313      	orrs	r3, r2
 800392a:	9304      	str	r3, [sp, #16]
 800392c:	46a2      	mov	sl, r4
 800392e:	e7d2      	b.n	80038d6 <_vfiprintf_r+0xc6>
 8003930:	9b03      	ldr	r3, [sp, #12]
 8003932:	1d19      	adds	r1, r3, #4
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	9103      	str	r1, [sp, #12]
 8003938:	2b00      	cmp	r3, #0
 800393a:	bfbb      	ittet	lt
 800393c:	425b      	neglt	r3, r3
 800393e:	f042 0202 	orrlt.w	r2, r2, #2
 8003942:	9307      	strge	r3, [sp, #28]
 8003944:	9307      	strlt	r3, [sp, #28]
 8003946:	bfb8      	it	lt
 8003948:	9204      	strlt	r2, [sp, #16]
 800394a:	7823      	ldrb	r3, [r4, #0]
 800394c:	2b2e      	cmp	r3, #46	; 0x2e
 800394e:	d10c      	bne.n	800396a <_vfiprintf_r+0x15a>
 8003950:	7863      	ldrb	r3, [r4, #1]
 8003952:	2b2a      	cmp	r3, #42	; 0x2a
 8003954:	d134      	bne.n	80039c0 <_vfiprintf_r+0x1b0>
 8003956:	9b03      	ldr	r3, [sp, #12]
 8003958:	1d1a      	adds	r2, r3, #4
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	9203      	str	r2, [sp, #12]
 800395e:	2b00      	cmp	r3, #0
 8003960:	bfb8      	it	lt
 8003962:	f04f 33ff 	movlt.w	r3, #4294967295
 8003966:	3402      	adds	r4, #2
 8003968:	9305      	str	r3, [sp, #20]
 800396a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8003a40 <_vfiprintf_r+0x230>
 800396e:	7821      	ldrb	r1, [r4, #0]
 8003970:	2203      	movs	r2, #3
 8003972:	4650      	mov	r0, sl
 8003974:	f7fc fc3c 	bl	80001f0 <memchr>
 8003978:	b138      	cbz	r0, 800398a <_vfiprintf_r+0x17a>
 800397a:	9b04      	ldr	r3, [sp, #16]
 800397c:	eba0 000a 	sub.w	r0, r0, sl
 8003980:	2240      	movs	r2, #64	; 0x40
 8003982:	4082      	lsls	r2, r0
 8003984:	4313      	orrs	r3, r2
 8003986:	3401      	adds	r4, #1
 8003988:	9304      	str	r3, [sp, #16]
 800398a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800398e:	4829      	ldr	r0, [pc, #164]	; (8003a34 <_vfiprintf_r+0x224>)
 8003990:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003994:	2206      	movs	r2, #6
 8003996:	f7fc fc2b 	bl	80001f0 <memchr>
 800399a:	2800      	cmp	r0, #0
 800399c:	d03f      	beq.n	8003a1e <_vfiprintf_r+0x20e>
 800399e:	4b26      	ldr	r3, [pc, #152]	; (8003a38 <_vfiprintf_r+0x228>)
 80039a0:	bb1b      	cbnz	r3, 80039ea <_vfiprintf_r+0x1da>
 80039a2:	9b03      	ldr	r3, [sp, #12]
 80039a4:	3307      	adds	r3, #7
 80039a6:	f023 0307 	bic.w	r3, r3, #7
 80039aa:	3308      	adds	r3, #8
 80039ac:	9303      	str	r3, [sp, #12]
 80039ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039b0:	443b      	add	r3, r7
 80039b2:	9309      	str	r3, [sp, #36]	; 0x24
 80039b4:	e768      	b.n	8003888 <_vfiprintf_r+0x78>
 80039b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80039ba:	460c      	mov	r4, r1
 80039bc:	2001      	movs	r0, #1
 80039be:	e7a6      	b.n	800390e <_vfiprintf_r+0xfe>
 80039c0:	2300      	movs	r3, #0
 80039c2:	3401      	adds	r4, #1
 80039c4:	9305      	str	r3, [sp, #20]
 80039c6:	4619      	mov	r1, r3
 80039c8:	f04f 0c0a 	mov.w	ip, #10
 80039cc:	4620      	mov	r0, r4
 80039ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80039d2:	3a30      	subs	r2, #48	; 0x30
 80039d4:	2a09      	cmp	r2, #9
 80039d6:	d903      	bls.n	80039e0 <_vfiprintf_r+0x1d0>
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d0c6      	beq.n	800396a <_vfiprintf_r+0x15a>
 80039dc:	9105      	str	r1, [sp, #20]
 80039de:	e7c4      	b.n	800396a <_vfiprintf_r+0x15a>
 80039e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80039e4:	4604      	mov	r4, r0
 80039e6:	2301      	movs	r3, #1
 80039e8:	e7f0      	b.n	80039cc <_vfiprintf_r+0x1bc>
 80039ea:	ab03      	add	r3, sp, #12
 80039ec:	9300      	str	r3, [sp, #0]
 80039ee:	462a      	mov	r2, r5
 80039f0:	4b12      	ldr	r3, [pc, #72]	; (8003a3c <_vfiprintf_r+0x22c>)
 80039f2:	a904      	add	r1, sp, #16
 80039f4:	4630      	mov	r0, r6
 80039f6:	f3af 8000 	nop.w
 80039fa:	4607      	mov	r7, r0
 80039fc:	1c78      	adds	r0, r7, #1
 80039fe:	d1d6      	bne.n	80039ae <_vfiprintf_r+0x19e>
 8003a00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003a02:	07d9      	lsls	r1, r3, #31
 8003a04:	d405      	bmi.n	8003a12 <_vfiprintf_r+0x202>
 8003a06:	89ab      	ldrh	r3, [r5, #12]
 8003a08:	059a      	lsls	r2, r3, #22
 8003a0a:	d402      	bmi.n	8003a12 <_vfiprintf_r+0x202>
 8003a0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003a0e:	f7ff fdd3 	bl	80035b8 <__retarget_lock_release_recursive>
 8003a12:	89ab      	ldrh	r3, [r5, #12]
 8003a14:	065b      	lsls	r3, r3, #25
 8003a16:	f53f af1d 	bmi.w	8003854 <_vfiprintf_r+0x44>
 8003a1a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a1c:	e71c      	b.n	8003858 <_vfiprintf_r+0x48>
 8003a1e:	ab03      	add	r3, sp, #12
 8003a20:	9300      	str	r3, [sp, #0]
 8003a22:	462a      	mov	r2, r5
 8003a24:	4b05      	ldr	r3, [pc, #20]	; (8003a3c <_vfiprintf_r+0x22c>)
 8003a26:	a904      	add	r1, sp, #16
 8003a28:	4630      	mov	r0, r6
 8003a2a:	f000 f879 	bl	8003b20 <_printf_i>
 8003a2e:	e7e4      	b.n	80039fa <_vfiprintf_r+0x1ea>
 8003a30:	080043c0 	.word	0x080043c0
 8003a34:	080043ca 	.word	0x080043ca
 8003a38:	00000000 	.word	0x00000000
 8003a3c:	080037eb 	.word	0x080037eb
 8003a40:	080043c6 	.word	0x080043c6

08003a44 <_printf_common>:
 8003a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a48:	4616      	mov	r6, r2
 8003a4a:	4699      	mov	r9, r3
 8003a4c:	688a      	ldr	r2, [r1, #8]
 8003a4e:	690b      	ldr	r3, [r1, #16]
 8003a50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003a54:	4293      	cmp	r3, r2
 8003a56:	bfb8      	it	lt
 8003a58:	4613      	movlt	r3, r2
 8003a5a:	6033      	str	r3, [r6, #0]
 8003a5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003a60:	4607      	mov	r7, r0
 8003a62:	460c      	mov	r4, r1
 8003a64:	b10a      	cbz	r2, 8003a6a <_printf_common+0x26>
 8003a66:	3301      	adds	r3, #1
 8003a68:	6033      	str	r3, [r6, #0]
 8003a6a:	6823      	ldr	r3, [r4, #0]
 8003a6c:	0699      	lsls	r1, r3, #26
 8003a6e:	bf42      	ittt	mi
 8003a70:	6833      	ldrmi	r3, [r6, #0]
 8003a72:	3302      	addmi	r3, #2
 8003a74:	6033      	strmi	r3, [r6, #0]
 8003a76:	6825      	ldr	r5, [r4, #0]
 8003a78:	f015 0506 	ands.w	r5, r5, #6
 8003a7c:	d106      	bne.n	8003a8c <_printf_common+0x48>
 8003a7e:	f104 0a19 	add.w	sl, r4, #25
 8003a82:	68e3      	ldr	r3, [r4, #12]
 8003a84:	6832      	ldr	r2, [r6, #0]
 8003a86:	1a9b      	subs	r3, r3, r2
 8003a88:	42ab      	cmp	r3, r5
 8003a8a:	dc26      	bgt.n	8003ada <_printf_common+0x96>
 8003a8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003a90:	1e13      	subs	r3, r2, #0
 8003a92:	6822      	ldr	r2, [r4, #0]
 8003a94:	bf18      	it	ne
 8003a96:	2301      	movne	r3, #1
 8003a98:	0692      	lsls	r2, r2, #26
 8003a9a:	d42b      	bmi.n	8003af4 <_printf_common+0xb0>
 8003a9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003aa0:	4649      	mov	r1, r9
 8003aa2:	4638      	mov	r0, r7
 8003aa4:	47c0      	blx	r8
 8003aa6:	3001      	adds	r0, #1
 8003aa8:	d01e      	beq.n	8003ae8 <_printf_common+0xa4>
 8003aaa:	6823      	ldr	r3, [r4, #0]
 8003aac:	6922      	ldr	r2, [r4, #16]
 8003aae:	f003 0306 	and.w	r3, r3, #6
 8003ab2:	2b04      	cmp	r3, #4
 8003ab4:	bf02      	ittt	eq
 8003ab6:	68e5      	ldreq	r5, [r4, #12]
 8003ab8:	6833      	ldreq	r3, [r6, #0]
 8003aba:	1aed      	subeq	r5, r5, r3
 8003abc:	68a3      	ldr	r3, [r4, #8]
 8003abe:	bf0c      	ite	eq
 8003ac0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ac4:	2500      	movne	r5, #0
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	bfc4      	itt	gt
 8003aca:	1a9b      	subgt	r3, r3, r2
 8003acc:	18ed      	addgt	r5, r5, r3
 8003ace:	2600      	movs	r6, #0
 8003ad0:	341a      	adds	r4, #26
 8003ad2:	42b5      	cmp	r5, r6
 8003ad4:	d11a      	bne.n	8003b0c <_printf_common+0xc8>
 8003ad6:	2000      	movs	r0, #0
 8003ad8:	e008      	b.n	8003aec <_printf_common+0xa8>
 8003ada:	2301      	movs	r3, #1
 8003adc:	4652      	mov	r2, sl
 8003ade:	4649      	mov	r1, r9
 8003ae0:	4638      	mov	r0, r7
 8003ae2:	47c0      	blx	r8
 8003ae4:	3001      	adds	r0, #1
 8003ae6:	d103      	bne.n	8003af0 <_printf_common+0xac>
 8003ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8003aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003af0:	3501      	adds	r5, #1
 8003af2:	e7c6      	b.n	8003a82 <_printf_common+0x3e>
 8003af4:	18e1      	adds	r1, r4, r3
 8003af6:	1c5a      	adds	r2, r3, #1
 8003af8:	2030      	movs	r0, #48	; 0x30
 8003afa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003afe:	4422      	add	r2, r4
 8003b00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b08:	3302      	adds	r3, #2
 8003b0a:	e7c7      	b.n	8003a9c <_printf_common+0x58>
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	4622      	mov	r2, r4
 8003b10:	4649      	mov	r1, r9
 8003b12:	4638      	mov	r0, r7
 8003b14:	47c0      	blx	r8
 8003b16:	3001      	adds	r0, #1
 8003b18:	d0e6      	beq.n	8003ae8 <_printf_common+0xa4>
 8003b1a:	3601      	adds	r6, #1
 8003b1c:	e7d9      	b.n	8003ad2 <_printf_common+0x8e>
	...

08003b20 <_printf_i>:
 8003b20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b24:	7e0f      	ldrb	r7, [r1, #24]
 8003b26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003b28:	2f78      	cmp	r7, #120	; 0x78
 8003b2a:	4691      	mov	r9, r2
 8003b2c:	4680      	mov	r8, r0
 8003b2e:	460c      	mov	r4, r1
 8003b30:	469a      	mov	sl, r3
 8003b32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003b36:	d807      	bhi.n	8003b48 <_printf_i+0x28>
 8003b38:	2f62      	cmp	r7, #98	; 0x62
 8003b3a:	d80a      	bhi.n	8003b52 <_printf_i+0x32>
 8003b3c:	2f00      	cmp	r7, #0
 8003b3e:	f000 80d4 	beq.w	8003cea <_printf_i+0x1ca>
 8003b42:	2f58      	cmp	r7, #88	; 0x58
 8003b44:	f000 80c0 	beq.w	8003cc8 <_printf_i+0x1a8>
 8003b48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003b50:	e03a      	b.n	8003bc8 <_printf_i+0xa8>
 8003b52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003b56:	2b15      	cmp	r3, #21
 8003b58:	d8f6      	bhi.n	8003b48 <_printf_i+0x28>
 8003b5a:	a101      	add	r1, pc, #4	; (adr r1, 8003b60 <_printf_i+0x40>)
 8003b5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003b60:	08003bb9 	.word	0x08003bb9
 8003b64:	08003bcd 	.word	0x08003bcd
 8003b68:	08003b49 	.word	0x08003b49
 8003b6c:	08003b49 	.word	0x08003b49
 8003b70:	08003b49 	.word	0x08003b49
 8003b74:	08003b49 	.word	0x08003b49
 8003b78:	08003bcd 	.word	0x08003bcd
 8003b7c:	08003b49 	.word	0x08003b49
 8003b80:	08003b49 	.word	0x08003b49
 8003b84:	08003b49 	.word	0x08003b49
 8003b88:	08003b49 	.word	0x08003b49
 8003b8c:	08003cd1 	.word	0x08003cd1
 8003b90:	08003bf9 	.word	0x08003bf9
 8003b94:	08003c8b 	.word	0x08003c8b
 8003b98:	08003b49 	.word	0x08003b49
 8003b9c:	08003b49 	.word	0x08003b49
 8003ba0:	08003cf3 	.word	0x08003cf3
 8003ba4:	08003b49 	.word	0x08003b49
 8003ba8:	08003bf9 	.word	0x08003bf9
 8003bac:	08003b49 	.word	0x08003b49
 8003bb0:	08003b49 	.word	0x08003b49
 8003bb4:	08003c93 	.word	0x08003c93
 8003bb8:	682b      	ldr	r3, [r5, #0]
 8003bba:	1d1a      	adds	r2, r3, #4
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	602a      	str	r2, [r5, #0]
 8003bc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003bc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e09f      	b.n	8003d0c <_printf_i+0x1ec>
 8003bcc:	6820      	ldr	r0, [r4, #0]
 8003bce:	682b      	ldr	r3, [r5, #0]
 8003bd0:	0607      	lsls	r7, r0, #24
 8003bd2:	f103 0104 	add.w	r1, r3, #4
 8003bd6:	6029      	str	r1, [r5, #0]
 8003bd8:	d501      	bpl.n	8003bde <_printf_i+0xbe>
 8003bda:	681e      	ldr	r6, [r3, #0]
 8003bdc:	e003      	b.n	8003be6 <_printf_i+0xc6>
 8003bde:	0646      	lsls	r6, r0, #25
 8003be0:	d5fb      	bpl.n	8003bda <_printf_i+0xba>
 8003be2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003be6:	2e00      	cmp	r6, #0
 8003be8:	da03      	bge.n	8003bf2 <_printf_i+0xd2>
 8003bea:	232d      	movs	r3, #45	; 0x2d
 8003bec:	4276      	negs	r6, r6
 8003bee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bf2:	485a      	ldr	r0, [pc, #360]	; (8003d5c <_printf_i+0x23c>)
 8003bf4:	230a      	movs	r3, #10
 8003bf6:	e012      	b.n	8003c1e <_printf_i+0xfe>
 8003bf8:	682b      	ldr	r3, [r5, #0]
 8003bfa:	6820      	ldr	r0, [r4, #0]
 8003bfc:	1d19      	adds	r1, r3, #4
 8003bfe:	6029      	str	r1, [r5, #0]
 8003c00:	0605      	lsls	r5, r0, #24
 8003c02:	d501      	bpl.n	8003c08 <_printf_i+0xe8>
 8003c04:	681e      	ldr	r6, [r3, #0]
 8003c06:	e002      	b.n	8003c0e <_printf_i+0xee>
 8003c08:	0641      	lsls	r1, r0, #25
 8003c0a:	d5fb      	bpl.n	8003c04 <_printf_i+0xe4>
 8003c0c:	881e      	ldrh	r6, [r3, #0]
 8003c0e:	4853      	ldr	r0, [pc, #332]	; (8003d5c <_printf_i+0x23c>)
 8003c10:	2f6f      	cmp	r7, #111	; 0x6f
 8003c12:	bf0c      	ite	eq
 8003c14:	2308      	moveq	r3, #8
 8003c16:	230a      	movne	r3, #10
 8003c18:	2100      	movs	r1, #0
 8003c1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c1e:	6865      	ldr	r5, [r4, #4]
 8003c20:	60a5      	str	r5, [r4, #8]
 8003c22:	2d00      	cmp	r5, #0
 8003c24:	bfa2      	ittt	ge
 8003c26:	6821      	ldrge	r1, [r4, #0]
 8003c28:	f021 0104 	bicge.w	r1, r1, #4
 8003c2c:	6021      	strge	r1, [r4, #0]
 8003c2e:	b90e      	cbnz	r6, 8003c34 <_printf_i+0x114>
 8003c30:	2d00      	cmp	r5, #0
 8003c32:	d04b      	beq.n	8003ccc <_printf_i+0x1ac>
 8003c34:	4615      	mov	r5, r2
 8003c36:	fbb6 f1f3 	udiv	r1, r6, r3
 8003c3a:	fb03 6711 	mls	r7, r3, r1, r6
 8003c3e:	5dc7      	ldrb	r7, [r0, r7]
 8003c40:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003c44:	4637      	mov	r7, r6
 8003c46:	42bb      	cmp	r3, r7
 8003c48:	460e      	mov	r6, r1
 8003c4a:	d9f4      	bls.n	8003c36 <_printf_i+0x116>
 8003c4c:	2b08      	cmp	r3, #8
 8003c4e:	d10b      	bne.n	8003c68 <_printf_i+0x148>
 8003c50:	6823      	ldr	r3, [r4, #0]
 8003c52:	07de      	lsls	r6, r3, #31
 8003c54:	d508      	bpl.n	8003c68 <_printf_i+0x148>
 8003c56:	6923      	ldr	r3, [r4, #16]
 8003c58:	6861      	ldr	r1, [r4, #4]
 8003c5a:	4299      	cmp	r1, r3
 8003c5c:	bfde      	ittt	le
 8003c5e:	2330      	movle	r3, #48	; 0x30
 8003c60:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003c64:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003c68:	1b52      	subs	r2, r2, r5
 8003c6a:	6122      	str	r2, [r4, #16]
 8003c6c:	f8cd a000 	str.w	sl, [sp]
 8003c70:	464b      	mov	r3, r9
 8003c72:	aa03      	add	r2, sp, #12
 8003c74:	4621      	mov	r1, r4
 8003c76:	4640      	mov	r0, r8
 8003c78:	f7ff fee4 	bl	8003a44 <_printf_common>
 8003c7c:	3001      	adds	r0, #1
 8003c7e:	d14a      	bne.n	8003d16 <_printf_i+0x1f6>
 8003c80:	f04f 30ff 	mov.w	r0, #4294967295
 8003c84:	b004      	add	sp, #16
 8003c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c8a:	6823      	ldr	r3, [r4, #0]
 8003c8c:	f043 0320 	orr.w	r3, r3, #32
 8003c90:	6023      	str	r3, [r4, #0]
 8003c92:	4833      	ldr	r0, [pc, #204]	; (8003d60 <_printf_i+0x240>)
 8003c94:	2778      	movs	r7, #120	; 0x78
 8003c96:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003c9a:	6823      	ldr	r3, [r4, #0]
 8003c9c:	6829      	ldr	r1, [r5, #0]
 8003c9e:	061f      	lsls	r7, r3, #24
 8003ca0:	f851 6b04 	ldr.w	r6, [r1], #4
 8003ca4:	d402      	bmi.n	8003cac <_printf_i+0x18c>
 8003ca6:	065f      	lsls	r7, r3, #25
 8003ca8:	bf48      	it	mi
 8003caa:	b2b6      	uxthmi	r6, r6
 8003cac:	07df      	lsls	r7, r3, #31
 8003cae:	bf48      	it	mi
 8003cb0:	f043 0320 	orrmi.w	r3, r3, #32
 8003cb4:	6029      	str	r1, [r5, #0]
 8003cb6:	bf48      	it	mi
 8003cb8:	6023      	strmi	r3, [r4, #0]
 8003cba:	b91e      	cbnz	r6, 8003cc4 <_printf_i+0x1a4>
 8003cbc:	6823      	ldr	r3, [r4, #0]
 8003cbe:	f023 0320 	bic.w	r3, r3, #32
 8003cc2:	6023      	str	r3, [r4, #0]
 8003cc4:	2310      	movs	r3, #16
 8003cc6:	e7a7      	b.n	8003c18 <_printf_i+0xf8>
 8003cc8:	4824      	ldr	r0, [pc, #144]	; (8003d5c <_printf_i+0x23c>)
 8003cca:	e7e4      	b.n	8003c96 <_printf_i+0x176>
 8003ccc:	4615      	mov	r5, r2
 8003cce:	e7bd      	b.n	8003c4c <_printf_i+0x12c>
 8003cd0:	682b      	ldr	r3, [r5, #0]
 8003cd2:	6826      	ldr	r6, [r4, #0]
 8003cd4:	6961      	ldr	r1, [r4, #20]
 8003cd6:	1d18      	adds	r0, r3, #4
 8003cd8:	6028      	str	r0, [r5, #0]
 8003cda:	0635      	lsls	r5, r6, #24
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	d501      	bpl.n	8003ce4 <_printf_i+0x1c4>
 8003ce0:	6019      	str	r1, [r3, #0]
 8003ce2:	e002      	b.n	8003cea <_printf_i+0x1ca>
 8003ce4:	0670      	lsls	r0, r6, #25
 8003ce6:	d5fb      	bpl.n	8003ce0 <_printf_i+0x1c0>
 8003ce8:	8019      	strh	r1, [r3, #0]
 8003cea:	2300      	movs	r3, #0
 8003cec:	6123      	str	r3, [r4, #16]
 8003cee:	4615      	mov	r5, r2
 8003cf0:	e7bc      	b.n	8003c6c <_printf_i+0x14c>
 8003cf2:	682b      	ldr	r3, [r5, #0]
 8003cf4:	1d1a      	adds	r2, r3, #4
 8003cf6:	602a      	str	r2, [r5, #0]
 8003cf8:	681d      	ldr	r5, [r3, #0]
 8003cfa:	6862      	ldr	r2, [r4, #4]
 8003cfc:	2100      	movs	r1, #0
 8003cfe:	4628      	mov	r0, r5
 8003d00:	f7fc fa76 	bl	80001f0 <memchr>
 8003d04:	b108      	cbz	r0, 8003d0a <_printf_i+0x1ea>
 8003d06:	1b40      	subs	r0, r0, r5
 8003d08:	6060      	str	r0, [r4, #4]
 8003d0a:	6863      	ldr	r3, [r4, #4]
 8003d0c:	6123      	str	r3, [r4, #16]
 8003d0e:	2300      	movs	r3, #0
 8003d10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d14:	e7aa      	b.n	8003c6c <_printf_i+0x14c>
 8003d16:	6923      	ldr	r3, [r4, #16]
 8003d18:	462a      	mov	r2, r5
 8003d1a:	4649      	mov	r1, r9
 8003d1c:	4640      	mov	r0, r8
 8003d1e:	47d0      	blx	sl
 8003d20:	3001      	adds	r0, #1
 8003d22:	d0ad      	beq.n	8003c80 <_printf_i+0x160>
 8003d24:	6823      	ldr	r3, [r4, #0]
 8003d26:	079b      	lsls	r3, r3, #30
 8003d28:	d413      	bmi.n	8003d52 <_printf_i+0x232>
 8003d2a:	68e0      	ldr	r0, [r4, #12]
 8003d2c:	9b03      	ldr	r3, [sp, #12]
 8003d2e:	4298      	cmp	r0, r3
 8003d30:	bfb8      	it	lt
 8003d32:	4618      	movlt	r0, r3
 8003d34:	e7a6      	b.n	8003c84 <_printf_i+0x164>
 8003d36:	2301      	movs	r3, #1
 8003d38:	4632      	mov	r2, r6
 8003d3a:	4649      	mov	r1, r9
 8003d3c:	4640      	mov	r0, r8
 8003d3e:	47d0      	blx	sl
 8003d40:	3001      	adds	r0, #1
 8003d42:	d09d      	beq.n	8003c80 <_printf_i+0x160>
 8003d44:	3501      	adds	r5, #1
 8003d46:	68e3      	ldr	r3, [r4, #12]
 8003d48:	9903      	ldr	r1, [sp, #12]
 8003d4a:	1a5b      	subs	r3, r3, r1
 8003d4c:	42ab      	cmp	r3, r5
 8003d4e:	dcf2      	bgt.n	8003d36 <_printf_i+0x216>
 8003d50:	e7eb      	b.n	8003d2a <_printf_i+0x20a>
 8003d52:	2500      	movs	r5, #0
 8003d54:	f104 0619 	add.w	r6, r4, #25
 8003d58:	e7f5      	b.n	8003d46 <_printf_i+0x226>
 8003d5a:	bf00      	nop
 8003d5c:	080043d1 	.word	0x080043d1
 8003d60:	080043e2 	.word	0x080043e2

08003d64 <__sflush_r>:
 8003d64:	898a      	ldrh	r2, [r1, #12]
 8003d66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d6a:	4605      	mov	r5, r0
 8003d6c:	0710      	lsls	r0, r2, #28
 8003d6e:	460c      	mov	r4, r1
 8003d70:	d458      	bmi.n	8003e24 <__sflush_r+0xc0>
 8003d72:	684b      	ldr	r3, [r1, #4]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	dc05      	bgt.n	8003d84 <__sflush_r+0x20>
 8003d78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	dc02      	bgt.n	8003d84 <__sflush_r+0x20>
 8003d7e:	2000      	movs	r0, #0
 8003d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003d86:	2e00      	cmp	r6, #0
 8003d88:	d0f9      	beq.n	8003d7e <__sflush_r+0x1a>
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003d90:	682f      	ldr	r7, [r5, #0]
 8003d92:	6a21      	ldr	r1, [r4, #32]
 8003d94:	602b      	str	r3, [r5, #0]
 8003d96:	d032      	beq.n	8003dfe <__sflush_r+0x9a>
 8003d98:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003d9a:	89a3      	ldrh	r3, [r4, #12]
 8003d9c:	075a      	lsls	r2, r3, #29
 8003d9e:	d505      	bpl.n	8003dac <__sflush_r+0x48>
 8003da0:	6863      	ldr	r3, [r4, #4]
 8003da2:	1ac0      	subs	r0, r0, r3
 8003da4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003da6:	b10b      	cbz	r3, 8003dac <__sflush_r+0x48>
 8003da8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003daa:	1ac0      	subs	r0, r0, r3
 8003dac:	2300      	movs	r3, #0
 8003dae:	4602      	mov	r2, r0
 8003db0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003db2:	6a21      	ldr	r1, [r4, #32]
 8003db4:	4628      	mov	r0, r5
 8003db6:	47b0      	blx	r6
 8003db8:	1c43      	adds	r3, r0, #1
 8003dba:	89a3      	ldrh	r3, [r4, #12]
 8003dbc:	d106      	bne.n	8003dcc <__sflush_r+0x68>
 8003dbe:	6829      	ldr	r1, [r5, #0]
 8003dc0:	291d      	cmp	r1, #29
 8003dc2:	d82b      	bhi.n	8003e1c <__sflush_r+0xb8>
 8003dc4:	4a29      	ldr	r2, [pc, #164]	; (8003e6c <__sflush_r+0x108>)
 8003dc6:	410a      	asrs	r2, r1
 8003dc8:	07d6      	lsls	r6, r2, #31
 8003dca:	d427      	bmi.n	8003e1c <__sflush_r+0xb8>
 8003dcc:	2200      	movs	r2, #0
 8003dce:	6062      	str	r2, [r4, #4]
 8003dd0:	04d9      	lsls	r1, r3, #19
 8003dd2:	6922      	ldr	r2, [r4, #16]
 8003dd4:	6022      	str	r2, [r4, #0]
 8003dd6:	d504      	bpl.n	8003de2 <__sflush_r+0x7e>
 8003dd8:	1c42      	adds	r2, r0, #1
 8003dda:	d101      	bne.n	8003de0 <__sflush_r+0x7c>
 8003ddc:	682b      	ldr	r3, [r5, #0]
 8003dde:	b903      	cbnz	r3, 8003de2 <__sflush_r+0x7e>
 8003de0:	6560      	str	r0, [r4, #84]	; 0x54
 8003de2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003de4:	602f      	str	r7, [r5, #0]
 8003de6:	2900      	cmp	r1, #0
 8003de8:	d0c9      	beq.n	8003d7e <__sflush_r+0x1a>
 8003dea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003dee:	4299      	cmp	r1, r3
 8003df0:	d002      	beq.n	8003df8 <__sflush_r+0x94>
 8003df2:	4628      	mov	r0, r5
 8003df4:	f7ff fbe2 	bl	80035bc <_free_r>
 8003df8:	2000      	movs	r0, #0
 8003dfa:	6360      	str	r0, [r4, #52]	; 0x34
 8003dfc:	e7c0      	b.n	8003d80 <__sflush_r+0x1c>
 8003dfe:	2301      	movs	r3, #1
 8003e00:	4628      	mov	r0, r5
 8003e02:	47b0      	blx	r6
 8003e04:	1c41      	adds	r1, r0, #1
 8003e06:	d1c8      	bne.n	8003d9a <__sflush_r+0x36>
 8003e08:	682b      	ldr	r3, [r5, #0]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d0c5      	beq.n	8003d9a <__sflush_r+0x36>
 8003e0e:	2b1d      	cmp	r3, #29
 8003e10:	d001      	beq.n	8003e16 <__sflush_r+0xb2>
 8003e12:	2b16      	cmp	r3, #22
 8003e14:	d101      	bne.n	8003e1a <__sflush_r+0xb6>
 8003e16:	602f      	str	r7, [r5, #0]
 8003e18:	e7b1      	b.n	8003d7e <__sflush_r+0x1a>
 8003e1a:	89a3      	ldrh	r3, [r4, #12]
 8003e1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e20:	81a3      	strh	r3, [r4, #12]
 8003e22:	e7ad      	b.n	8003d80 <__sflush_r+0x1c>
 8003e24:	690f      	ldr	r7, [r1, #16]
 8003e26:	2f00      	cmp	r7, #0
 8003e28:	d0a9      	beq.n	8003d7e <__sflush_r+0x1a>
 8003e2a:	0793      	lsls	r3, r2, #30
 8003e2c:	680e      	ldr	r6, [r1, #0]
 8003e2e:	bf08      	it	eq
 8003e30:	694b      	ldreq	r3, [r1, #20]
 8003e32:	600f      	str	r7, [r1, #0]
 8003e34:	bf18      	it	ne
 8003e36:	2300      	movne	r3, #0
 8003e38:	eba6 0807 	sub.w	r8, r6, r7
 8003e3c:	608b      	str	r3, [r1, #8]
 8003e3e:	f1b8 0f00 	cmp.w	r8, #0
 8003e42:	dd9c      	ble.n	8003d7e <__sflush_r+0x1a>
 8003e44:	6a21      	ldr	r1, [r4, #32]
 8003e46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003e48:	4643      	mov	r3, r8
 8003e4a:	463a      	mov	r2, r7
 8003e4c:	4628      	mov	r0, r5
 8003e4e:	47b0      	blx	r6
 8003e50:	2800      	cmp	r0, #0
 8003e52:	dc06      	bgt.n	8003e62 <__sflush_r+0xfe>
 8003e54:	89a3      	ldrh	r3, [r4, #12]
 8003e56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e5a:	81a3      	strh	r3, [r4, #12]
 8003e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e60:	e78e      	b.n	8003d80 <__sflush_r+0x1c>
 8003e62:	4407      	add	r7, r0
 8003e64:	eba8 0800 	sub.w	r8, r8, r0
 8003e68:	e7e9      	b.n	8003e3e <__sflush_r+0xda>
 8003e6a:	bf00      	nop
 8003e6c:	dfbffffe 	.word	0xdfbffffe

08003e70 <_fflush_r>:
 8003e70:	b538      	push	{r3, r4, r5, lr}
 8003e72:	690b      	ldr	r3, [r1, #16]
 8003e74:	4605      	mov	r5, r0
 8003e76:	460c      	mov	r4, r1
 8003e78:	b913      	cbnz	r3, 8003e80 <_fflush_r+0x10>
 8003e7a:	2500      	movs	r5, #0
 8003e7c:	4628      	mov	r0, r5
 8003e7e:	bd38      	pop	{r3, r4, r5, pc}
 8003e80:	b118      	cbz	r0, 8003e8a <_fflush_r+0x1a>
 8003e82:	6a03      	ldr	r3, [r0, #32]
 8003e84:	b90b      	cbnz	r3, 8003e8a <_fflush_r+0x1a>
 8003e86:	f7ff f9d3 	bl	8003230 <__sinit>
 8003e8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d0f3      	beq.n	8003e7a <_fflush_r+0xa>
 8003e92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003e94:	07d0      	lsls	r0, r2, #31
 8003e96:	d404      	bmi.n	8003ea2 <_fflush_r+0x32>
 8003e98:	0599      	lsls	r1, r3, #22
 8003e9a:	d402      	bmi.n	8003ea2 <_fflush_r+0x32>
 8003e9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e9e:	f7ff fb8a 	bl	80035b6 <__retarget_lock_acquire_recursive>
 8003ea2:	4628      	mov	r0, r5
 8003ea4:	4621      	mov	r1, r4
 8003ea6:	f7ff ff5d 	bl	8003d64 <__sflush_r>
 8003eaa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003eac:	07da      	lsls	r2, r3, #31
 8003eae:	4605      	mov	r5, r0
 8003eb0:	d4e4      	bmi.n	8003e7c <_fflush_r+0xc>
 8003eb2:	89a3      	ldrh	r3, [r4, #12]
 8003eb4:	059b      	lsls	r3, r3, #22
 8003eb6:	d4e1      	bmi.n	8003e7c <_fflush_r+0xc>
 8003eb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003eba:	f7ff fb7d 	bl	80035b8 <__retarget_lock_release_recursive>
 8003ebe:	e7dd      	b.n	8003e7c <_fflush_r+0xc>

08003ec0 <_getc_r>:
 8003ec0:	b538      	push	{r3, r4, r5, lr}
 8003ec2:	460c      	mov	r4, r1
 8003ec4:	4605      	mov	r5, r0
 8003ec6:	b118      	cbz	r0, 8003ed0 <_getc_r+0x10>
 8003ec8:	6a03      	ldr	r3, [r0, #32]
 8003eca:	b90b      	cbnz	r3, 8003ed0 <_getc_r+0x10>
 8003ecc:	f7ff f9b0 	bl	8003230 <__sinit>
 8003ed0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003ed2:	07d8      	lsls	r0, r3, #31
 8003ed4:	d405      	bmi.n	8003ee2 <_getc_r+0x22>
 8003ed6:	89a3      	ldrh	r3, [r4, #12]
 8003ed8:	0599      	lsls	r1, r3, #22
 8003eda:	d402      	bmi.n	8003ee2 <_getc_r+0x22>
 8003edc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ede:	f7ff fb6a 	bl	80035b6 <__retarget_lock_acquire_recursive>
 8003ee2:	6863      	ldr	r3, [r4, #4]
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	6063      	str	r3, [r4, #4]
 8003eea:	da0f      	bge.n	8003f0c <_getc_r+0x4c>
 8003eec:	4628      	mov	r0, r5
 8003eee:	4621      	mov	r1, r4
 8003ef0:	f000 f8a7 	bl	8004042 <__srget_r>
 8003ef4:	4605      	mov	r5, r0
 8003ef6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003ef8:	07da      	lsls	r2, r3, #31
 8003efa:	d405      	bmi.n	8003f08 <_getc_r+0x48>
 8003efc:	89a3      	ldrh	r3, [r4, #12]
 8003efe:	059b      	lsls	r3, r3, #22
 8003f00:	d402      	bmi.n	8003f08 <_getc_r+0x48>
 8003f02:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f04:	f7ff fb58 	bl	80035b8 <__retarget_lock_release_recursive>
 8003f08:	4628      	mov	r0, r5
 8003f0a:	bd38      	pop	{r3, r4, r5, pc}
 8003f0c:	6823      	ldr	r3, [r4, #0]
 8003f0e:	1c5a      	adds	r2, r3, #1
 8003f10:	6022      	str	r2, [r4, #0]
 8003f12:	781d      	ldrb	r5, [r3, #0]
 8003f14:	e7ef      	b.n	8003ef6 <_getc_r+0x36>

08003f16 <__swhatbuf_r>:
 8003f16:	b570      	push	{r4, r5, r6, lr}
 8003f18:	460c      	mov	r4, r1
 8003f1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f1e:	2900      	cmp	r1, #0
 8003f20:	b096      	sub	sp, #88	; 0x58
 8003f22:	4615      	mov	r5, r2
 8003f24:	461e      	mov	r6, r3
 8003f26:	da0d      	bge.n	8003f44 <__swhatbuf_r+0x2e>
 8003f28:	89a3      	ldrh	r3, [r4, #12]
 8003f2a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003f2e:	f04f 0100 	mov.w	r1, #0
 8003f32:	bf0c      	ite	eq
 8003f34:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003f38:	2340      	movne	r3, #64	; 0x40
 8003f3a:	2000      	movs	r0, #0
 8003f3c:	6031      	str	r1, [r6, #0]
 8003f3e:	602b      	str	r3, [r5, #0]
 8003f40:	b016      	add	sp, #88	; 0x58
 8003f42:	bd70      	pop	{r4, r5, r6, pc}
 8003f44:	466a      	mov	r2, sp
 8003f46:	f000 f929 	bl	800419c <_fstat_r>
 8003f4a:	2800      	cmp	r0, #0
 8003f4c:	dbec      	blt.n	8003f28 <__swhatbuf_r+0x12>
 8003f4e:	9901      	ldr	r1, [sp, #4]
 8003f50:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003f54:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003f58:	4259      	negs	r1, r3
 8003f5a:	4159      	adcs	r1, r3
 8003f5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f60:	e7eb      	b.n	8003f3a <__swhatbuf_r+0x24>

08003f62 <__smakebuf_r>:
 8003f62:	898b      	ldrh	r3, [r1, #12]
 8003f64:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003f66:	079d      	lsls	r5, r3, #30
 8003f68:	4606      	mov	r6, r0
 8003f6a:	460c      	mov	r4, r1
 8003f6c:	d507      	bpl.n	8003f7e <__smakebuf_r+0x1c>
 8003f6e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003f72:	6023      	str	r3, [r4, #0]
 8003f74:	6123      	str	r3, [r4, #16]
 8003f76:	2301      	movs	r3, #1
 8003f78:	6163      	str	r3, [r4, #20]
 8003f7a:	b002      	add	sp, #8
 8003f7c:	bd70      	pop	{r4, r5, r6, pc}
 8003f7e:	ab01      	add	r3, sp, #4
 8003f80:	466a      	mov	r2, sp
 8003f82:	f7ff ffc8 	bl	8003f16 <__swhatbuf_r>
 8003f86:	9900      	ldr	r1, [sp, #0]
 8003f88:	4605      	mov	r5, r0
 8003f8a:	4630      	mov	r0, r6
 8003f8c:	f7ff fb8a 	bl	80036a4 <_malloc_r>
 8003f90:	b948      	cbnz	r0, 8003fa6 <__smakebuf_r+0x44>
 8003f92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f96:	059a      	lsls	r2, r3, #22
 8003f98:	d4ef      	bmi.n	8003f7a <__smakebuf_r+0x18>
 8003f9a:	f023 0303 	bic.w	r3, r3, #3
 8003f9e:	f043 0302 	orr.w	r3, r3, #2
 8003fa2:	81a3      	strh	r3, [r4, #12]
 8003fa4:	e7e3      	b.n	8003f6e <__smakebuf_r+0xc>
 8003fa6:	89a3      	ldrh	r3, [r4, #12]
 8003fa8:	6020      	str	r0, [r4, #0]
 8003faa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fae:	81a3      	strh	r3, [r4, #12]
 8003fb0:	9b00      	ldr	r3, [sp, #0]
 8003fb2:	6163      	str	r3, [r4, #20]
 8003fb4:	9b01      	ldr	r3, [sp, #4]
 8003fb6:	6120      	str	r0, [r4, #16]
 8003fb8:	b15b      	cbz	r3, 8003fd2 <__smakebuf_r+0x70>
 8003fba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003fbe:	4630      	mov	r0, r6
 8003fc0:	f000 f8fe 	bl	80041c0 <_isatty_r>
 8003fc4:	b128      	cbz	r0, 8003fd2 <__smakebuf_r+0x70>
 8003fc6:	89a3      	ldrh	r3, [r4, #12]
 8003fc8:	f023 0303 	bic.w	r3, r3, #3
 8003fcc:	f043 0301 	orr.w	r3, r3, #1
 8003fd0:	81a3      	strh	r3, [r4, #12]
 8003fd2:	89a3      	ldrh	r3, [r4, #12]
 8003fd4:	431d      	orrs	r5, r3
 8003fd6:	81a5      	strh	r5, [r4, #12]
 8003fd8:	e7cf      	b.n	8003f7a <__smakebuf_r+0x18>

08003fda <_putc_r>:
 8003fda:	b570      	push	{r4, r5, r6, lr}
 8003fdc:	460d      	mov	r5, r1
 8003fde:	4614      	mov	r4, r2
 8003fe0:	4606      	mov	r6, r0
 8003fe2:	b118      	cbz	r0, 8003fec <_putc_r+0x12>
 8003fe4:	6a03      	ldr	r3, [r0, #32]
 8003fe6:	b90b      	cbnz	r3, 8003fec <_putc_r+0x12>
 8003fe8:	f7ff f922 	bl	8003230 <__sinit>
 8003fec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003fee:	07d8      	lsls	r0, r3, #31
 8003ff0:	d405      	bmi.n	8003ffe <_putc_r+0x24>
 8003ff2:	89a3      	ldrh	r3, [r4, #12]
 8003ff4:	0599      	lsls	r1, r3, #22
 8003ff6:	d402      	bmi.n	8003ffe <_putc_r+0x24>
 8003ff8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ffa:	f7ff fadc 	bl	80035b6 <__retarget_lock_acquire_recursive>
 8003ffe:	68a3      	ldr	r3, [r4, #8]
 8004000:	3b01      	subs	r3, #1
 8004002:	2b00      	cmp	r3, #0
 8004004:	60a3      	str	r3, [r4, #8]
 8004006:	da05      	bge.n	8004014 <_putc_r+0x3a>
 8004008:	69a2      	ldr	r2, [r4, #24]
 800400a:	4293      	cmp	r3, r2
 800400c:	db12      	blt.n	8004034 <_putc_r+0x5a>
 800400e:	b2eb      	uxtb	r3, r5
 8004010:	2b0a      	cmp	r3, #10
 8004012:	d00f      	beq.n	8004034 <_putc_r+0x5a>
 8004014:	6823      	ldr	r3, [r4, #0]
 8004016:	1c5a      	adds	r2, r3, #1
 8004018:	6022      	str	r2, [r4, #0]
 800401a:	701d      	strb	r5, [r3, #0]
 800401c:	b2ed      	uxtb	r5, r5
 800401e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004020:	07da      	lsls	r2, r3, #31
 8004022:	d405      	bmi.n	8004030 <_putc_r+0x56>
 8004024:	89a3      	ldrh	r3, [r4, #12]
 8004026:	059b      	lsls	r3, r3, #22
 8004028:	d402      	bmi.n	8004030 <_putc_r+0x56>
 800402a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800402c:	f7ff fac4 	bl	80035b8 <__retarget_lock_release_recursive>
 8004030:	4628      	mov	r0, r5
 8004032:	bd70      	pop	{r4, r5, r6, pc}
 8004034:	4629      	mov	r1, r5
 8004036:	4622      	mov	r2, r4
 8004038:	4630      	mov	r0, r6
 800403a:	f000 f81a 	bl	8004072 <__swbuf_r>
 800403e:	4605      	mov	r5, r0
 8004040:	e7ed      	b.n	800401e <_putc_r+0x44>

08004042 <__srget_r>:
 8004042:	b538      	push	{r3, r4, r5, lr}
 8004044:	460c      	mov	r4, r1
 8004046:	4605      	mov	r5, r0
 8004048:	b118      	cbz	r0, 8004052 <__srget_r+0x10>
 800404a:	6a03      	ldr	r3, [r0, #32]
 800404c:	b90b      	cbnz	r3, 8004052 <__srget_r+0x10>
 800404e:	f7ff f8ef 	bl	8003230 <__sinit>
 8004052:	4621      	mov	r1, r4
 8004054:	4628      	mov	r0, r5
 8004056:	f000 f8e1 	bl	800421c <__srefill_r>
 800405a:	b938      	cbnz	r0, 800406c <__srget_r+0x2a>
 800405c:	6863      	ldr	r3, [r4, #4]
 800405e:	3b01      	subs	r3, #1
 8004060:	6063      	str	r3, [r4, #4]
 8004062:	6823      	ldr	r3, [r4, #0]
 8004064:	1c5a      	adds	r2, r3, #1
 8004066:	6022      	str	r2, [r4, #0]
 8004068:	7818      	ldrb	r0, [r3, #0]
 800406a:	bd38      	pop	{r3, r4, r5, pc}
 800406c:	f04f 30ff 	mov.w	r0, #4294967295
 8004070:	e7fb      	b.n	800406a <__srget_r+0x28>

08004072 <__swbuf_r>:
 8004072:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004074:	460e      	mov	r6, r1
 8004076:	4614      	mov	r4, r2
 8004078:	4605      	mov	r5, r0
 800407a:	b118      	cbz	r0, 8004084 <__swbuf_r+0x12>
 800407c:	6a03      	ldr	r3, [r0, #32]
 800407e:	b90b      	cbnz	r3, 8004084 <__swbuf_r+0x12>
 8004080:	f7ff f8d6 	bl	8003230 <__sinit>
 8004084:	69a3      	ldr	r3, [r4, #24]
 8004086:	60a3      	str	r3, [r4, #8]
 8004088:	89a3      	ldrh	r3, [r4, #12]
 800408a:	071a      	lsls	r2, r3, #28
 800408c:	d525      	bpl.n	80040da <__swbuf_r+0x68>
 800408e:	6923      	ldr	r3, [r4, #16]
 8004090:	b31b      	cbz	r3, 80040da <__swbuf_r+0x68>
 8004092:	6823      	ldr	r3, [r4, #0]
 8004094:	6922      	ldr	r2, [r4, #16]
 8004096:	1a98      	subs	r0, r3, r2
 8004098:	6963      	ldr	r3, [r4, #20]
 800409a:	b2f6      	uxtb	r6, r6
 800409c:	4283      	cmp	r3, r0
 800409e:	4637      	mov	r7, r6
 80040a0:	dc04      	bgt.n	80040ac <__swbuf_r+0x3a>
 80040a2:	4621      	mov	r1, r4
 80040a4:	4628      	mov	r0, r5
 80040a6:	f7ff fee3 	bl	8003e70 <_fflush_r>
 80040aa:	b9e0      	cbnz	r0, 80040e6 <__swbuf_r+0x74>
 80040ac:	68a3      	ldr	r3, [r4, #8]
 80040ae:	3b01      	subs	r3, #1
 80040b0:	60a3      	str	r3, [r4, #8]
 80040b2:	6823      	ldr	r3, [r4, #0]
 80040b4:	1c5a      	adds	r2, r3, #1
 80040b6:	6022      	str	r2, [r4, #0]
 80040b8:	701e      	strb	r6, [r3, #0]
 80040ba:	6962      	ldr	r2, [r4, #20]
 80040bc:	1c43      	adds	r3, r0, #1
 80040be:	429a      	cmp	r2, r3
 80040c0:	d004      	beq.n	80040cc <__swbuf_r+0x5a>
 80040c2:	89a3      	ldrh	r3, [r4, #12]
 80040c4:	07db      	lsls	r3, r3, #31
 80040c6:	d506      	bpl.n	80040d6 <__swbuf_r+0x64>
 80040c8:	2e0a      	cmp	r6, #10
 80040ca:	d104      	bne.n	80040d6 <__swbuf_r+0x64>
 80040cc:	4621      	mov	r1, r4
 80040ce:	4628      	mov	r0, r5
 80040d0:	f7ff fece 	bl	8003e70 <_fflush_r>
 80040d4:	b938      	cbnz	r0, 80040e6 <__swbuf_r+0x74>
 80040d6:	4638      	mov	r0, r7
 80040d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040da:	4621      	mov	r1, r4
 80040dc:	4628      	mov	r0, r5
 80040de:	f000 f805 	bl	80040ec <__swsetup_r>
 80040e2:	2800      	cmp	r0, #0
 80040e4:	d0d5      	beq.n	8004092 <__swbuf_r+0x20>
 80040e6:	f04f 37ff 	mov.w	r7, #4294967295
 80040ea:	e7f4      	b.n	80040d6 <__swbuf_r+0x64>

080040ec <__swsetup_r>:
 80040ec:	b538      	push	{r3, r4, r5, lr}
 80040ee:	4b2a      	ldr	r3, [pc, #168]	; (8004198 <__swsetup_r+0xac>)
 80040f0:	4605      	mov	r5, r0
 80040f2:	6818      	ldr	r0, [r3, #0]
 80040f4:	460c      	mov	r4, r1
 80040f6:	b118      	cbz	r0, 8004100 <__swsetup_r+0x14>
 80040f8:	6a03      	ldr	r3, [r0, #32]
 80040fa:	b90b      	cbnz	r3, 8004100 <__swsetup_r+0x14>
 80040fc:	f7ff f898 	bl	8003230 <__sinit>
 8004100:	89a3      	ldrh	r3, [r4, #12]
 8004102:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004106:	0718      	lsls	r0, r3, #28
 8004108:	d422      	bmi.n	8004150 <__swsetup_r+0x64>
 800410a:	06d9      	lsls	r1, r3, #27
 800410c:	d407      	bmi.n	800411e <__swsetup_r+0x32>
 800410e:	2309      	movs	r3, #9
 8004110:	602b      	str	r3, [r5, #0]
 8004112:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004116:	81a3      	strh	r3, [r4, #12]
 8004118:	f04f 30ff 	mov.w	r0, #4294967295
 800411c:	e034      	b.n	8004188 <__swsetup_r+0x9c>
 800411e:	0758      	lsls	r0, r3, #29
 8004120:	d512      	bpl.n	8004148 <__swsetup_r+0x5c>
 8004122:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004124:	b141      	cbz	r1, 8004138 <__swsetup_r+0x4c>
 8004126:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800412a:	4299      	cmp	r1, r3
 800412c:	d002      	beq.n	8004134 <__swsetup_r+0x48>
 800412e:	4628      	mov	r0, r5
 8004130:	f7ff fa44 	bl	80035bc <_free_r>
 8004134:	2300      	movs	r3, #0
 8004136:	6363      	str	r3, [r4, #52]	; 0x34
 8004138:	89a3      	ldrh	r3, [r4, #12]
 800413a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800413e:	81a3      	strh	r3, [r4, #12]
 8004140:	2300      	movs	r3, #0
 8004142:	6063      	str	r3, [r4, #4]
 8004144:	6923      	ldr	r3, [r4, #16]
 8004146:	6023      	str	r3, [r4, #0]
 8004148:	89a3      	ldrh	r3, [r4, #12]
 800414a:	f043 0308 	orr.w	r3, r3, #8
 800414e:	81a3      	strh	r3, [r4, #12]
 8004150:	6923      	ldr	r3, [r4, #16]
 8004152:	b94b      	cbnz	r3, 8004168 <__swsetup_r+0x7c>
 8004154:	89a3      	ldrh	r3, [r4, #12]
 8004156:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800415a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800415e:	d003      	beq.n	8004168 <__swsetup_r+0x7c>
 8004160:	4621      	mov	r1, r4
 8004162:	4628      	mov	r0, r5
 8004164:	f7ff fefd 	bl	8003f62 <__smakebuf_r>
 8004168:	89a0      	ldrh	r0, [r4, #12]
 800416a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800416e:	f010 0301 	ands.w	r3, r0, #1
 8004172:	d00a      	beq.n	800418a <__swsetup_r+0x9e>
 8004174:	2300      	movs	r3, #0
 8004176:	60a3      	str	r3, [r4, #8]
 8004178:	6963      	ldr	r3, [r4, #20]
 800417a:	425b      	negs	r3, r3
 800417c:	61a3      	str	r3, [r4, #24]
 800417e:	6923      	ldr	r3, [r4, #16]
 8004180:	b943      	cbnz	r3, 8004194 <__swsetup_r+0xa8>
 8004182:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004186:	d1c4      	bne.n	8004112 <__swsetup_r+0x26>
 8004188:	bd38      	pop	{r3, r4, r5, pc}
 800418a:	0781      	lsls	r1, r0, #30
 800418c:	bf58      	it	pl
 800418e:	6963      	ldrpl	r3, [r4, #20]
 8004190:	60a3      	str	r3, [r4, #8]
 8004192:	e7f4      	b.n	800417e <__swsetup_r+0x92>
 8004194:	2000      	movs	r0, #0
 8004196:	e7f7      	b.n	8004188 <__swsetup_r+0x9c>
 8004198:	20000064 	.word	0x20000064

0800419c <_fstat_r>:
 800419c:	b538      	push	{r3, r4, r5, lr}
 800419e:	4d07      	ldr	r5, [pc, #28]	; (80041bc <_fstat_r+0x20>)
 80041a0:	2300      	movs	r3, #0
 80041a2:	4604      	mov	r4, r0
 80041a4:	4608      	mov	r0, r1
 80041a6:	4611      	mov	r1, r2
 80041a8:	602b      	str	r3, [r5, #0]
 80041aa:	f7fc fc0b 	bl	80009c4 <_fstat>
 80041ae:	1c43      	adds	r3, r0, #1
 80041b0:	d102      	bne.n	80041b8 <_fstat_r+0x1c>
 80041b2:	682b      	ldr	r3, [r5, #0]
 80041b4:	b103      	cbz	r3, 80041b8 <_fstat_r+0x1c>
 80041b6:	6023      	str	r3, [r4, #0]
 80041b8:	bd38      	pop	{r3, r4, r5, pc}
 80041ba:	bf00      	nop
 80041bc:	20000254 	.word	0x20000254

080041c0 <_isatty_r>:
 80041c0:	b538      	push	{r3, r4, r5, lr}
 80041c2:	4d06      	ldr	r5, [pc, #24]	; (80041dc <_isatty_r+0x1c>)
 80041c4:	2300      	movs	r3, #0
 80041c6:	4604      	mov	r4, r0
 80041c8:	4608      	mov	r0, r1
 80041ca:	602b      	str	r3, [r5, #0]
 80041cc:	f7fc fb68 	bl	80008a0 <_isatty>
 80041d0:	1c43      	adds	r3, r0, #1
 80041d2:	d102      	bne.n	80041da <_isatty_r+0x1a>
 80041d4:	682b      	ldr	r3, [r5, #0]
 80041d6:	b103      	cbz	r3, 80041da <_isatty_r+0x1a>
 80041d8:	6023      	str	r3, [r4, #0]
 80041da:	bd38      	pop	{r3, r4, r5, pc}
 80041dc:	20000254 	.word	0x20000254

080041e0 <_sbrk_r>:
 80041e0:	b538      	push	{r3, r4, r5, lr}
 80041e2:	4d06      	ldr	r5, [pc, #24]	; (80041fc <_sbrk_r+0x1c>)
 80041e4:	2300      	movs	r3, #0
 80041e6:	4604      	mov	r4, r0
 80041e8:	4608      	mov	r0, r1
 80041ea:	602b      	str	r3, [r5, #0]
 80041ec:	f7fc fcbe 	bl	8000b6c <_sbrk>
 80041f0:	1c43      	adds	r3, r0, #1
 80041f2:	d102      	bne.n	80041fa <_sbrk_r+0x1a>
 80041f4:	682b      	ldr	r3, [r5, #0]
 80041f6:	b103      	cbz	r3, 80041fa <_sbrk_r+0x1a>
 80041f8:	6023      	str	r3, [r4, #0]
 80041fa:	bd38      	pop	{r3, r4, r5, pc}
 80041fc:	20000254 	.word	0x20000254

08004200 <lflush>:
 8004200:	898b      	ldrh	r3, [r1, #12]
 8004202:	f003 0309 	and.w	r3, r3, #9
 8004206:	2b09      	cmp	r3, #9
 8004208:	d103      	bne.n	8004212 <lflush+0x12>
 800420a:	4b03      	ldr	r3, [pc, #12]	; (8004218 <lflush+0x18>)
 800420c:	6818      	ldr	r0, [r3, #0]
 800420e:	f7ff be2f 	b.w	8003e70 <_fflush_r>
 8004212:	2000      	movs	r0, #0
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	20000064 	.word	0x20000064

0800421c <__srefill_r>:
 800421c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800421e:	460c      	mov	r4, r1
 8004220:	4605      	mov	r5, r0
 8004222:	b118      	cbz	r0, 800422c <__srefill_r+0x10>
 8004224:	6a03      	ldr	r3, [r0, #32]
 8004226:	b90b      	cbnz	r3, 800422c <__srefill_r+0x10>
 8004228:	f7ff f802 	bl	8003230 <__sinit>
 800422c:	2300      	movs	r3, #0
 800422e:	6063      	str	r3, [r4, #4]
 8004230:	89a3      	ldrh	r3, [r4, #12]
 8004232:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004236:	069e      	lsls	r6, r3, #26
 8004238:	d502      	bpl.n	8004240 <__srefill_r+0x24>
 800423a:	f04f 30ff 	mov.w	r0, #4294967295
 800423e:	e05c      	b.n	80042fa <__srefill_r+0xde>
 8004240:	0758      	lsls	r0, r3, #29
 8004242:	d448      	bmi.n	80042d6 <__srefill_r+0xba>
 8004244:	06d9      	lsls	r1, r3, #27
 8004246:	d405      	bmi.n	8004254 <__srefill_r+0x38>
 8004248:	2309      	movs	r3, #9
 800424a:	602b      	str	r3, [r5, #0]
 800424c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004250:	81a3      	strh	r3, [r4, #12]
 8004252:	e7f2      	b.n	800423a <__srefill_r+0x1e>
 8004254:	071a      	lsls	r2, r3, #28
 8004256:	d50b      	bpl.n	8004270 <__srefill_r+0x54>
 8004258:	4621      	mov	r1, r4
 800425a:	4628      	mov	r0, r5
 800425c:	f7ff fe08 	bl	8003e70 <_fflush_r>
 8004260:	2800      	cmp	r0, #0
 8004262:	d1ea      	bne.n	800423a <__srefill_r+0x1e>
 8004264:	89a3      	ldrh	r3, [r4, #12]
 8004266:	60a0      	str	r0, [r4, #8]
 8004268:	f023 0308 	bic.w	r3, r3, #8
 800426c:	81a3      	strh	r3, [r4, #12]
 800426e:	61a0      	str	r0, [r4, #24]
 8004270:	89a3      	ldrh	r3, [r4, #12]
 8004272:	f043 0304 	orr.w	r3, r3, #4
 8004276:	81a3      	strh	r3, [r4, #12]
 8004278:	6923      	ldr	r3, [r4, #16]
 800427a:	b91b      	cbnz	r3, 8004284 <__srefill_r+0x68>
 800427c:	4621      	mov	r1, r4
 800427e:	4628      	mov	r0, r5
 8004280:	f7ff fe6f 	bl	8003f62 <__smakebuf_r>
 8004284:	89a6      	ldrh	r6, [r4, #12]
 8004286:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 800428a:	07b3      	lsls	r3, r6, #30
 800428c:	d00f      	beq.n	80042ae <__srefill_r+0x92>
 800428e:	2301      	movs	r3, #1
 8004290:	4a1b      	ldr	r2, [pc, #108]	; (8004300 <__srefill_r+0xe4>)
 8004292:	491c      	ldr	r1, [pc, #112]	; (8004304 <__srefill_r+0xe8>)
 8004294:	481c      	ldr	r0, [pc, #112]	; (8004308 <__srefill_r+0xec>)
 8004296:	81a3      	strh	r3, [r4, #12]
 8004298:	f006 0609 	and.w	r6, r6, #9
 800429c:	f7fe ffe0 	bl	8003260 <_fwalk_sglue>
 80042a0:	2e09      	cmp	r6, #9
 80042a2:	81a7      	strh	r7, [r4, #12]
 80042a4:	d103      	bne.n	80042ae <__srefill_r+0x92>
 80042a6:	4621      	mov	r1, r4
 80042a8:	4628      	mov	r0, r5
 80042aa:	f7ff fd5b 	bl	8003d64 <__sflush_r>
 80042ae:	6922      	ldr	r2, [r4, #16]
 80042b0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80042b2:	6963      	ldr	r3, [r4, #20]
 80042b4:	6a21      	ldr	r1, [r4, #32]
 80042b6:	6022      	str	r2, [r4, #0]
 80042b8:	4628      	mov	r0, r5
 80042ba:	47b0      	blx	r6
 80042bc:	2800      	cmp	r0, #0
 80042be:	6060      	str	r0, [r4, #4]
 80042c0:	dc1c      	bgt.n	80042fc <__srefill_r+0xe0>
 80042c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042c6:	bf17      	itett	ne
 80042c8:	2200      	movne	r2, #0
 80042ca:	f043 0320 	orreq.w	r3, r3, #32
 80042ce:	6062      	strne	r2, [r4, #4]
 80042d0:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 80042d4:	e7bc      	b.n	8004250 <__srefill_r+0x34>
 80042d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80042d8:	2900      	cmp	r1, #0
 80042da:	d0cd      	beq.n	8004278 <__srefill_r+0x5c>
 80042dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80042e0:	4299      	cmp	r1, r3
 80042e2:	d002      	beq.n	80042ea <__srefill_r+0xce>
 80042e4:	4628      	mov	r0, r5
 80042e6:	f7ff f969 	bl	80035bc <_free_r>
 80042ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80042ec:	6063      	str	r3, [r4, #4]
 80042ee:	2000      	movs	r0, #0
 80042f0:	6360      	str	r0, [r4, #52]	; 0x34
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d0c0      	beq.n	8004278 <__srefill_r+0x5c>
 80042f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80042f8:	6023      	str	r3, [r4, #0]
 80042fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042fc:	2000      	movs	r0, #0
 80042fe:	e7fc      	b.n	80042fa <__srefill_r+0xde>
 8004300:	2000000c 	.word	0x2000000c
 8004304:	08004201 	.word	0x08004201
 8004308:	20000018 	.word	0x20000018

0800430c <_init>:
 800430c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800430e:	bf00      	nop
 8004310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004312:	bc08      	pop	{r3}
 8004314:	469e      	mov	lr, r3
 8004316:	4770      	bx	lr

08004318 <_fini>:
 8004318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800431a:	bf00      	nop
 800431c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800431e:	bc08      	pop	{r3}
 8004320:	469e      	mov	lr, r3
 8004322:	4770      	bx	lr
